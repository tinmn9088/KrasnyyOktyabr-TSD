// @strict-types
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

    ФормаСотрудник = Параметры.Сотрудник;

    ФормаСписокНоменклатур.Параметры.УстановитьЗначениеПараметра("Документ", Объект.Ссылка);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

#Если МобильныйКлиент Или МобильноеПриложениеКлиент Тогда
	
	// Отключение заголовков в группе описания
    Элементы.Организация.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
    Элементы.Контрагент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
    Элементы.Склад.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
    Элементы.ОписаниеЭлектроннойНакладной.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	
    // Отключение видимости шапки динамического списка, чтобы сэкономить место на экране 
    Элементы.СписокНоменклатур.Шапка = Ложь;

#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

    Если ВводДоступен() И ИмяСобытия = ОповещенияФормыКлиент.ИмяСобытияСканированияШтрихкода() Тогда

        Штрихкод = Строка(Параметр);

        ОбработатьШтрихкод(Штрихкод);

    КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ШтрихкодИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)

    Элементы.КнопкаОбработатьШтрихкод.Доступность = ЗначениеЗаполнено(Текст);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбработатьШтрихкодСФормы(Команда)

    ОбработатьШтрихкод(ФормаШтрихкод);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция возвращает ключ уникальности оповещений пользователя.
// 
// Возвращаемое значение:
//  Строка
&НаКлиенте
Функция КлючУникальностиОповещенийПользователя()

    Возврат ИмяФормы;

КонецФункции

// Процедура обрабатывает штрихкод.
// 
// Параметры:
//  Штрихкод - Строка
&НаКлиенте
Процедура ОбработатьШтрихкод(Штрихкод)

    // 1. Оповещение пользователю о начале обработки штрихкода
    ПоказатьОповещениеОбУспешномСканировании("Обработка штрихкода", Штрихкод);
                                                    
    // 2. Обработка штрихкода
    ОписаниеОбработкиШтрихкода = ?(Объект.ИспользуетсяМаркировкаТоваров,
                                   ОбработатьКодМаркировки(Объект.Ссылка, Штрихкод),
                                   ОбработатьGTIN(Объект.Ссылка, GTINИзШтрихкода(Штрихкод)));
                                                    
    // 3.1. Оповещение об успешной обработке
    Если ЭтоКодВозвратаУспех(ОписаниеОбработкиШтрихкода.КодВозврата) Тогда

        ЗаголовокОповещения = СтрШаблон("Номенклатура %1", ОписаниеОбработкиШтрихкода.НомерНоменклатуры);
        ПояснениеОповещения = СтрШаблон("Количество %1 → %2",
                                        ОписаниеОбработкиШтрихкода.ПредыдущееКоличество,
                                        ОписаниеОбработкиШтрихкода.НовоеКоличество);

        ПоказатьОповещениеПоКодуВозврата(ОписаниеОбработкиШтрихкода.КодВозврата,
                                         ЗаголовокОповещения,
                                         ПояснениеОповещения);

        Элементы.СписокНоменклатур.Обновить();
                                         
    // 3.2. Оповещение о том, что код маркировки не найден
    ИначеЕсли ЭтоКодВозвратаНеНайденКодМаркировки(ОписаниеОбработкиШтрихкода.КодВозврата) Тогда

        ПоказатьВажноеОповещениеОбОшибкеДляКодаВозврата(ОписаниеОбработкиШтрихкода.КодВозврата,
                                                        "Код маркировки не найден",
                                                        Штрихкод);
                                                        
    // 3.3. Оповещение о том, что код маркировки обрабатывается повторно
    ИначеЕсли ЭтоКодВозвратаКодМаркировкиУжеПроверен(ОписаниеОбработкиШтрихкода.КодВозврата) Тогда

        ПоказатьВажноеОповещениеОбОшибкеДляКодаВозврата(ОписаниеОбработкиШтрихкода.КодВозврата,
                                                        "Код уже был обработан",
                                                        Штрихкод);
                                                        
    // 3.4. Оповещение о том, что не найдена номенклатура по GTIN, извлеченному из штрихкода
    ИначеЕсли ЭтоКодВозвратаНеНайденаНоменклатура(ОписаниеОбработкиШтрихкода.КодВозврата) Тогда

        ПоказатьВажноеОповещениеОбОшибкеДляКодаВозврата(ОписаниеОбработкиШтрихкода.КодВозврата,
                                                        "Номенклатура не найдена",
                                                        GTINИзШтрихкода(Штрихкод));

    КонецЕсли;

КонецПроцедуры

// См. МаркировкаИПрослеживаемость.ОбработатьКодМаркировки
&НаСервере
Функция ОбработатьКодМаркировки(Знач АктПриемкиТоваров, Знач КодМаркировки)

    Возврат МаркировкаИПрослеживаемость.ОбработатьКодМаркировки(АктПриемкиТоваров, КодМаркировки);

КонецФункции

// См. МаркировкаИПрослеживаемость.ОбработатьGTIN
//@skip-check method-param-value-type
&НаСервере
Функция ОбработатьGTIN(Знач АктПриемкиТоваров, Знач GTIN)

    //@skip-check invocation-parameter-type-intersect
    Возврат МаркировкаИПрослеживаемость.ОбработатьGTIN(АктПриемкиТоваров, GTIN);

КонецФункции

// Функция извлекает GTIN из штрихкода.
// 
// Параметры:
//  Штрихкод - Строка
// 
// Возвращаемое значение:
//  Строка
&НаКлиенте
Функция GTINИзШтрихкода(Штрихкод)
    
    // В GS1 DataMatrix начало GTIN отмечается "01"
    ПозицияGTIN = СтрНайти(Штрихкод, "01") + 2;
    
    GTINСЛидирующимиНулями = Сред(Штрихкод, ПозицияGTIN, 14);

    Возврат Формат(Число(GTINСЛидирующимиНулями), "ЧГ=;");

КонецФункции 

// Процедура воспроизводит звуковой сигнал и показывает оповещение.
// 
// Параметры:
//  Заголовок - Строка
//  Пояснение - Строка
&НаКлиенте
Процедура ПоказатьОповещениеОбУспешномСканировании(Знач Заголовок, Знач Пояснение)

    Тип = ПредопределенноеЗначение("Перечисление.ТипШтрихкода.DataMatrix");

#Если МобильноеПриложениеКлиент Или МобильныйКлиент Тогда

    СредстваМультимедиаКлиент.ВоспроизвестиЗвуковоеОповещениеОбУспешномСканированииШтрихкода(Тип);

#КонецЕсли

    ОповещенияПользователяКлиент.ПоказатьОповещение(Заголовок, Пояснение, КлючУникальностиОповещенийПользователя());

КонецПроцедуры

// Процедура воспроизводит звуковой сигнал, соответствующий коду возврата и 
// показывает оповещение.
// 
// Параметры:
//  КодВозврата - Число - См. КодыВозвратаСерверГлобальный
//  Заголовок - Строка
//  Пояснение - Строка
&НаКлиенте
Процедура ПоказатьОповещениеПоКодуВозврата(Знач КодВозврата, Знач Заголовок, Знач Пояснение)

#Если МобильноеПриложениеКлиент Или МобильныйКлиент Тогда

    СредстваМультимедиаКлиент.ВоспроизвестиЗвуковоеОповещениеДляКодаВозврата(КодВозврата);

#КонецЕсли

    ОповещенияПользователяКлиент.ПоказатьОповещение(Заголовок, Пояснение, КлючУникальностиОповещенийПользователя());

КонецПроцедуры

// Процедура воспроизводит звуковой сигнал, соответствующий коду возврата и 
// показывает важное оповещение об ошибке.
// 
// Параметры:
//  КодВозврата - Число - См. КодыВозвратаСерверГлобальный
//  Заголовок - Строка
//  Пояснение - Строка
&НаКлиенте
Процедура ПоказатьВажноеОповещениеОбОшибкеДляКодаВозврата(Знач КодВозврата, Знач Заголовок, Знач Пояснение)

#Если МобильноеПриложениеКлиент Или МобильныйКлиент Тогда

    СредстваМультимедиаКлиент.ВоспроизвестиЗвуковоеОповещениеДляКодаВозврата(КодВозврата);

#КонецЕсли

    ОповещенияПользователяКлиент.ПоказатьВажноеОповещениеОшибка(Заголовок,
                                                                Пояснение,
                                                                КлючУникальностиОповещенийПользователя());

КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура ПоказатьПроверкаЗавершена()

    Элементы.СписокНоменклатур.Видимость = Ложь;
    Элементы.ВводШтрихкода.Видимость = Ложь;

    Элементы.ПодсказкаПроверкаЗавершена.Видимость = Истина;

КонецПроцедуры

#КонецОбласти