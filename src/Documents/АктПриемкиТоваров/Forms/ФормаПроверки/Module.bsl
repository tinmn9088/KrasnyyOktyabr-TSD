// @strict-types
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

    ФормаСотрудник = Параметры.Сотрудник;

    ФормаСписокНоменклатур.Параметры.УстановитьЗначениеПараметра("Документ", Объект.Ссылка);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

    ОбновитьПоказательОстаткаДляПроверки();

#Если МобильныйКлиент Или МобильноеПриложениеКлиент Тогда

	// Отключение заголовков в группе описания
    Элементы.Организация.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
    Элементы.Контрагент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
    Элементы.Склад.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
    Элементы.ДополнительнаяИнформация.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	
    // Отключение видимости шапки динамического списка, чтобы сэкономить место на экране 
    Элементы.СписокНоменклатур.Шапка = Ложь;

    Если Объект.ИспользуетсяМаркировкаТоваров Тогда

        Элементы.ОсновнаяИнформацияИспользуетсяМаркировкаТоваров.Видимость = Истина;

    КонецЕсли;

#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

    Если ВводДоступен() И ИмяСобытия = ОповещенияФормыКлиент.ИмяСобытияСканированияШтрихкода() Тогда

        Штрихкод = Строка(Параметр);

        ОбработатьШтрихкод(Штрихкод);

    КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ШтрихкодИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)

    Элементы.КнопкаОбработатьШтрихкод.Доступность = ЗначениеЗаполнено(Текст);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокНоменклатур

// Процедура обрабатывает выбор строки в списке номенклатур.
// 
// Параметры:
//  Элемент - ТаблицаФормы
//  ВыбраннаяСтрока - Число - Номер строки табличной части Номенклатура
//  Поле - ПолеФормы
//  СтандартнаяОбработка - Булево
&НаКлиенте
Асинх Процедура СписокНоменклатурВыборАсинх(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

    Если Не Объект.ИспользуетсяМаркировкаТоваров Тогда

        ПредыдущееКоличествоПринятогоТовара = Объект.Номенклатура.Получить(ВыбраннаяСтрока
            - 1).КоличествоПринятогоТовара;

        GTIN = GTINИзНомераНоменклатуры(Объект.Ссылка, ВыбраннаяСтрока);

        НовоеКоличествоПринятогоТовара = Ждать ВвестиЧислоАсинх(ПредыдущееКоличествоПринятогоТовара, GTIN, , 0);

        Если НовоеКоличествоПринятогоТовара <> Неопределено И НовоеКоличествоПринятогоТовара
            <> ПредыдущееКоличествоПринятогоТовара Тогда

            ОбновитьКоличествоПринятогоТовара(Объект.Ссылка, ВыбраннаяСтрока, НовоеКоличествоПринятогоТовара);

            ОбновитьФорму();

        КонецЕсли;

    КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбработатьШтрихкодСФормы(Команда)

    ОбработатьШтрихкод(ФормаШтрихкод);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроверкаАктаПриемкиТоваров
// Процедура обрабатывает штрихкод.
// 
// Параметры:
//  Штрихкод - Строка
&НаКлиенте
Процедура ОбработатьШтрихкод(Штрихкод)

    // 1. Оповещение пользователю о начале обработки штрихкода
    ПоказатьОповещениеОбУспешномСканировании("Обработка штрихкода", Штрихкод);
                                                    
    // 2. Обработка штрихкода
    ОписаниеОбработкиШтрихкода = ?(Объект.ИспользуетсяМаркировкаТоваров,
                                   ОбработатьКодМаркировки(Объект.Ссылка, Штрихкод),
                                   ОбработатьGTIN(Объект.Ссылка, GTINИзШтрихкода(Штрихкод)));
                                                    
    // 3.1. Оповещение об успешной обработке
    Если ЭтоКодВозвратаУспех(ОписаниеОбработкиШтрихкода.КодВозврата) Тогда

        ЗаголовокОповещения = СтрШаблон("Номенклатура %1", ОписаниеОбработкиШтрихкода.НомерНоменклатуры);
        ПояснениеОповещения = СтрШаблон("Количество %1 → %2",
                                        ОписаниеОбработкиШтрихкода.ПредыдущееКоличество,
                                        ОписаниеОбработкиШтрихкода.НовоеКоличество);

        ПоказатьОповещениеПоКодуВозврата(ОписаниеОбработкиШтрихкода.КодВозврата,
                                         ЗаголовокОповещения,
                                         ПояснениеОповещения);

        ОбновитьФорму();
                                         
    // 3.2. Оповещение о том, что код маркировки не найден
    ИначеЕсли ЭтоКодВозвратаНеНайденКодМаркировки(ОписаниеОбработкиШтрихкода.КодВозврата) Тогда

        ПоказатьВажноеОповещениеОбОшибкеДляКодаВозврата(ОписаниеОбработкиШтрихкода.КодВозврата,
                                                        "Код маркировки не найден",
                                                        Штрихкод);
                                                        
    // 3.3. Оповещение о том, что код маркировки обрабатывается повторно
    ИначеЕсли ЭтоКодВозвратаКодМаркировкиУжеПроверен(ОписаниеОбработкиШтрихкода.КодВозврата) Тогда

        ПоказатьВажноеОповещениеОбОшибкеДляКодаВозврата(ОписаниеОбработкиШтрихкода.КодВозврата,
                                                        "Код уже был обработан",
                                                        Штрихкод);
                                                        
    // 3.4. Оповещение о том, что не найдена номенклатура по GTIN, извлеченному из штрихкода
    ИначеЕсли ЭтоКодВозвратаНеНайденаНоменклатура(ОписаниеОбработкиШтрихкода.КодВозврата) Тогда

        ПоказатьВажноеОповещениеОбОшибкеДляКодаВозврата(ОписаниеОбработкиШтрихкода.КодВозврата,
                                                        "Номенклатура не найдена",
                                                        GTINИзШтрихкода(Штрихкод));

    КонецЕсли;

КонецПроцедуры

// См. МаркировкаИПрослеживаемость.ОбработатьКодМаркировки
&НаСервереБезКонтекста
Функция ОбработатьКодМаркировки(Знач АктПриемкиТоваров, Знач КодМаркировки)

    Возврат МаркировкаИПрослеживаемость.ОбработатьКодМаркировки(АктПриемкиТоваров, КодМаркировки);

КонецФункции

// См. МаркировкаИПрослеживаемость.ОбработатьGTIN
//@skip-check method-param-value-type
&НаСервереБезКонтекста
Функция ОбработатьGTIN(Знач АктПриемкиТоваров, Знач GTIN)

    //@skip-check invocation-parameter-type-intersect
    Возврат МаркировкаИПрослеживаемость.ОбработатьGTIN(АктПриемкиТоваров, GTIN);

КонецФункции

// Функция извлекает GTIN из штрихкода.
// 
// Параметры:
//  Штрихкод - Строка
// 
// Возвращаемое значение:
//  Строка
&НаКлиенте
Функция GTINИзШтрихкода(Штрихкод)
    
    // В GS1 DataMatrix начало GTIN отмечается "01"
    ПозицияGTIN = СтрНайти(Штрихкод, "01") + 2;

    GTINСЛидирующимиНулями = Сред(Штрихкод, ПозицияGTIN, 14);

    Возврат Формат(Число(GTINСЛидирующимиНулями), "ЧГ=;");

КонецФункции 

// Функция достает GTIN по номеру строки табличной части Номенклатура.
// Она используется для того, чтобы достать из базы данных только значение
// GTIN, а не все реквизиты номенклатуры (синтаксис через точку).
// 
// Параметры:
//  АктПриемкиТоваров - ДокументСсылка.АктПриемкиТоваров
//  НомерНоменклатуры - Число - Номер строки табличной части Номенклатура
// 
// Возвращаемое значение:
//  Строка 
&НаСервереБезКонтекста
Функция GTINИзНомераНоменклатуры(Знач АктПриемкиТоваров, Знач НомерНоменклатуры)

    Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
                          |    АктПриемкиТоваровНоменклатура.Номенклатура.Код КАК GTIN
                          |ИЗ
                          |    Документ.АктПриемкиТоваров.Номенклатура КАК АктПриемкиТоваровНоменклатура
                          |ГДЕ
                          |    АктПриемкиТоваровНоменклатура.Ссылка = &Документ
                          |    И АктПриемкиТоваровНоменклатура.НомерСтроки = &НомерСтроки");

    Запрос.УстановитьПараметр("Документ", АктПриемкиТоваров);
    Запрос.УстановитьПараметр("НомерСтроки", НомерНоменклатуры);

    РезультатЗапроса = Запрос.Выполнить();
    Выборка = РезультатЗапроса.Выбрать();

    Если Не Выборка.Следующий() Тогда

        Возврат Неопределено;

    КонецЕсли;
    
    //@skip-check property-return-type
    GTIN = Выборка.GTIN; // Строка

    Возврат GTIN;

КонецФункции

// Процедура обновляет количество принятого товара у номенклатуры.
// 
// Параметры:
//  АктПриемкиТоваров - ДокументСсылка.АктПриемкиТоваров
//  НомерНоменклатуры - Число
//  НовоеКоличествоПринятогоТовара - Число
&НаСервереБезКонтекста
Процедура ОбновитьКоличествоПринятогоТовара(Знач АктПриемкиТоваров,
                                            Знач НомерНоменклатуры,
                                            Знач НовоеКоличествоПринятогоТовара)

    АктПриемкиТоваров.ПолучитьОбъект().ОбновитьКоличествоПринятогоТовара(НомерНоменклатуры,
                                                                         НовоеКоличествоПринятогоТовара);

КонецПроцедуры

#КонецОбласти

#Область ОповещенияПользователя

// Функция возвращает ключ уникальности оповещений пользователя.
// 
// Возвращаемое значение:
//  Строка
&НаКлиенте
Функция КлючУникальностиОповещенийПользователя()

    Возврат ИмяФормы;

КонецФункции

// Процедура воспроизводит звуковой сигнал и показывает оповещение.
// 
// Параметры:
//  Заголовок - Строка
//  Пояснение - Строка
&НаКлиенте
Процедура ПоказатьОповещениеОбУспешномСканировании(Знач Заголовок, Знач Пояснение)

    Тип = ПредопределенноеЗначение("Перечисление.ТипШтрихкода.DataMatrix");

#Если МобильноеПриложениеКлиент Или МобильныйКлиент Тогда

    СредстваМультимедиаКлиент.ВоспроизвестиЗвуковоеОповещениеОбУспешномСканированииШтрихкода(Тип);

#КонецЕсли

    ОповещенияПользователяКлиент.ПоказатьОповещение(Заголовок, Пояснение, КлючУникальностиОповещенийПользователя());

КонецПроцедуры

// Процедура воспроизводит звуковой сигнал, соответствующий коду возврата и 
// показывает оповещение.
// 
// Параметры:
//  КодВозврата - Число - См. КодыВозвратаСерверГлобальный
//  Заголовок - Строка
//  Пояснение - Строка
&НаКлиенте
Процедура ПоказатьОповещениеПоКодуВозврата(Знач КодВозврата, Знач Заголовок, Знач Пояснение)

#Если МобильноеПриложениеКлиент Или МобильныйКлиент Тогда

    СредстваМультимедиаКлиент.ВоспроизвестиЗвуковоеОповещениеДляКодаВозврата(КодВозврата);

#КонецЕсли

    ОповещенияПользователяКлиент.ПоказатьОповещение(Заголовок, Пояснение, КлючУникальностиОповещенийПользователя());

КонецПроцедуры

// Процедура воспроизводит звуковой сигнал, соответствующий коду возврата и 
// показывает важное оповещение об ошибке.
// 
// Параметры:
//  КодВозврата - Число - См. КодыВозвратаСерверГлобальный
//  Заголовок - Строка
//  Пояснение - Строка
&НаКлиенте
Процедура ПоказатьВажноеОповещениеОбОшибкеДляКодаВозврата(Знач КодВозврата, Знач Заголовок, Знач Пояснение)

#Если МобильноеПриложениеКлиент Или МобильныйКлиент Тогда

    СредстваМультимедиаКлиент.ВоспроизвестиЗвуковоеОповещениеДляКодаВозврата(КодВозврата);

#КонецЕсли

    ОповещенияПользователяКлиент.ПоказатьВажноеОповещениеОшибка(Заголовок,
                                                                Пояснение,
                                                                КлючУникальностиОповещенийПользователя());

КонецПроцедуры

#КонецОбласти

#Область Форма

//@skip-check module-unused-method
&НаКлиенте
Процедура ПоказатьПроверкаЗавершена()

    Элементы.СписокНоменклатур.Видимость = Ложь;
    Элементы.ВводШтрихкода.Видимость = Ложь;
    Элементы.ОсталосьПроверитьВсего.Видимость = Ложь;

    Элементы.ПодсказкаПроверкаЗавершена.Видимость = Истина;

    Элементы.Сотрудник.Заголовок = "Проверил";

КонецПроцедуры

// Процедура обновляет список номенклатур и показатель остатка.
&НаКлиенте
Процедура ОбновитьФорму()

    ОбновитьПоказательОстаткаДляПроверки();

    Элементы.СписокНоменклатур.Обновить();

КонецПроцедуры

// Процедура обновляет на форме показатель количества, которое осталось проверить.
&НаКлиенте
Процедура ОбновитьПоказательОстаткаДляПроверки()

    ФормаОсталосьПроверитьВсего = ОсталосьПроверить(Объект.Ссылка);

КонецПроцедуры

// См. МаркировкаИПрослеживаемость.ОсталосьПроверить
&НаСервереБезКонтекста
Функция ОсталосьПроверить(Знач АктПриемкиТоваров)

    Возврат МаркировкаИПрослеживаемость.ОсталосьПроверить(АктПриемкиТоваров);

КонецФункции

#КонецОбласти

#КонецОбласти