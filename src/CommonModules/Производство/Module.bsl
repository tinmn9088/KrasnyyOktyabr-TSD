// @strict-types
#Область ПрограммныйИнтерфейс

// Функция определяет количество штрихкодов, обработанных данным сотрудником.
// 
// Параметры:
//  Сотрудник - СправочникСсылка.СотрудникиНаПроизводстве
//  Процесс - ПеречислениеСсылка.ПроцессНаПроизводстве
// 
// Возвращаемое значение:
//  Число
Функция КоличествоШтрихкодовСотрудника(Знач Сотрудник, Знач Процесс) Экспорт

    Запрос = Новый Запрос("ВЫБРАТЬ
                          |    КОЛИЧЕСТВО(*) КАК Количество
                          |ИЗ
                          |    РегистрСведений.ШтрихкодыНаПроизводстве КАК ШтрихкодыНаПроизводстве
                          |ГДЕ
                          |    НЕ ШтрихкодыНаПроизводстве.Обработан
                          |    И ШтрихкодыНаПроизводстве.Сотрудник = &Сотрудник
                          |    И ШтрихкодыНаПроизводстве.Процесс = &Процесс");

    Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
    Запрос.УстановитьПараметр("Процесс", Процесс);

    РезультатЗапроса = Запрос.Выполнить();
    Выборка = РезультатЗапроса.Выбрать();

    Если Не Выборка.Следующий() Тогда

        Возврат 0;

    КонецЕсли;
    
    //@skip-check property-return-type
    КоличествоШтрихкодов = Выборка.Количество; // Число

    Возврат КоличествоШтрихкодов;

КонецФункции

// Функция определяет количество операций, выполненных данным сотрудником.
// 
// Параметры:
//  Сотрудник - СправочникСсылка.СотрудникиНаПроизводстве
// 
// Возвращаемое значение:
//  Число
Функция КоличествоЗарегистрированныхОпераций(Знач Сотрудник) Экспорт

    Запрос = Новый Запрос("ВЫБРАТЬ
                          |    КОЛИЧЕСТВО(*) КАК Количество
                          |ИЗ
                          |    РегистрСведений.ШтрихкодыОперацийНаПроизводстве КАК ШтрихкодыНаПроизводстве
                          |ГДЕ
                          |    НЕ ШтрихкодыНаПроизводстве.Обработан
                          |    И ШтрихкодыНаПроизводстве.Сотрудник = &Сотрудник");

    Запрос.УстановитьПараметр("Сотрудник", Сотрудник);

    РезультатЗапроса = Запрос.Выполнить();
    Выборка = РезультатЗапроса.Выбрать();

    Если Не Выборка.Следующий() Тогда

        Возврат 0;

    КонецЕсли;
    
    //@skip-check property-return-type
    КоличествоШтрихкодов = Выборка.Количество; // Число

    Возврат КоличествоШтрихкодов;

КонецФункции

// Функция определяет был ли уже отсканирован штрихкод, и если нет,
// то сохраняет его.
// 
// Параметры:
//  Сотрудник - СправочникСсылка.СотрудникиНаПроизводстве
//  Процесс - ПеречислениеСсылка.ПроцессНаПроизводстве
//  Штрихкод - Строка
// 
// Возвращаемое значение:
//  См. НовоеОписаниеОбработкиШтрихкода
Функция ОбработатьШтрихкод(Знач Сотрудник, Знач Процесс, Знач Штрихкод) Экспорт
    
    // 1. Удаление недопустимых символов из штрихкода, чтобы в базу данных не попала строка, которую нельзя сериализовать
    Штрихкод = XMLКлиентСервер.ЗаменитьНедопустимыеСимволы(Штрихкод);

    НачатьТранзакцию();

    Попытка

        ОписаниеОбработкиШтрихкода = НовоеОписаниеОбработкиШтрихкода();
        
        // 2. Проверка, что штрихкод еще не был отсканирован
        Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
                              |    ШтрихкодыНаПроизводстве.Дата,
                              |    ШтрихкодыНаПроизводстве.Сотрудник
                              |ИЗ
                              |    РегистрСведений.ШтрихкодыНаПроизводстве КАК ШтрихкодыНаПроизводстве
                              |ГДЕ
                              |    ШтрихкодыНаПроизводстве.Процесс = &Процесс
                              |    И ШтрихкодыНаПроизводстве.Штрихкод = &Штрихкод");

        Запрос.УстановитьПараметр("Процесс", Процесс);
        Запрос.УстановитьПараметр("Штрихкод", Лев(Штрихкод,
                                                  Метаданные.РегистрыСведений.ШтрихкодыНаПроизводстве.Измерения.Штрихкод.Тип.КвалификаторыСтроки.Длина));

        РезультатЗапроса = Запрос.Выполнить();
        Выборка = РезультатЗапроса.Выбрать();

        Если Выборка.Следующий() Тогда

            ОтменитьТранзакцию();

            //@skip-check property-return-type
            ДатаПредыдущегоСканирования = Выборка.Дата; // Дата
            
            //@skip-check property-return-type
            СотрудникПредыдущегоСканирования = Выборка.Сотрудник; // СправочникСсылка.СотрудникиНаПроизводстве

            ОписаниеОбработкиШтрихкода.ДатаПредыдущегоСканирования = ДатаПредыдущегоСканирования;
            ОписаниеОбработкиШтрихкода.СотрудникПредыдущегоСканирования = СотрудникПредыдущегоСканирования;
            ОписаниеОбработкиШтрихкода.КодВозврата = ?(СотрудникПредыдущегоСканирования = Сотрудник,
                                                       КодВозвратаШтрихкодУжеОтсканирован(),
                                                       КодВозвратаШтрихкодУжеОтсканированДругим());

            Возврат ОписаниеОбработкиШтрихкода;

        КонецЕсли;
  
        // 3. Добавление штрихкода в документ и регистр сведений
        РегистрыСведений.ШтрихкодыНаПроизводстве.ДобавитьШтрихкод(Процесс, Сотрудник, Штрихкод, ТекущаяДатаСеанса());

        ОписаниеОбработкиШтрихкода.КодВозврата = КодВозвратаУспех();

        ЗафиксироватьТранзакцию();

        Возврат ОписаниеОбработкиШтрихкода;

    Исключение

        ОтменитьТранзакцию();
        ВызватьИсключение;

    КонецПопытки;

КонецФункции

// Функция определяет был ли уже отсканирован штрихкод, и если нет,
// то сохраняет его.
// 
// Параметры:
//  Сотрудник - СправочникСсылка.СотрудникиНаПроизводстве
//  КодОперации - Строка
//  Штрихкод - Строка
// 
// Возвращаемое значение:
//  См. НовоеОписаниеОбработкиШтрихкода
Функция ОбработатьШтрихкодОперации(Знач Сотрудник, Знач КодОперации, Знач Штрихкод) Экспорт
    
    // 1. Удаление недопустимых символов из штрихкода, чтобы в базу данных не попала строка, которую нельзя сериализовать
    Штрихкод = XMLКлиентСервер.ЗаменитьНедопустимыеСимволы(Штрихкод);

    НачатьТранзакцию();

    Попытка

        ОписаниеОбработкиШтрихкода = НовоеОписаниеОбработкиШтрихкода();
        
        // 2. Проверка, что штрихкод еще не был отсканирован
        Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
                              |    ШтрихкодыНаПроизводстве.Дата,
                              |    ШтрихкодыНаПроизводстве.Сотрудник
                              |ИЗ
                              |    РегистрСведений.ШтрихкодыОперацийНаПроизводстве КАК ШтрихкодыНаПроизводстве
                              |ГДЕ
                              |    ШтрихкодыНаПроизводстве.КодОперации = &КодОперации
                              |    И ШтрихкодыНаПроизводстве.Штрихкод = &Штрихкод");

        Запрос.УстановитьПараметр("КодОперации", КодОперации);
        Запрос.УстановитьПараметр("Штрихкод", Лев(Штрихкод,
                                                  Метаданные.РегистрыСведений.ШтрихкодыНаПроизводстве.Измерения.Штрихкод.Тип.КвалификаторыСтроки.Длина));

        РезультатЗапроса = Запрос.Выполнить();
        Выборка = РезультатЗапроса.Выбрать();

        Если Выборка.Следующий() Тогда

            ОтменитьТранзакцию();

            //@skip-check property-return-type
            ДатаПредыдущегоСканирования = Выборка.Дата; // Дата
            
            //@skip-check property-return-type
            СотрудникПредыдущегоСканирования = Выборка.Сотрудник; // СправочникСсылка.СотрудникиНаПроизводстве

            ОписаниеОбработкиШтрихкода.ДатаПредыдущегоСканирования = ДатаПредыдущегоСканирования;
            ОписаниеОбработкиШтрихкода.СотрудникПредыдущегоСканирования = СотрудникПредыдущегоСканирования;
            ОписаниеОбработкиШтрихкода.КодВозврата = ?(СотрудникПредыдущегоСканирования = Сотрудник,
                                                       КодВозвратаШтрихкодУжеОтсканирован(),
                                                       КодВозвратаШтрихкодУжеОтсканированДругим());

            Возврат ОписаниеОбработкиШтрихкода;

        КонецЕсли;
  
        // 3. Добавление штрихкода в документ и регистр сведений
        РегистрыСведений.ШтрихкодыОперацийНаПроизводстве.ДобавитьШтрихкод(Сотрудник,
                                                                          КодОперации,
                                                                          Штрихкод,
                                                                          ТекущаяДатаСеанса());

        ОписаниеОбработкиШтрихкода.КодВозврата = КодВозвратаУспех();

        ЗафиксироватьТранзакцию();

        Возврат ОписаниеОбработкиШтрихкода;

    Исключение

        ОтменитьТранзакцию();
        ВызватьИсключение;

    КонецПопытки;

КонецФункции

// Найти штрихкод.
// 
// Параметры:
//  Сотрудник - СправочникСсылка.СотрудникиНаПроизводстве
//  Процесс - ПеречислениеСсылка.ПроцессНаПроизводстве
//  Штрихкод - Строка
// 
// Возвращаемое значение:
// Булево
Функция НайтиШтрихкод(Знач Сотрудник, Знач Процесс, Знач Штрихкод) Экспорт
    Запрос = Новый Запрос("ВЫБРАТЬ
                          |	   ШтрихкодыНаПроизводстве.Штрихкод
                          |ИЗ
                          |	   РегистрСведений.ШтрихкодыНаПроизводстве КАК ШтрихкодыНаПроизводстве
                          |ГДЕ
                          |	   ШтрихкодыНаПроизводстве.Сотрудник = &Сотрудник
                          |	   И ШтрихкодыНаПроизводстве.Процесс = &Процесс
                          |    И ШтрихкодыНаПроизводстве.Штрихкод = &Штрихкод");

    Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
    Запрос.УстановитьПараметр("Процесс", Процесс);
    Запрос.УстановитьПараметр("Штрихкод", Штрихкод);

    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    Возврат Выборка.Следующий();

КонецФункции

// Найти штрихкод.
// 
// Параметры:
//  Сотрудник - СправочникСсылка.СотрудникиНаПроизводстве
//  КодОперации - Строка
//  Штрихкод - Строка
// 
// Возвращаемое значение:
// Булево
Функция НайтиШтрихкодОперации(Знач Сотрудник, Знач КодОперации, Знач Штрихкод) Экспорт
    Запрос = Новый Запрос("ВЫБРАТЬ
                          |	   ШтрихкодыОперацийНаПроизводстве.Штрихкод
                          |ИЗ
                          |	   РегистрСведений.ШтрихкодыОперацийНаПроизводстве КАК ШтрихкодыОперацийНаПроизводстве
                          |ГДЕ
                          |	   ШтрихкодыОперацийНаПроизводстве.Сотрудник = &Сотрудник
                          |	   И ШтрихкодыОперацийНаПроизводстве.КодОперации = &КодОперации
                          |	   И ШтрихкодыОперацийНаПроизводстве.Штрихкод = &Штрихкод");

    Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
    Запрос.УстановитьПараметр("КодОперации", КодОперации);
    Запрос.УстановитьПараметр("Штрихкод", Штрихкод);

    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    Возврат Выборка.Следующий();

КонецФункции

// См. РегистрСведенийМенеджер.ШтрихкодыНаПроизводстве.УдалитьШтрихкод
Процедура УдалитьШтрихкод(Знач Сотрудник, Знач Процесс, Знач Штрихкод) Экспорт

    РегистрыСведений.ШтрихкодыНаПроизводстве.УдалитьШтрихкод(Процесс, Сотрудник, Штрихкод);

КонецПроцедуры

// См. РегистрСведенийМенеджер.ШтрихкодыОперацийНаПроизводстве.УдалитьШтрихкод
Процедура УдалитьШтрихкодОперации(Знач Сотрудник, Знач КодОперации, Знач Штрихкод) Экспорт

    РегистрыСведений.ШтрихкодыОперацийНаПроизводстве.УдалитьШтрихкод(Сотрудник, КодОперации, Штрихкод);

КонецПроцедуры

// См. РегистрСведенийМенеджер.ШтрихкодыНаПроизводстве.УдалитьШтрихкодыСотрудника
Процедура УдалитьШтрихкодыСотрудника(Знач Сотрудник, Знач Процесс) Экспорт

    РегистрыСведений.ШтрихкодыНаПроизводстве.УдалитьШтрихкодыСотрудника(Процесс, Сотрудник);

КонецПроцедуры

// См. РегистрСведенийМенеджер.ШтрихкодыОперацийНаПроизводстве.УдалитьШтрихкодыСотрудника
Процедура УдалитьШтрихкодыОперацииСотрудника(Знач Сотрудник) Экспорт

    РегистрыСведений.ШтрихкодыОперацийНаПроизводстве.УдалитьШтрихкодыСотрудника(Сотрудник);
    ;

КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Функция создает описание обработки штрихкода.
// 
// Возвращаемое значение:
//  Структура - Описание обработки штрихкода:
// * КодВозврата - Число - Код, указывающий на результат обработки штрихкода
// * ДатаПредыдущегоСканирования - Неопределено, Дата - Дата предыдущего сканирования, если штрихкод уже был отсканирован
// * СотрудникПредыдущегоСканирования - Неопределено, СправочникСсылка.СотрудникиНаПроизводстве - Сотудник, уже отсканировавший штрихкод
Функция НовоеОписаниеОбработкиШтрихкода() Экспорт

    ОписаниеОбработкиШтрихкода = Новый Структура;

    ОписаниеОбработкиШтрихкода.Вставить("КодВозврата", КодВозвратаУспех());
    ОписаниеОбработкиШтрихкода.Вставить("ДатаПредыдущегоСканирования", Неопределено);
    ОписаниеОбработкиШтрихкода.Вставить("СотрудникПредыдущегоСканирования", Неопределено);

    Возврат ОписаниеОбработкиШтрихкода;

КонецФункции

#КонецОбласти