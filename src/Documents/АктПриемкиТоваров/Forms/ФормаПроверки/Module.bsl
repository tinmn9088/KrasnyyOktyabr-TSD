// @strict-types
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

    ФормаДокумент = Параметры.Документ;
    ФормаСотрудник = Параметры.Сотрудник;

    ФормаСписокНоменклатур.Параметры.УстановитьЗначениеПараметра("Документ", ФормаДокумент);

    ЗагрузитьРеквизитыФормы(ФормаДокумент, ФормаПроверкаЗавершена, ФормаИспользуетсяМаркировкаТоваров);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

    Если ФормаПроверкаЗавершена Тогда

        ПоказатьПроверкаЗавершена();

    КонецЕсли;

    ОбновитьПоказательОстаткаДляПроверки();

#Если МобильныйКлиент Или МобильноеПриложениеКлиент Тогда

	// Отключение заголовков в группе описания
    Элементы.ДополнительноОрганизация.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
    Элементы.ДополнительноКонтрагент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
    Элементы.ДополнительноСклад.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
    Элементы.Дополнительно.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	
    // Отключение видимости шапки динамического списка, чтобы сэкономить место на экране 
    Элементы.СписокНоменклатур.Шапка = Ложь;

#КонецЕсли

    Если ФормаИспользуетсяМаркировкаТоваров Тогда

        Элементы.ОсновноеИспользуетсяМаркировкаТоваров.Видимость = Истина;

    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

    Если ВводДоступен() И ИмяСобытия = ОповещенияФормыКлиент.ИмяСобытияСканированияШтрихкода() Тогда

        Штрихкод = Строка(Параметр);

        ОбработатьШтрихкод(Штрихкод);

    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

    Если ТипЗнч(ИсточникВыбора) = Тип("ФормаКлиентскогоПриложения") Тогда

        Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ФормаВводаКоличестваТовара" Тогда

            Результат = ВыбранноеЗначение; // См. ОповещенияФормыКлиент.ОписаниеРезультатаИзмененияКоличестваТовара
            НомерТовара = Результат.ИдентификаторТовара;
            ПредыдущееКоличество = Результат.ИсходноеЗначение;
            НовоеКоличество = Результат.НовоеЗначение;

            Если НовоеКоличество <> ПредыдущееКоличество Тогда

                ОбновитьКоличествоПринятогоТовара(ФормаДокумент, НомерТовара, НовоеКоличество);
                ОбновитьФорму();

            КонецЕсли;

        КонецЕсли;

    КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокНоменклатур

// Процедура обрабатывает выбор строки в списке номенклатур.
// 
// Параметры:
//  Элемент - ТаблицаФормы
//  ВыбраннаяСтрока - Число - Номер строки табличной части "Номенклатура"
//  Поле - ПолеФормы
//  СтандартнаяОбработка - Булево
&НаКлиенте
Асинх Процедура СписокНоменклатурВыборАсинх(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

    Если Не ФормаИспользуетсяМаркировкаТоваров Тогда

        ПредыдущееКоличествоПринятогоТовара = КоличествоПринятогоТовара(ФормаДокумент, ВыбраннаяСтрока);

        Если ПредыдущееКоличествоПринятогоТовара = Неопределено Тогда
        
            // Из-за недоступности основного сервера должно появиться предложение перейти в автономный режим
            Возврат;

        КонецЕсли;
        
        // Открытие формы ввода количества
        ПараметрыФормы = Новый Структура;

        ПараметрыФормы.Вставить("ИдентификаторТовара", ВыбраннаяСтрока);
        ПараметрыФормы.Вставить("ИсходноеЗначение", ПредыдущееКоличествоПринятогоТовара);

        ОткрытьФорму("ОбщаяФорма.ФормаВводаКоличестваТовара", ПараметрыФормы, ЭтотОбъект, ЭтотОбъект);

    КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Асинх Процедура ОбработатьШтрихкодСФормыАсинх(Команда)

    Значение = Ждать ВвестиСтрокуАсинх(ФормаШтрихкод, "Введите штрихкод");

    Если Не ЗначениеЗаполнено(Значение) Тогда

        Возврат;

    КонецЕсли;

    ФормаШтрихкод = Значение;

    ОбработатьШтрихкод(ФормаШтрихкод);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроверкаАктаПриемкиТоваров

// Функция проверяет значение реквизита ПроверкаЗавершена.
// 
// Параметры:
//  АктПриемкиТоваров - ДокументСсылка.АктПриемкиТоваров
//  ПроверкаЗавершена - Булево - Выходной
//  ИспользуетсяМаркировкаТоваров - Булево - Выходной
&НаСервереБезКонтекста
Процедура ЗагрузитьРеквизитыФормы(Знач АктПриемкиТоваров, ПроверкаЗавершена, ИспользуетсяМаркировкаТоваров)

    Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
                          |    АктПриемкиТоваров.ПроверкаЗавершена,
                          |    АктПриемкиТоваров.ИспользуетсяМаркировкаТоваров
                          |ИЗ
                          |    Документ.АктПриемкиТоваров КАК АктПриемкиТоваров
                          |ГДЕ
                          |    АктПриемкиТоваров.Ссылка = &Документ");

    Запрос.УстановитьПараметр("Документ", АктПриемкиТоваров);
    РезультатЗапроса = Запрос.Выполнить();
    Выборка = РезультатЗапроса.Выбрать();

    Если Не Выборка.Следующий() Тогда

        ВызватьИсключение ("Не удалось узнать завершена ли проверка");

    КонецЕсли;

    //@skip-check property-return-type
    ПроверкаЗавершена = Выборка.ПроверкаЗавершена; // Булево
    
    //@skip-check property-return-type
    ИспользуетсяМаркировкаТоваров = Выборка.ИспользуетсяМаркировкаТоваров; // Булево

КонецПроцедуры

// Процедура обрабатывает штрихкод.
// 
// Параметры:
//  Штрихкод - Строка
&НаКлиенте
Процедура ОбработатьШтрихкод(Штрихкод)

    Перем ОписаниеОбработкиШтрихкода; // См. ПриходыЭлектронныеНакладные.ОбработатьКодМаркировки

    // 1. Оповещение пользователю о начале обработки штрихкода
    ПоказатьОповещение("Обработка штрихкода", Штрихкод);
                                                    
    // 2.1. Обработка штрихкода
    Если ФормаИспользуетсяМаркировкаТоваров Тогда

        ОписаниеОбработкиШтрихкода = ОбработатьКодМаркировки(ФормаДокумент, Штрихкод);

    Иначе

        GTIN = GTINИзШтрихкода(Штрихкод);

        Если Не ЗначениеЗаполнено(GTIN) Тогда

            ПоказатьВажноеОповещениеОбОшибке("Штрихкод без GTIN", Штрихкод);
            Возврат;

        КонецЕсли;

        ОписаниеОбработкиШтрихкода = ОбработатьGTIN(ФормаДокумент, GTIN);

    КонецЕсли;
    
    // 2.2. Проверка, что вызов серверной функции прошел без потери соединения с основным сервером
    Если ОписаниеОбработкиШтрихкода = Неопределено Тогда
        
        // Из-за недоступности основного сервера должно появиться предложение перейти в автономный режим
        Возврат;

    КонецЕсли;
                                              
    // 3.1. Оповещение об успешной обработке
    Если ЭтоКодВозвратаТоварНайден(ОписаниеОбработкиШтрихкода.КодВозврата) Тогда

        ЗаголовокОповещения = СтрШаблон("Товар %1", ОписаниеОбработкиШтрихкода.НомерНоменклатуры);
        ПояснениеОповещения = СтрШаблон("Количество %1 → %2",
                                        ОписаниеОбработкиШтрихкода.ПредыдущееКоличество,
                                        ОписаниеОбработкиШтрихкода.НовоеКоличество);

        ПоказатьОповещениеПоКодуВозврата(ОписаниеОбработкиШтрихкода.КодВозврата,
                                         ЗаголовокОповещения,
                                         ПояснениеОповещения);

        ОбновитьФорму();
                                         
    // 3.2. Оповещение о том, что код маркировки не найден
    ИначеЕсли ЭтоКодВозвратаНеНайденКодМаркировки(ОписаниеОбработкиШтрихкода.КодВозврата) Тогда

        ПоказатьВажноеОповещениеОбОшибкеДляКодаВозврата(ОписаниеОбработкиШтрихкода.КодВозврата,
                                                        "Код маркировки не найден",
                                                        Штрихкод);
                                                        
    // 3.3. Оповещение о том, что код маркировки обрабатывается повторно
    ИначеЕсли ЭтоКодВозвратаКодМаркировкиУжеПроверен(ОписаниеОбработкиШтрихкода.КодВозврата) Тогда

        ПоказатьВажноеОповещениеОбОшибкеДляКодаВозврата(ОписаниеОбработкиШтрихкода.КодВозврата,
                                                        "Код уже был обработан",
                                                        Штрихкод);
                                                        
    // 3.4. Оповещение о том, что не найдена номенклатура по GTIN, извлеченному из штрихкода
    ИначеЕсли ЭтоКодВозвратаНеНайденаНоменклатура(ОписаниеОбработкиШтрихкода.КодВозврата) Тогда

        ПоказатьВажноеОповещениеОбОшибкеДляКодаВозврата(ОписаниеОбработкиШтрихкода.КодВозврата,
                                                        "Номенклатура не найдена",
                                                        GTINИзШтрихкода(Штрихкод));

    КонецЕсли;

КонецПроцедуры

// См. ПриходыЭлектронныеНакладные.ОбработатьКодМаркировки
&НаСервереБезКонтекста
Функция ОбработатьКодМаркировки(Знач АктПриемкиТоваров, Знач КодМаркировки)

    Возврат ПриходыЭлектронныеНакладные.ОбработатьКодМаркировки(АктПриемкиТоваров, КодМаркировки);

КонецФункции

// См. ПриходыЭлектронныеНакладные.ОбработатьGTIN
//@skip-check method-param-value-type
&НаСервереБезКонтекста
Функция ОбработатьGTIN(Знач АктПриемкиТоваров, Знач GTIN)

    //@skip-check invocation-parameter-type-intersect
    Возврат ПриходыЭлектронныеНакладные.ОбработатьGTIN(АктПриемкиТоваров, GTIN);

КонецФункции

// См. ШтрихкодыКлиентСервер.GTINИзШтрихкода
&НаКлиенте
Функция GTINИзШтрихкода(Штрихкод)

    Возврат ШтрихкодыКлиентСервер.GTINИзШтрихкода(Штрихкод);

КонецФункции 

// Функция извлекает количество принятого товара у номенклатуры.
// 
// Параметры:
//  АктПриемкиТоваров - ДокументСсылка.АктПриемкиТоваров - 
//  НомерНоменклатуры - Число - 
// 
// Возвращаемое значение:
//  Число
&НаСервереБезКонтекста
Функция КоличествоПринятогоТовара(Знач АктПриемкиТоваров, Знач НомерНоменклатуры)
    Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
                          |    АктПриемкиТоваровНоменклатура.КоличествоПринятогоТовара
                          |ИЗ
                          |    Документ.АктПриемкиТоваров.Номенклатура КАК АктПриемкиТоваровНоменклатура
                          |ГДЕ
                          |    АктПриемкиТоваровНоменклатура.Ссылка = &Документ
                          |    И АктПриемкиТоваровНоменклатура.НомерСтроки = &НомерСтроки");

    Запрос.УстановитьПараметр("Документ", АктПриемкиТоваров);
    Запрос.УстановитьПараметр("НомерСтроки", НомерНоменклатуры);

    РезультатЗапроса = Запрос.Выполнить();
    Выборка = РезультатЗапроса.Выбрать();

    Если Не Выборка.Следующий() Тогда

        ВызватьИсключение ("Не удалось получить количество принятого товара");

    КонецЕсли;

    //@skip-check property-return-type
    КоличествоПринятогоТовара = Выборка.КоличествоПринятогоТовара; // Число

    Возврат КоличествоПринятогоТовара;

КонецФункции

// Процедура обновляет количество принятого товара у номенклатуры.
// 
// Параметры:
//  АктПриемкиТоваров - ДокументСсылка.АктПриемкиТоваров
//  НомерНоменклатуры - Число
//  НовоеКоличествоПринятогоТовара - Число
&НаСервереБезКонтекста
Процедура ОбновитьКоличествоПринятогоТовара(Знач АктПриемкиТоваров,
                                            Знач НомерНоменклатуры,
                                            Знач НовоеКоличествоПринятогоТовара)

    АктПриемкиТоваров.ПолучитьОбъект().ОбновитьКоличествоПринятогоТовара(НомерНоменклатуры,
                                                                         НовоеКоличествоПринятогоТовара);

КонецПроцедуры

#КонецОбласти

#Область ОповещенияПользователя

// Функция возвращает ключ уникальности оповещений пользователя.
// 
// Возвращаемое значение:
//  Строка
&НаКлиенте
Функция КлючУникальностиОповещенийПользователя()

    Возврат ИмяФормы;

КонецФункции

// См. ОповещенияПользователяКлиент.ПоказатьОповещение
// 
// Параметры:
//  Заголовок - Строка
//  Пояснение - Строка
&НаКлиенте
Процедура ПоказатьОповещение(Знач Заголовок, Знач Пояснение)

    ОповещенияПользователяКлиент.ПоказатьОповещение(Заголовок, Пояснение, КлючУникальностиОповещенийПользователя());

КонецПроцедуры

// Процедура воспроизводит звуковой сигнал, соответствующий коду возврата и 
// показывает оповещение.
// 
// Параметры:
//  КодВозврата - Число - См. КодыВозвратаСерверГлобальный
//  Заголовок - Строка
//  Пояснение - Строка
&НаКлиенте
Процедура ПоказатьОповещениеПоКодуВозврата(Знач КодВозврата, Знач Заголовок, Знач Пояснение)

#Если МобильноеПриложениеКлиент Или МобильныйКлиент Тогда

    СредстваМультимедиаКлиент.ВоспроизвестиЗвуковоеОповещениеДляКодаВозврата(КодВозврата);

#КонецЕсли

    ОповещенияПользователяКлиент.ПоказатьОповещение(Заголовок, Пояснение, КлючУникальностиОповещенийПользователя());

КонецПроцедуры

// Процедура воспроизводит звуковой сигнал об ошибке и показывает важное оповещение об ошибке.
// 
// Параметры:
//  Заголовок - Строка
//  Пояснение - Строка
&НаКлиенте
Процедура ПоказатьВажноеОповещениеОбОшибке(Знач Заголовок, Знач Пояснение)

#Если МобильноеПриложениеКлиент Или МобильныйКлиент Тогда

    СредстваМультимедиаКлиент.ВоспроизвестиЗвуковоеОповещениеОшибки();

#КонецЕсли

    ОповещенияПользователяКлиент.ПоказатьВажноеОповещениеОшибка(Заголовок,
                                                                Пояснение,
                                                                КлючУникальностиОповещенийПользователя());

КонецПроцедуры

// Процедура воспроизводит звуковой сигнал, соответствующий коду возврата и 
// показывает важное оповещение об ошибке.
// 
// Параметры:
//  КодВозврата - Число - См. КодыВозвратаСерверГлобальный
//  Заголовок - Строка
//  Пояснение - Строка
&НаКлиенте
Процедура ПоказатьВажноеОповещениеОбОшибкеДляКодаВозврата(Знач КодВозврата, Знач Заголовок, Знач Пояснение)

#Если МобильноеПриложениеКлиент Или МобильныйКлиент Тогда

    СредстваМультимедиаКлиент.ВоспроизвестиЗвуковоеОповещениеДляКодаВозврата(КодВозврата);

#КонецЕсли

    ОповещенияПользователяКлиент.ПоказатьВажноеОповещениеОшибка(Заголовок,
                                                                Пояснение,
                                                                КлючУникальностиОповещенийПользователя());

КонецПроцедуры

#КонецОбласти

#Область Форма

//@skip-check module-unused-method
&НаКлиенте
Процедура ПоказатьПроверкаЗавершена()

    Элементы.СписокНоменклатур.Видимость = Ложь;
    Элементы.КнопкаВвестиШтрихкод.Видимость = Ложь;
    Элементы.ОсталосьПроверитьВсего.Видимость = Ложь;

    Элементы.ПодсказкаПроверкаЗавершена.Видимость = Истина;

    Элементы.Сотрудник.Заголовок = "Проверил";

КонецПроцедуры

// Процедура обновляет список номенклатур и показатель остатка.
&НаКлиенте
Процедура ОбновитьФорму()

    ОбновитьПоказательОстаткаДляПроверки();

    Элементы.СписокНоменклатур.Обновить();

КонецПроцедуры

// Процедура обновляет на форме показатель количества, которое осталось проверить.
&НаКлиенте
Процедура ОбновитьПоказательОстаткаДляПроверки()

    ФормаОсталосьПроверитьВсего = ОсталосьПроверить(ФормаДокумент);

КонецПроцедуры

// См. ПриходыЭлектронныеНакладные.ОсталосьПроверить
&НаСервереБезКонтекста
Функция ОсталосьПроверить(Знач АктПриемкиТоваров)

    Возврат ПриходыЭлектронныеНакладные.ОсталосьПроверить(АктПриемкиТоваров);

КонецФункции

#КонецОбласти

#КонецОбласти