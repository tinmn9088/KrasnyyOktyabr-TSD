// @strict-types
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

    ФормаДокумент = Параметры.Документ;
    ФормаЗаполнениеЗавершено = ЗаполнениеПеремещенияЗавершено(ФормаДокумент);
    ФормаСотрудник = Параметры.Сотрудник;

    ФормаСписокТоваров.Параметры.УстановитьЗначениеПараметра("Документ", ФормаДокумент);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

    Если ФормаЗаполнениеЗавершено Тогда

        ПоказатьЗаполнениеЗавершено();

    КонецЕсли;

#Если МобильноеПриложениеКлиент Или МобильныйКлиент Тогда

    Элементы.ОтправительНадпись.Видимость = Истина;
    Элементы.ОтправительМагазин.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
    Элементы.ОтправительСклад.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
    Элементы.ОтправительОрганизация.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;

    Элементы.ПолучательНадпись.Видимость = Истина;
    Элементы.ПолучательМагазин.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
    Элементы.ПолучательСклад.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
    Элементы.ПолучательОрганизация.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;

    Элементы.СписокТоваров.Шапка = Ложь;

#КонецЕсли

    // Заполнение заголовка формы
    Заголовок = СтрШаблон("Заполнение: %1", ФормаДокумент);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

    Если ВводДоступен() И ИмяСобытия = ОповещенияФормыКлиент.ИмяСобытияСканированияШтрихкода() Тогда

        Штрихкод = Строка(Параметр);

        ОбработатьШтрихкод(Штрихкод);

    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

    Если ТипЗнч(ИсточникВыбора) = Тип("ФормаКлиентскогоПриложения") Тогда

        Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ФормаВводаКоличестваТовара" Тогда

            Результат = ВыбранноеЗначение; // См. ОповещенияФормыКлиент.ОписаниеРезультатаИзмененияКоличестваТовара
            Штрихкод = Результат.ИдентификаторТовара;
            ВыбраноУдаление = Результат.ВыбраноУдаление;
    
            // Удаление
            Если ВыбраноУдаление Тогда

                УдалитьТовар(ФормаДокумент, Штрихкод);

                ОповещенияПользователяКлиент.ПоказатьОповещение("Товар удален",
                                                                "",
                                                                КлючУникальностиОповещенийПользователя());

                ОбновитьФорму();

            // Обновление количества
            Иначе

                ПредыдущееКоличество = Результат.ИсходноеЗначение;
                НовоеКоличество = Результат.НовоеЗначение;

                Если НовоеКоличество <> ПредыдущееКоличество Тогда

                    ОбновитьКоличествоТовара(ФормаДокумент, Штрихкод, НовоеКоличество);
                    ОбновитьФорму();

                КонецЕсли;

            КонецЕсли;

        КонецЕсли;

    КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокТоваров

// Процедура обрабатывает выбор строки в списке товаров.
// 
// Параметры:
//  Элемент - ТаблицаФормы
//  ВыбраннаяСтрока - Строка - Штрихкод
//  Поле - ПолеФормы
//  СтандартнаяОбработка - Булево
&НаКлиенте
Асинх Процедура СписокТоваровВыборАсинх(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

    ПредыдущееКоличество = КоличествоТовараВПеремещении(ФормаДокумент, ВыбраннаяСтрока);

    // Проверка, что вызов серверной функции прошел без потери соединения с основным сервером
    Если ПредыдущееКоличество = Неопределено Тогда
        
        // Из-за недоступности основного сервера должно появиться предложение перейти в автономный режим
        Возврат;

    КонецЕсли;

    // Открытие формы ввода количества
    ПараметрыФормы = Новый Структура;

    ПараметрыФормы.Вставить("ИдентификаторТовара", ВыбраннаяСтрока);
    ПараметрыФормы.Вставить("ИсходноеЗначение", ПредыдущееКоличество);
    ПараметрыФормы.Вставить("ВозможностьУдаления", Истина);

    ОткрытьФорму("ОбщаяФорма.ФормаВводаКоличестваТовара", ПараметрыФормы, ЭтотОбъект, ЭтотОбъект);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Асинх Процедура ОбработатьШтрихкодСФормыАсинх(Команда)

    Значение = Ждать ВвестиСтрокуАсинх(ФормаШтрихкод, "Введите штрихкод");

    Если Не ЗначениеЗаполнено(Значение) Тогда

        Возврат;

    КонецЕсли;

    ФормаШтрихкод = Значение;

    ОбработатьШтрихкод(ФормаШтрихкод);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеПеремещенияТоваров

// Функция проверяет значение реквизита ЗаполнениеЗавершено.
// 
// Параметры:
//  ПеремещениеТоваров - ДокументСсылка.ПеремещениеТоваров
// 
// Возвращаемое значение:
//  Булево
&НаСервереБезКонтекста
Функция ЗаполнениеПеремещенияЗавершено(Знач ПеремещениеТоваров)

    Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
                          |    ПеремещениеТоваров.ПометкаУдаления КАК ЗаполнениеЗавершено
                          |ИЗ
                          |    Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
                          |ГДЕ
                          |    ПеремещениеТоваров.Ссылка = &Документ");

    Запрос.УстановитьПараметр("Документ", ПеремещениеТоваров);
    РезультатЗапроса = Запрос.Выполнить();
    Выборка = РезультатЗапроса.Выбрать();

    Если Не Выборка.Следующий() Тогда

        ВызватьИсключение ("Не удалось определить завершено ли заполнение");

    КонецЕсли;

    //@skip-check property-return-type
    ЗаполнениеЗавершено = Выборка.ЗаполнениеЗавершено; // Булево

    Возврат ЗаполнениеЗавершено;

КонецФункции

// См. ШтрихкодыКлиентСервер.GTINИзШтрихкода
&НаКлиенте
Функция GTINИзШтрихкода(Штрихкод)

    Возврат ШтрихкодыКлиентСервер.GTINИзШтрихкода(Штрихкод);

КонецФункции 

// Процедура обрабатывает штрихкод.
// 
// Параметры:
//  Штрихкод - Строка
&НаКлиенте
Процедура ОбработатьШтрихкод(Штрихкод)

    Перем ОписаниеОбработкиШтрихкода; // См. Перемещения.ОбработатьШтрихкодТовара

    // 1. Оповещение пользователю о начале обработки штрихкода
    ПоказатьОповещение("Обработка штрихкода", Штрихкод);
                                                    
    // 2.1. Обработка штрихкода
    
    // Попытка извлечь GTIN из штрихкода
    GTIN = GTINИзШтрихкода(Штрихкод);

    ОписаниеОбработкиШтрихкода =  ОбработатьШтрихкодТовара(ФормаДокумент, ?(ЗначениеЗаполнено(GTIN), GTIN, Штрихкод));       
                                   
    // 2.2. Проверка, что вызов серверной функции прошел без потери соединения с основным сервером
    Если ОписаниеОбработкиШтрихкода = Неопределено Тогда
        
        // Из-за недоступности основного сервера должно появиться предложение перейти в автономный режим
        Возврат;

    КонецЕсли;
                                              
    // 3.1. Оповещение об успешной обработке
    Если ЭтоКодВозвратаТоварНайден(ОписаниеОбработкиШтрихкода.КодВозврата) Тогда

        ПояснениеОповещения = СтрШаблон("Количество %1 → %2",
                                        ОписаниеОбработкиШтрихкода.ПредыдущееКоличество,
                                        ОписаниеОбработкиШтрихкода.НовоеКоличество);

        ПоказатьОповещениеПоКодуВозврата(ОписаниеОбработкиШтрихкода.КодВозврата, "Товар", ПояснениеОповещения);

        ОбновитьФорму();
                                                        
    // 3.2. Оповещение о том, что не найдена номенклатура по штрихкоду товара
    ИначеЕсли ЭтоКодВозвратаНеНайденаНоменклатура(ОписаниеОбработкиШтрихкода.КодВозврата) Тогда

        ПоказатьВажноеОповещениеОбОшибкеДляКодаВозврата(ОписаниеОбработкиШтрихкода.КодВозврата,
                                                        "Номенклатура не найдена",
                                                        Штрихкод);

    КонецЕсли;

КонецПроцедуры

// См. Перемещения.ОбработатьШтрихкодТовара
&НаСервереБезКонтекста
Функция ОбработатьШтрихкодТовара(ПеремещениеТоваров, ШтрихкодТовара)

    Возврат Перемещения.ОбработатьШтрихкодТовара(ПеремещениеТоваров, ШтрихкодТовара);

КонецФункции

// См. РегистрыСведений.ШтрихкодыТоваров.
// 
// Параметры:
//  ПеремещениеТоваров - ДокументСсылка.ПеремещениеТоваров
//  Штрихкод - Строка
&НаСервереБезКонтекста
Функция КоличествоТовараВПеремещении(Знач ПеремещениеТоваров, Знач Штрихкод)

    Возврат РегистрыСведений.ШтрихкодыТоваров.КоличествоПоШтрихкоду(ПеремещениеТоваров, Штрихкод);

КонецФункции

// Процедура обновляет количество товара по номеру строки в табличной части.
// 
// Параметры:
//  ПеремещениеТоваров - ДокументСсылка.ПеремещениеТоваров
//  Штрихкод - Строка
//  НовоеКоличествоТовара - Число
&НаСервереБезКонтекста
Процедура ОбновитьКоличествоТовара(Знач ПеремещениеТоваров, Знач Штрихкод, Знач НовоеКоличествоТовара)

    РегистрыСведений.ШтрихкодыТоваров.УстановитьКоличество(ПеремещениеТоваров, Штрихкод, НовоеКоличествоТовара);

КонецПроцедуры

// Процедура удаляет товар из табличной части по номеру.
// 
// Параметры:
//  ПеремещениеТоваров - ДокументСсылка.ПеремещениеТоваров
//  Штрихкод - Строка
&НаСервереБезКонтекста
Процедура УдалитьТовар(Знач ПеремещениеТоваров, Знач Штрихкод)

    РегистрыСведений.ШтрихкодыТоваров.УдалитьШтрихкод(ПеремещениеТоваров, Штрихкод);

КонецПроцедуры

#КонецОбласти

#Область ОповещенияПользователя

// Функция возвращает ключ уникальности оповещений пользователя.
// 
// Возвращаемое значение:
//  Строка
&НаКлиенте
Функция КлючУникальностиОповещенийПользователя()

    Возврат ИмяФормы;

КонецФункции

// См. ОповещенияПользователяКлиент.ПоказатьОповещение
// 
// Параметры:
//  Заголовок - Строка
//  Пояснение - Строка
&НаКлиенте
Процедура ПоказатьОповещение(Знач Заголовок, Знач Пояснение)

    ОповещенияПользователяКлиент.ПоказатьОповещение(Заголовок, Пояснение, КлючУникальностиОповещенийПользователя());

КонецПроцедуры

// Процедура воспроизводит звуковой сигнал, соответствующий коду возврата и 
// показывает оповещение.
// 
// Параметры:
//  КодВозврата - Число - См. КодыВозвратаСерверГлобальный
//  Заголовок - Строка
//  Пояснение - Строка
&НаКлиенте
Процедура ПоказатьОповещениеПоКодуВозврата(Знач КодВозврата, Знач Заголовок, Знач Пояснение)

#Если МобильноеПриложениеКлиент Или МобильныйКлиент Тогда

    СредстваМультимедиаКлиент.ВоспроизвестиЗвуковоеОповещениеДляКодаВозврата(КодВозврата);

#КонецЕсли

    ОповещенияПользователяКлиент.ПоказатьОповещение(Заголовок, Пояснение, КлючУникальностиОповещенийПользователя());

КонецПроцедуры

// Процедура воспроизводит звуковой сигнал, соответствующий коду возврата и 
// показывает важное оповещение об ошибке.
// 
// Параметры:
//  КодВозврата - Число - См. КодыВозвратаСерверГлобальный
//  Заголовок - Строка
//  Пояснение - Строка
&НаКлиенте
Процедура ПоказатьВажноеОповещениеОбОшибкеДляКодаВозврата(Знач КодВозврата, Знач Заголовок, Знач Пояснение)

#Если МобильноеПриложениеКлиент Или МобильныйКлиент Тогда

    СредстваМультимедиаКлиент.ВоспроизвестиЗвуковоеОповещениеДляКодаВозврата(КодВозврата);

#КонецЕсли

    ОповещенияПользователяКлиент.ПоказатьВажноеОповещениеОшибка(Заголовок,
                                                                Пояснение,
                                                                КлючУникальностиОповещенийПользователя());

КонецПроцедуры

#КонецОбласти

#Область Форма

&НаКлиенте
Процедура ПоказатьЗаполнениеЗавершено()

    Элементы.СписокТоваров.Видимость = Ложь;
    Элементы.КнопкаВвестиШтрихкод.Видимость = Ложь;

    Элементы.ПодсказкаЗаполнениеЗавершено.Видимость = Истина;

    Элементы.Сотрудник.Заголовок = "Заполнил";

КонецПроцедуры

// Процедура перечитывает документ из базы данных и обновляет список товаров.
&НаКлиенте
Процедура ОбновитьФорму()

    Элементы.СписокТоваров.Обновить();

КонецПроцедуры

#КонецОбласти

#КонецОбласти