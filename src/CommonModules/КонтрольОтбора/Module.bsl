// @strict-types
#Область ПрограммныйИнтерфейс

// Функция проверяет, что все задания на отбор для всех комплектовщиков выполнены.
// 
// Параметры:
//  Документ - ДокументСсылка.Задание
// 
// Возвращаемое значение:
//  Булево
Функция ЗаданиеВыполнено(Знач Документ) Экспорт

    Запрос = Новый Запрос("ВЫБРАТЬ
                          |    ВсеШтрихкоды.НомерЗаданияНаОтбор,
                          |    СУММА(ВсеШтрихкоды.Количество) КАК КоличествоОбработанных
                          |ПОМЕСТИТЬ КоличестваОбработанных
                          |ИЗ
                          |    РегистрСведений.ШтрихкодыКонтроляОтбора КАК ВсеШтрихкоды
                          |ГДЕ
                          |    ВсеШтрихкоды.Документ = &Документ
                          |СГРУППИРОВАТЬ ПО
                          |    ВсеШтрихкоды.НомерЗаданияНаОтбор
                          |
                          |ИНДЕКСИРОВАТЬ ПО
                          |    НомерЗаданияНаОтбор
                          |;
                          |
                          |////////////////////////////////////////////////////////////////////////////////
                          |ВЫБРАТЬ
                          |    ВсеЗаданияНаОтбор.НомерЗаданияНаОтбор,
                          |    ВсеЗаданияНаОтбор.Количество
                          |ПОМЕСТИТЬ ИскомыеЗаданияНаОтбор
                          |ИЗ
                          |    Документ.Задание.ЗаданияНаОтбор КАК ВсеЗаданияНаОтбор
                          |ГДЕ
                          |    ВсеЗаданияНаОтбор.Ссылка = &Документ
                          |
                          |ИНДЕКСИРОВАТЬ ПО
                          |    НомерЗаданияНаОтбор
                          |;
                          |
                          |////////////////////////////////////////////////////////////////////////////////
                          |ВЫБРАТЬ ПЕРВЫЕ 1
                          |    ИСТИНА КАК ЗаданиеНаОтборНеВыполнено
                          |ИЗ
                          |    ИскомыеЗаданияНаОтбор КАК ИскомыеЗаданияНаОтбор
                          |        ЛЕВОЕ СОЕДИНЕНИЕ КоличестваОбработанных КАК КоличестваОбработанных
                          |        ПО (ИскомыеЗаданияНаОтбор.НомерЗаданияНаОтбор = КоличестваОбработанных.НомерЗаданияНаОтбор)
                          |ГДЕ
                          |    ИскомыеЗаданияНаОтбор.Количество - ЕСТЬNULL(КоличестваОбработанных.КоличествоОбработанных, 0) > 0");

    Запрос.УстановитьПараметр("Документ", Документ);
    РезультатЗапроса = Запрос.Выполнить();
    Выборка = РезультатЗапроса.Выбрать();

    Возврат Не Выборка.Следующий();

КонецФункции

// Функция проверяет, что задание выполнено для комплектовщика.
// 
// Параметры:
//  Документ - ДокументСсылка.Задание
//  Комплектовщик - СправочникСсылка.Комплектовщики
// 
// Возвращаемое значение:
//  Булево
Функция ЗаданиеВыполненоДляКомплектовщика(Знач Документ, Знач Комплектовщик) Экспорт

    Запрос = Новый Запрос("ВЫБРАТЬ
                          |    ВсеШтрихкоды.НомерЗаданияНаОтбор,
                          |    СУММА(ВсеШтрихкоды.Количество) КАК КоличествоОбработанных
                          |ПОМЕСТИТЬ КоличестваОбработанных
                          |ИЗ
                          |    РегистрСведений.ШтрихкодыКонтроляОтбора КАК ВсеШтрихкоды
                          |ГДЕ
                          |    ВсеШтрихкоды.Документ = &Документ
                          |СГРУППИРОВАТЬ ПО
                          |    ВсеШтрихкоды.НомерЗаданияНаОтбор
                          |
                          |ИНДЕКСИРОВАТЬ ПО
                          |    НомерЗаданияНаОтбор
                          |;
                          |
                          |////////////////////////////////////////////////////////////////////////////////
                          |ВЫБРАТЬ
                          |    ВсеЗаданияНаОтбор.НомерЗаданияНаОтбор,
                          |    ВсеЗаданияНаОтбор.Количество
                          |ПОМЕСТИТЬ ЗаданияНаОтборКомплектовщика
                          |ИЗ
                          |    Документ.Задание.ЗаданияНаОтбор КАК ВсеЗаданияНаОтбор
                          |ГДЕ
                          |    ВсеЗаданияНаОтбор.Ссылка = &Документ
                          |    И ВсеЗаданияНаОтбор.Комплектовщик = &Комплектовщик
                          |
                          |ИНДЕКСИРОВАТЬ ПО
                          |    НомерЗаданияНаОтбор
                          |;
                          |
                          |////////////////////////////////////////////////////////////////////////////////
                          |ВЫБРАТЬ ПЕРВЫЕ 1
                          |    ИСТИНА КАК ЗаданиеНаОтборНеВыполнено
                          |ИЗ
                          |    ЗаданияНаОтборКомплектовщика КАК ЗаданияНаОтборКомплектовщика
                          |        ЛЕВОЕ СОЕДИНЕНИЕ КоличестваОбработанных КАК КоличестваОбработанных
                          |        ПО (ЗаданияНаОтборКомплектовщика.НомерЗаданияНаОтбор = КоличестваОбработанных.НомерЗаданияНаОтбор)
                          |ГДЕ
                          |    ЗаданияНаОтборКомплектовщика.Количество - ЕСТЬNULL(КоличестваОбработанных.КоличествоОбработанных, 0) > 0");

    Запрос.УстановитьПараметр("Документ", Документ);
    Запрос.УстановитьПараметр("Комплектовщик", Комплектовщик);
    РезультатЗапроса = Запрос.Выполнить();
    Выборка = РезультатЗапроса.Выбрать();

    Возврат Не Выборка.Следующий();

КонецФункции

// Функция определяет, сколько осталось выполнить по заданию на отбор.
// 
// Параметры:
//  Документ - ДокументСсылка.Задание
//  НомерЗаданияНаОтбор - Число
// 
// Возвращаемое значение:
//  Число
Функция ОсталосьПоЗаданиюНаОтбор(Знач Документ, Знач НомерЗаданияНаОтбор) Экспорт

    Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
                          |    ЕСТЬNULL(СУММА(ВсеШтрихкоды.Количество), 0) КАК КоличествоОбработанных
                          |ПОМЕСТИТЬ КоличестваОбработанных
                          |ИЗ
                          |    РегистрСведений.ШтрихкодыКонтроляОтбора КАК ВсеШтрихкоды
                          |ГДЕ
                          |    ВсеШтрихкоды.Документ = &Документ
                          |    И ВсеШтрихкоды.НомерЗаданияНаОтбор = &НомерЗаданияНаОтбор
                          |;
                          |
                          |////////////////////////////////////////////////////////////////////////////////
                          |ВЫБРАТЬ ПЕРВЫЕ 1
                          |    ВсеЗаданияНаОтбор.Количество
                          |ПОМЕСТИТЬ ИскомыеЗаданияНаОтбор
                          |ИЗ
                          |    Документ.Задание.ЗаданияНаОтбор КАК ВсеЗаданияНаОтбор
                          |ГДЕ
                          |    ВсеЗаданияНаОтбор.Ссылка = &Документ
                          |    И ВсеЗаданияНаОтбор.НомерЗаданияНаОтбор = &НомерЗаданияНаОтбор
                          |;
                          |
                          |////////////////////////////////////////////////////////////////////////////////
                          |ВЫБРАТЬ ПЕРВЫЕ 1
                          |    ИскомыеЗаданияНаОтбор.Количество - КоличестваОбработанных.КоличествоОбработанных КАК ОсталосьПоЗаданиюНаОтбор
                          |ИЗ
                          |    ИскомыеЗаданияНаОтбор КАК ИскомыеЗаданияНаОтбор
                          |        ВНУТРЕННЕЕ СОЕДИНЕНИЕ КоличестваОбработанных КАК КоличестваОбработанных
                          |        ПО ИСТИНА");

    Запрос.УстановитьПараметр("Документ", Документ);
    Запрос.УстановитьПараметр("НомерЗаданияНаОтбор", НомерЗаданияНаОтбор);
    РезультатЗапроса = Запрос.Выполнить();
    Выборка = РезультатЗапроса.Выбрать();

    Пока Не Выборка.Следующий() Цикл

        ВызватьИсключение (СтрШаблон("Не удалось получить остаток по заданию на отбор %1", НомерЗаданияНаОтбор));

    КонецЦикла;
    
    //@skip-check property-return-type
    ОсталосьПоЗаданиюНаОтбор = Выборка.ОсталосьПоЗаданиюНаОтбор; // Число

    Возврат ОсталосьПоЗаданиюНаОтбор;

КонецФункции

// Функция определяет, сколько комплектовщику осталось выполнить.
// 
// Параметры:
//  Документ - ДокументСсылка.Задание
//  Комплектовщик - СправочникСсылка.Комплектовщики
// 
// Возвращаемое значение:
//  См. НовоеОписаниеОстатков
Функция ОсталосьПоЗаданию(Знач Документ, Знач Комплектовщик) Экспорт

    Запрос = Новый Запрос("ВЫБРАТЬ
                          |    ВсеШтрихкоды.НомерЗаданияНаОтбор КАК НомерЗаданияНаОтбор,
                          |    СУММА(ВсеШтрихкоды.Количество) КАК КоличествоОбработанных
                          |ПОМЕСТИТЬ КоличестваОбработанных
                          |ИЗ
                          |    РегистрСведений.ШтрихкодыКонтроляОтбора КАК ВсеШтрихкоды
                          |ГДЕ
                          |    ВсеШтрихкоды.Документ = &Документ
                          |СГРУППИРОВАТЬ ПО
                          |    ВсеШтрихкоды.НомерЗаданияНаОтбор
                          |
                          |ИНДЕКСИРОВАТЬ ПО
                          |    НомерЗаданияНаОтбор
                          |;
                          |
                          |////////////////////////////////////////////////////////////////////////////////
                          |ВЫБРАТЬ
                          |    ВсеЗаданияНаОтбор.НомерЗаданияНаОтбор КАК НомерЗаданияНаОтбор,
                          |    ВсеЗаданияНаОтбор.Количество КАК Количество,
                          |    ВсеЗаданияНаОтбор.Размер КАК Размер
                          |ПОМЕСТИТЬ ЗаданияНаОтборКомплектовщика
                          |ИЗ
                          |    Документ.Задание.ЗаданияНаОтбор КАК ВсеЗаданияНаОтбор
                          |ГДЕ
                          |    ВсеЗаданияНаОтбор.Ссылка = &Документ
                          |    И ВсеЗаданияНаОтбор.Комплектовщик = &Комплектовщик
                          |
                          |ИНДЕКСИРОВАТЬ ПО
                          |    НомерЗаданияНаОтбор
                          |;
                          |
                          |////////////////////////////////////////////////////////////////////////////////
                          |ВЫБРАТЬ
                          |    ЗаданияНаОтборКомплектовщика.Размер КАК Размер,
                          |    ЗаданияНаОтборКомплектовщика.Количество - ЕСТЬNULL(КоличестваОбработанных.КоличествоОбработанных, 0) КАК
                          |        ОсталосьПоЗаданию
                          |ПОМЕСТИТЬ ОстаткиПоЗаданиямНаОтбор
                          |ИЗ
                          |    ЗаданияНаОтборКомплектовщика КАК ЗаданияНаОтборКомплектовщика
                          |        ЛЕВОЕ СОЕДИНЕНИЕ КоличестваОбработанных КАК КоличестваОбработанных
                          |        ПО ЗаданияНаОтборКомплектовщика.НомерЗаданияНаОтбор = КоличестваОбработанных.НомерЗаданияНаОтбор
                          |;
                          |
                          |////////////////////////////////////////////////////////////////////////////////
                          |УНИЧТОЖИТЬ КоличестваОбработанных
                          |;
                          |
                          |////////////////////////////////////////////////////////////////////////////////
                          |УНИЧТОЖИТЬ ЗаданияНаОтборКомплектовщика
                          |;
                          |
                          |////////////////////////////////////////////////////////////////////////////////
                          |ВЫБРАТЬ
                          |    СУММА(ВЫБОР
                          |        КОГДА ОстаткиПоЗаданиямНаОтбор.Размер <> ЗНАЧЕНИЕ(Справочник.моделиРазмер.ПустаяСсылка)
                          |            ТОГДА ОстаткиПоЗаданиямНаОтбор.ОсталосьПоЗаданию
                          |        ИНАЧЕ 0
                          |    КОНЕЦ) КАК Россыпи,
                          |    СУММА(ВЫБОР
                          |        КОГДА ОстаткиПоЗаданиямНаОтбор.Размер = ЗНАЧЕНИЕ(Справочник.моделиРазмер.ПустаяСсылка)
                          |            ТОГДА ОстаткиПоЗаданиямНаОтбор.ОсталосьПоЗаданию
                          |        ИНАЧЕ 0
                          |    КОНЕЦ) КАК ВКоробах
                          |ИЗ
                          |    ОстаткиПоЗаданиямНаОтбор КАК ОстаткиПоЗаданиямНаОтбор");

    Запрос.УстановитьПараметр("Документ", Документ);
    Запрос.УстановитьПараметр("Комплектовщик", Комплектовщик);

    РезультатЗапроса = Запрос.Выполнить();
    Выборка = РезультатЗапроса.Выбрать();

    ОписаниеОстатков = НовоеОписаниеОстатков();

    Если Выборка.Следующий() Тогда
        
        //@skip-check property-return-type
        ВКоробах = Выборка.ВКоробах; // Число
        //@skip-check property-return-type
        Россыпи = Выборка.Россыпи; // Число

        ОписаниеОстатков.ВКоробах = ВКоробах;
        ОписаниеОстатков.Россыпи = Россыпи;

    КонецЕсли;

    Возврат ОписаниеОстатков;

КонецФункции

// Функция извлекает GTIN из штрихкода, определяет процент уценки,
// уменьшает значение реквизита "Количество" в табличной части "ЗаданияНаОтбор",
// записывает штрихкод в документ "ВнПеремОтпуск" и возвращает описание обработки.
// 
// Параметры:
//  Задание - ДокументСсылка.Задание
//  Комплектовщик - СправочникСсылка.Комплектовщики - Комплектовщик, выполняющий задание
//  Штрихкод - Строка
//
// Возвращаемое значение:
//  См. НовоеОписаниеОбработкиШтрихкода
Функция ОбработатьШтрихкодРоссыпи(Знач Задание, Знач Комплектовщик, Знач Штрихкод) Экспорт

    НачатьТранзакцию();

    Попытка

        ОписаниеОбработкиШтрихкода = НовоеОписаниеОбработкиШтрихкода();
        
        // 1. Назначение комплектовщику выполняемого задания
        Комплектовщик.ПолучитьОбъект().НазначитьВыполняемоеЗадание(Задание);
        
        // 2. Извлечение кода маркировки из штрихкода
        КодМаркировки = Сред(Штрихкод, 1, 31);
        
        // 3. Получение GTIN
        GTIN = Сред(КодМаркировки, 4, 13);

        Если ЭтоУпрощенныйGTIN(GTIN) Тогда

            GTIN = РеальныйGTINПоКодуМаркировки(КодМаркировки);

        КонецЕсли;
    
        // 4. Получение процента уценки
        ПроцентУценки = ПроцентУценкиПоКодуМаркировки(КодМаркировки);

        // 5. Поиск задания на отбор
        Запрос = Новый Запрос("ВЫБРАТЬ
                              |    ВсеЗаданияНаОтбор.НомерЗаданияНаОтбор,
                              |    ВсеЗаданияНаОтбор.Модель КАК Модель,
                              |    ВсеЗаданияНаОтбор.Размер,
                              |    ВсеЗаданияНаОтбор.Модификатор,
                              |    ВсеЗаданияНаОтбор.Цвет,
                              |    ВсеЗаданияНаОтбор.НомерСтроки
                              |ПОМЕСТИТЬ ИскомыеЗаданияНаОтбор
                              |ИЗ
                              |    Документ.Задание.ЗаданияНаОтбор КАК ВсеЗаданияНаОтбор
                              |ГДЕ
                              |    ВсеЗаданияНаОтбор.Ссылка = &Документ
                              |    И ВсеЗаданияНаОтбор.Комплектовщик = &Комплектовщик
                              |    И ВсеЗаданияНаОтбор.Уценка = &ПроцентУценки
                              |    И ВсеЗаданияНаОтбор.Размер <> ЗНАЧЕНИЕ(Справочник.моделиРазмер.ПустаяСсылка)
                              |;
                              |
                              |////////////////////////////////////////////////////////////////////////////////
                              |ВЫБРАТЬ ПЕРВЫЕ 1
                              |    ИскомыеЗаданияНаОтбор.НомерЗаданияНаОтбор
                              |ИЗ
                              |    ИскомыеЗаданияНаОтбор КАК ИскомыеЗаданияНаОтбор
                              |        ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.моделиEAH13 КАК моделиEAH13
                              |        ПО ИскомыеЗаданияНаОтбор.Модель = моделиEAH13.Владелец
                              |        И ИскомыеЗаданияНаОтбор.Размер = моделиEAH13.Размер
                              |        И ИскомыеЗаданияНаОтбор.Модификатор = моделиEAH13.Кожтовар
                              |        И ИскомыеЗаданияНаОтбор.Цвет = моделиEAH13.Цвет
                              |ГДЕ
                              |    моделиEAH13.Код = &GTIN");

        Запрос.УстановитьПараметр("Документ", Задание);
        Запрос.УстановитьПараметр("Комплектовщик", Комплектовщик);
        Запрос.УстановитьПараметр("ПроцентУценки", ПроцентУценки);
        Запрос.УстановитьПараметр("GTIN", GTIN);

        РезультатЗапроса = Запрос.Выполнить();
        Выборка = РезультатЗапроса.Выбрать();
    
        // 6. Проверка, что удалось найти задание на отбор
        Если Не Выборка.Следующий() Тогда

            ОтменитьТранзакцию();

            ЗаписатьОшибкуОбработкиШтрихкода(КодМаркировки,
                                             Задание,
                                             Комплектовщик,
                                             Перечисления.ВидОшибкиКонтроляОтбора.НеНайденоЗаданиеНаОтборПоШтрихкоду);
            ОписаниеОбработкиШтрихкода.КодВозврата = КодВозвратаНеНайденоЗаданиеНаОтборПоШтрихкоду();

            Возврат ОписаниеОбработкиШтрихкода;

        КонецЕсли;
        
        // 7. Сохранение штрихкода в регистр сведений
        //@skip-check property-return-type
        НомерЗаданияНаОтбор = Выборка.НомерЗаданияНаОтбор; // Число
        ОписаниеОбработкиШтрихкода.НомерЗаданияНаОтбор = НомерЗаданияНаОтбор;

        ПредыдущееКоличество = ОсталосьПоЗаданиюНаОтбор(Задание, НомерЗаданияНаОтбор);
        ОписаниеОбработкиШтрихкода.ПредыдущееКоличество = ПредыдущееКоличество;

        Если Не СохранитьШтрихкод(Штрихкод, Задание, НомерЗаданияНаОтбор, 1, Комплектовщик, ОписаниеОбработкиШтрихкода) Тогда

            ОтменитьТранзакцию();

            ЗаписатьОшибкуСохраненияШтрихкода(Штрихкод, Задание, Комплектовщик, ОписаниеОбработкиШтрихкода.КодВозврата);

            Возврат ОписаниеОбработкиШтрихкода;

        КонецЕсли;

        ОписаниеОбработкиШтрихкода.НовоеКоличество = ПредыдущееКоличество - 1;
        
        // 8. Проверка, завершено ли выполнение задания
        Если ЗаданиеВыполнено(Задание) Тогда

            ДокументНаПеремещение = ДокументНаПеремещение(Задание);

            // 8.1. Проверка, что существует документ на перемещение
            Если Не ЗначениеЗаполнено(ДокументНаПеремещение) Тогда

                ОтменитьТранзакцию();

                ЗаписатьОшибкуОбработкиШтрихкода(КодМаркировки,
                                                 Задание,
                                                 Комплектовщик,
                                                 Перечисления.ВидОшибкиКонтроляОтбора.ОтсутствуетДокументНаПеремещение);
                ОписаниеОбработкиШтрихкода.КодВозврата = КодВозвратаОтсутствуетДокументНаВнутреннееПеремещение();

                Возврат ОписаниеОбработкиШтрихкода;

            КонецЕсли;
    
            // 8.2. Закрытие задания
            Задание.ПолучитьОбъект().ЗавершитьВыполнение();
            
            // 8.3. Заполнение документа на перемещение штрихкодами
            ДокументНаПеремещение.ПолучитьОбъект().ЗаполнитьШтрихкодамиЗадания(Задание);

        КонецЕсли;  

        // 9. Фиксация транзакции
        ЗафиксироватьТранзакцию();

        Возврат ОписаниеОбработкиШтрихкода;

    Исключение

        ОтменитьТранзакцию();
        ВызватьИсключение;

    КонецПопытки;

КонецФункции

// Функция уменьшает значение реквизита "Количество" в табличной части "ЗаданияНаОтбор"
// на определнное число, которое зависит от модели, с которой связан штрихкод,
// записывает штрихкод в документ "ВнПеремОтпуск" и возвращает описание обработки.
// 
// Параметры:
//  Задание - ДокументСсылка.Задание
//  Комплектовщик - СправочникСсылка.Комплектовщики - Комплектовщик, выполняющий задание
//  Штрихкод - Строка
//
// Возвращаемое значение:
//  См. НовоеОписаниеОбработкиШтрихкода
Функция ОбработатьШтрихкодКороба(Знач Задание, Знач Комплектовщик, Знач Штрихкод) Экспорт

    НачатьТранзакцию();

    Попытка

        ОписаниеОбработкиШтрихкода = НовоеОписаниеОбработкиШтрихкода();
        
        // 1. Назначение комплектовщику выполняемого задания
        Комплектовщик.ПолучитьОбъект().НазначитьВыполняемоеЗадание(Задание);
        
        // 2. Извлечение номера короба из штрихкода
        НомерКороба = Штрихкод;

        // 3. Поиск задания на отбор
        Запрос = Новый Запрос("ВЫБРАТЬ
                              |    ВсеЗаданияНаОтбор.НомерЗаданияНаОтбор,
                              |    ВсеЗаданияНаОтбор.Модель,
                              |    ВсеЗаданияНаОтбор.Модификатор,
                              |    ВсеЗаданияНаОтбор.Цвет,
                              |    ВсеЗаданияНаОтбор.НомерСтроки
                              |ПОМЕСТИТЬ ИскомыеЗаданияНаОтбор
                              |ИЗ
                              |    Документ.Задание.ЗаданияНаОтбор КАК ВсеЗаданияНаОтбор
                              |ГДЕ
                              |    ВсеЗаданияНаОтбор.Ссылка = &Документ
                              |    И ВсеЗаданияНаОтбор.Комплектовщик = &Комплектовщик
                              |    И ВсеЗаданияНаОтбор.Размер = ЗНАЧЕНИЕ(Справочник.моделиРазмер.ПустаяСсылка)
                              |;
                              |
                              |////////////////////////////////////////////////////////////////////////////////
                              |ВЫБРАТЬ ПЕРВЫЕ 1
                              |    ИскомыеЗаданияНаОтбор.НомерЗаданияНаОтбор,
                              |    ВЫБОР
                              |        КОГДА ТШККороб.Модель.ДваКороба
                              |            ТОГДА ТШККороб.Модель.КолВКоробе * 2
                              |        ИНАЧЕ ТШККороб.Модель.КолВКоробе
                              |    КОНЕЦ КАК ВычестьКоличество
                              |ИЗ
                              |    ИскомыеЗаданияНаОтбор КАК ИскомыеЗаданияНаОтбор
                              |        ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТШККороб КАК ТШККороб
                              |        ПО ИскомыеЗаданияНаОтбор.Модель = ТШККороб.Модель
                              |        И ИскомыеЗаданияНаОтбор.Модификатор = ТШККороб.Кожтовар
                              |        И ИскомыеЗаданияНаОтбор.Цвет = ТШККороб.Цвет
                              |ГДЕ
                              |    ТШККороб.Код = &НомерКороба");

        Запрос.УстановитьПараметр("Документ", Задание);
        Запрос.УстановитьПараметр("Комплектовщик", Комплектовщик);
        Запрос.УстановитьПараметр("НомерКороба", НомерКороба);

        РезультатЗапроса = Запрос.Выполнить();
        Выборка = РезультатЗапроса.Выбрать();

        // 4. Проверка, что удалось найти задание на отбор
        Если Не Выборка.Следующий() Тогда

            ОтменитьТранзакцию();

            ЗаписатьОшибкуОбработкиШтрихкода(НомерКороба,
                                             Задание,
                                             Комплектовщик,
                                             Перечисления.ВидОшибкиКонтроляОтбора.НеНайденоЗаданиеНаОтборПоШтрихкоду);
            ОписаниеОбработкиШтрихкода.КодВозврата = КодВозвратаНеНайденоЗаданиеНаОтборПоШтрихкоду();

            Возврат ОписаниеОбработкиШтрихкода;

        КонецЕсли;
        
        // 5. Проверка, что после уменьшения количества оно не станет отрицательным
        //@skip-check property-return-type
        НомерЗаданияНаОтбор = Выборка.НомерЗаданияНаОтбор; // Число
        ОписаниеОбработкиШтрихкода.НомерЗаданияНаОтбор = НомерЗаданияНаОтбор;

        ПредыдущееКоличество = ОсталосьПоЗаданиюНаОтбор(Задание, НомерЗаданияНаОтбор);
        ОписаниеОбработкиШтрихкода.ПредыдущееКоличество = ПредыдущееКоличество;
          
        //@skip-check property-return-type
        ВычестьКоличество = Выборка.ВычестьКоличество; // Число 

        Если ВычестьКоличество > ПредыдущееКоличество Тогда

            ОтменитьТранзакцию();

            ЗаписатьОшибкуОбработкиШтрихкода(НомерКороба,
                                             Задание,
                                             Комплектовщик,
                                             Перечисления.ВидОшибкиКонтроляОтбора.СлишкомМногоВКоробе);
            ОписаниеОбработкиШтрихкода.НовоеКоличество = ПредыдущееКоличество - ВычестьКоличество;
            ОписаниеОбработкиШтрихкода.КодВозврата = КодВозвратаСлишкомМногоВКоробе();

            Возврат ОписаниеОбработкиШтрихкода;

        КонецЕсли;
        
        // 6. Сохранение штрихкода в регистр сведений
        Если Не СохранитьШтрихкод(Штрихкод,
                                  Задание,
                                  НомерЗаданияНаОтбор,
                                  ВычестьКоличество,
                                  Комплектовщик,
                                  ОписаниеОбработкиШтрихкода) Тогда

            ОтменитьТранзакцию();

            ЗаписатьОшибкуСохраненияШтрихкода(Штрихкод, Задание, Комплектовщик, ОписаниеОбработкиШтрихкода.КодВозврата);

            Возврат ОписаниеОбработкиШтрихкода;

        КонецЕсли;

        ОписаниеОбработкиШтрихкода.НовоеКоличество = ПредыдущееКоличество - ВычестьКоличество;

        // 7. Проверка, завершено ли выполнение задания
        Если ЗаданиеВыполнено(Задание) Тогда

            ДокументНаПеремещение = ДокументНаПеремещение(Задание);

            // 7.1. Проверка, что существует документ на перемещение
            Если Не ЗначениеЗаполнено(ДокументНаПеремещение) Тогда

                ОтменитьТранзакцию();

                ЗаписатьОшибкуОбработкиШтрихкода(НомерКороба,
                                                 Задание,
                                                 Комплектовщик,
                                                 Перечисления.ВидОшибкиКонтроляОтбора.ОтсутствуетДокументНаПеремещение);
                ОписаниеОбработкиШтрихкода.КодВозврата = КодВозвратаОтсутствуетДокументНаВнутреннееПеремещение();

                Возврат ОписаниеОбработкиШтрихкода;

            КонецЕсли;
    
            // 7.2. Закрытие задания
            Задание.ПолучитьОбъект().ЗавершитьВыполнение();
            
            // 7.3. Заполнение документа на перемещение штрихкодами
            ДокументНаПеремещение.ПолучитьОбъект().ЗаполнитьШтрихкодамиЗадания(Задание);

        КонецЕсли;        

        // 8. Фиксация транзакции
        ЗафиксироватьТранзакцию();

        Возврат ОписаниеОбработкиШтрихкода;

    Исключение

        ОтменитьТранзакцию();
        ВызватьИсключение;

    КонецПопытки;

КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Функция проверяет, что GTIN является упрощенным.
// 
// Параметры:
//  GTIN - Строка
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоУпрощенныйGTIN(GTIN) Экспорт

    Возврат GTIN = "4814130000030";

КонецФункции

// Функция возвращает реальный GTIN, соответствующий коду маркировки с упрощенным GTIN.
// 
// Параметры:
//  КодМаркировкиСУспрощеннымGTIN - Строка
// 
// Возвращаемое значение:
//  Строка - Реальный GTIN или пустая строка
Функция РеальныйGTINПоКодуМаркировки(КодМаркировкиСУспрощеннымGTIN) Экспорт

    Запрос = Новый Запрос("ВЫБРАТЬ
                          |    КМ31.GTIN КАК GTIN
                          |ИЗ
                          |    Справочник.КМ31 КАК КМ31
                          |ГДЕ
                          |    КМ31.Код = &КМ31");

    Запрос.УстановитьПараметр("КМ31", КодМаркировкиСУспрощеннымGTIN);

    РезультатЗапроса = Запрос.Выполнить();
    Выборка = РезультатЗапроса.Выбрать();

    Если Выборка.Следующий() Тогда
        
        //@skip-check property-return-type
        Возврат Выборка.GTIN;

    Иначе

        // Возрат значения по умолчанию
        Возврат "";

    КонецЕсли;

КонецФункции

// Функция возвращает процент уценки, соответствующий коду маркировки.
// 
// Параметры:
//  КодМаркировки - Строка
// 
// Возвращаемое значение:
//  Число
Функция ПроцентУценкиПоКодуМаркировки(КодМаркировки) Экспорт

    Запрос = Новый Запрос("ВЫБРАТЬ
                          |    КМ31.ПроцентУценки КАК ПроцентУценки
                          |ИЗ
                          |    Справочник.КМ31 КАК КМ31
                          |ГДЕ
                          |    КМ31.Код = &КМ31");

    Запрос.УстановитьПараметр("КМ31", КодМаркировки);

    РезультатЗапроса = Запрос.Выполнить();
    Выборка = РезультатЗапроса.Выбрать();

    Если Выборка.Следующий() Тогда
        
        //@skip-check property-return-type
        Возврат Выборка.ПроцентУценки;

    Иначе

        // Возрат значения по умолчанию
        Возврат 0;

    КонецЕсли;

КонецФункции

// Функция создает описание обработки штрихкода.
// 
// Возвращаемое значение:
//  Структура - Описание обработки штрихкода:
// * КодВозврата - Число - Код, указывающий на результат обработки штрихкода
// * НомерЗаданияНаОтбор - Неопределено, Число - Номер строки табличной части "ЗаданияНаОтбор" документа "Задание",
//                                               которой соответствовал обрабатываемый штрихкод
// * ПредыдущееКоличество - Неопределено, Число - Значение реквизита "Количество" до обработки штрихкода
// * НовоеКоличество - Неопределено, Число - Значение реквизита "Количество" после обработки штрихкода
// * ДатаПредыдущегоСканирования - Неопределено, Дата - Дата предыдущего сканирования, если штрихкод уже был отсканирован
// * КомплектовщикПредыдущегоСканирования - Неопределено, СправочникСсылка.Комплектовщики - Комплектовщие предыдущего 
//                                                                                          сканирования, если штрихкод уже был
//                                                                                          отсканирован другим комплектовщиком
Функция НовоеОписаниеОбработкиШтрихкода() Экспорт

    ОписаниеОбработкиШтрихкода = Новый Структура;

    ОписаниеОбработкиШтрихкода.Вставить("КодВозврата", КодВозвратаУспех());
    ОписаниеОбработкиШтрихкода.Вставить("НомерЗаданияНаОтбор", Неопределено);
    ОписаниеОбработкиШтрихкода.Вставить("ПредыдущееКоличество", Неопределено);
    ОписаниеОбработкиШтрихкода.Вставить("НовоеКоличество", Неопределено);
    ОписаниеОбработкиШтрихкода.Вставить("ДатаПредыдущегоСканирования", Неопределено);
    ОписаниеОбработкиШтрихкода.Вставить("КомплектовщикПредыдущегоСканирования", Неопределено);

    Возврат ОписаниеОбработкиШтрихкода;

КонецФункции

// Функция создает описание того, сколько осталось выполнить по заданию.
// 
// Возвращаемое значение:
//  Структура:
// * ВКоробах - Число 
// * Россыпи - Число
Функция НовоеОписаниеОстатков() Экспорт

    Возврат Новый Структура("ВКоробах, Россыпи", 0, 0);

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция документ на перемещение у задания.
// 
// Параметры:
//  Задание - ДокументСсылка.Задание
// 
// Возвращаемое значение:
//  Неопределено, ДокументСсылка.ВнПеремОтпуск - Документ на перемещение
Функция ДокументНаПеремещение(Знач Задание)

    Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
                          |    Задание.ДокументНаПеремещение
                          |ИЗ
                          |    Документ.Задание КАК Задание
                          |ГДЕ
                          |    Задание.Ссылка = &Документ");

    Запрос.УстановитьПараметр("Документ", Задание);

    РезультатЗапроса = Запрос.Выполнить();
    Выборка = РезультатЗапроса.Выбрать();

    Если Не Выборка.Следующий() Тогда

        Возврат Неопределено;

    КонецЕсли;
    
    //@skip-check property-return-type
    ДокументНаПеремещение = Выборка.ДокументНаПеремещение; // ДокументСсылка.ВнПеремОтпуск

    Возврат ДокументНаПеремещение;

КонецФункции

// Функция совершает попытку записать штрихкод в регистр проведенных штрихкодов и,
// если попытка не удается, заполняет описание обработки штрихкода информацией
// об ошибке и записывает информацию о ней в журнал ошибок.
// 
// Параметры:
//  Штрихкод - Строка
//  Документ - ДокументСсылка.Задание
//  НомерЗаданияНаОтбор - Число
//  Количество - Число
//  Комплектовщик - СправочникСсылка.Комплектовщики
//  ОписаниеОбработкиШтрихкода - См. НовоеОписаниеОбработкиШтрихкода
// 
// Возвращаемое значение:
//  Булево
Функция СохранитьШтрихкод(Знач Штрихкод,
                          Знач Документ,
                          Знач НомерЗаданияНаОтбор,
                          Знач Количество,
                          Знач Комплектовщик,
                          ОписаниеОбработкиШтрихкода)

    // 1. Попытка записать штрихкод в регистр проведенных штрихкодов
    Если РегистрыСведений.ШтрихкодыКонтроляОтбора.ДобавитьШтрихкод(Штрихкод,
                                                                   Документ,
                                                                   НомерЗаданияНаОтбор,
                                                                   Количество,
                                                                   Комплектовщик) Тогда

        Возврат Истина;

    Иначе

        // 2. Если попытка не удалась, попытка получить информацию об уже проведенном штрихкоде
        ОписаниеПроведенияШтрихкода = РегистрыСведений.ШтрихкодыКонтроляОтбора.НайтиПоШтрихкоду(Штрихкод);

        Если ОписаниеПроведенияШтрихкода <> Неопределено Тогда

            // 2.1. Проверка, кем уже был проведен штрихкод
            Если ОписаниеПроведенияШтрихкода.Комплектовщик = Комплектовщик Тогда

                ОписаниеОбработкиШтрихкода.КодВозврата = КодВозвратаШтрихкодУжеПроведен();
                ОписаниеОбработкиШтрихкода.ДатаПредыдущегоСканирования = ОписаниеПроведенияШтрихкода.Дата;

            Иначе

                ОписаниеОбработкиШтрихкода.КодВозврата = КодВозвратаШтрихкодУжеПроведенДругим();
                ОписаниеОбработкиШтрихкода.ДатаПредыдущегоСканирования = ОписаниеПроведенияШтрихкода.Дата;
                ОписаниеОбработкиШтрихкода.КомплектовщикПредыдущегоСканирования = ОписаниеПроведенияШтрихкода.Комплектовщик;

            КонецЕсли;

        Иначе

            ОписаниеОбработкиШтрихкода.КодВозврата = КодВозвратаОшибкаПроверкиПроведенияШтрихкода();

        КонецЕсли;

        Возврат Ложь;

    КонецЕсли;

КонецФункции

// Процедура записывает ошибку об обработке штрихкода россыпи.
// 
// Параметры:
//  Штрихкод - Строка
//  Документ - ДокументСсылка.Задание
//  Комплектовщик - СправочникСсылка.Комплектовщики
//  ВидОшибки - ПеречислениеСсылка.ВидОшибкиКонтроляОтбора
Процедура ЗаписатьОшибкуОбработкиШтрихкода(Знач Штрихкод, Знач Документ, Знач Комплектовщик, Знач ВидОшибки)

    РегистрыСведений.ЖурналОшибокКонтроляОтбора.ЗаписатьОшибку(Документ, Комплектовщик, ВидОшибки, , Штрихкод);

КонецПроцедуры

// Процедура записывает ошибку о проведении штрихкода в зависимости от типа штрихкода в журнал ошибок.
// 
// Параметры:
//  Штрихкод - Строка
//  Документ - ДокументСсылка.Задание
//  Комплектовщик - СправочникСсылка.Комплектовщики
//  КодВозврата - Число
Процедура ЗаписатьОшибкуСохраненияШтрихкода(Знач Штрихкод, Знач Документ, Знач Комплектовщик, Знач КодВозврата)

    // Определение вида ошибки по коду возврата
    ВидОшибки = Перечисления.ВидОшибкиКонтроляОтбора.ПустаяСсылка();

    Если КодВозврата = КодВозвратаШтрихкодУжеПроведен() Тогда

        ВидОшибки = Перечисления.ВидОшибкиКонтроляОтбора.ШтрихкодУжеПроведен;

    ИначеЕсли КодВозврата = КодВозвратаШтрихкодУжеПроведенДругим() Тогда

        ВидОшибки = Перечисления.ВидОшибкиКонтроляОтбора.ШтрихкодУжеПроведенДругим;

    КонецЕсли;

    ЗаписатьОшибкуОбработкиШтрихкода(Штрихкод, Документ, Комплектовщик, ВидОшибки);

КонецПроцедуры

#КонецОбласти