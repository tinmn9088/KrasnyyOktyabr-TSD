// @strict-types
#Область ПрограммныйИнтерфейс

// Процедура добавляет штрихкод в регистр сведений. 
// 
// Параметры:
//  Документ - ДокументСсылка.ПересчетТоваров
//  Штрихкод - Строка
//  УникальныйИдентификаторХарактеристики - Неопределено, УникальныйИдентификатор - Уникальный идентификатор характеристики номенклатуры
//  ДополнительныеПараметры - См. НовыеДополнительныеПараметрыДобавленияШтрихкода
Процедура ДобавитьШтрихкод(Знач Документ,
                           Знач Штрихкод,
                           Знач УникальныйИдентификаторХарактеристики,
                           Знач ДополнительныеПараметры) Экспорт

    МенеджерЗаписи = СоздатьМенеджерЗаписи();

    МенеджерЗаписи.Документ = Документ;
    
    // Удаление специальных символов кода маркировки, которые могут поломать регистр сведений
    ШтрихкодыКлиентСервер.Сериализовать(Штрихкод);
    МенеджерЗаписи.Штрихкод = Штрихкод;

    Если ЗначениеЗаполнено(ДополнительныеПараметры["Номенклатура"]) Тогда

        МенеджерЗаписи.Номенклатура = ДополнительныеПараметры.Номенклатура;

    КонецЕсли;

    Если ЗначениеЗаполнено(УникальныйИдентификаторХарактеристики) Тогда

        МенеджерЗаписи.УникальныйИдентификаторХарактеристики = УникальныйИдентификаторХарактеристики;

    КонецЕсли;

    Если ЗначениеЗаполнено(ДополнительныеПараметры["НаименованиеХарактеристики"]) Тогда

        МенеджерЗаписи.НаименованиеХарактеристики = ДополнительныеПараметры.НаименованиеХарактеристики;

    КонецЕсли;

    МенеджерЗаписи.Количество = ДополнительныеПараметры.Количество;

    МенеджерЗаписи.Записать();

КонецПроцедуры

// Процедура устанавливает количество для штрихкода.
// 
// Параметры:
//  Документ - ДокументСсылка.ПересчетТоваров
//  Штрихкод - Строка
//  УникальныйИдентификаторХарактеристики - УникальныйИдентификатор
//  Количество - Число
Процедура УстановитьКоличество(Знач Документ,
                               Знач Штрихкод,
                               Знач УникальныйИдентификаторХарактеристики,
                               Знач Количество) Экспорт

    МенеджерЗаписи = МенеджерЗаписиШтрихкода(Документ, Штрихкод, УникальныйИдентификаторХарактеристики);

    МенеджерЗаписи.Количество = Количество;

    МенеджерЗаписи.Записать();

КонецПроцедуры

// Процедура удаляет штрихкод из регистра сведений.
// 
// Параметры:
//  Документ - ДокументСсылка.ПересчетТоваров
//  Штрихкод - Строка
//  УникальныйИдентификаторХарактеристики - УникальныйИдентификатор
Процедура УдалитьШтрихкод(Знач Документ, Знач Штрихкод, Знач УникальныйИдентификаторХарактеристики) Экспорт

    МенеджерЗаписи = МенеджерЗаписиШтрихкода(Документ, Штрихкод, УникальныйИдентификаторХарактеристики);
    МенеджерЗаписи.Удалить();

КонецПроцедуры

// Процедура удаляет штрихкод из регистра сведений.
// 
// Параметры:
//  Документ - ДокументСсылка.ПересчетТоваров
//  Номенклатура - СправочникСсылка.НоменклатураРозница
//  УникальныйИдентификаторХарактеристики - УникальныйИдентификатор
Процедура УдалитьТоварСХарактеристикой(Знач Документ, Знач Номенклатура, Знач УникальныйИдентификаторХарактеристики) Экспорт

    НаборЗаписей = СоздатьНаборЗаписей();
    НаборЗаписей.УдалитьТоварСХарактеристикой(Документ, Номенклатура, УникальныйИдентификаторХарактеристики);

КонецПроцедуры

// Процедура удаляет штрихкод из регистра сведений при условии, что у него не заполнена номенклатура.
// 
// Параметры:
//  Документ - ДокументСсылка.ПересчетТоваров
//  Штрихкод - Строка
Процедура УдалитьШтрихкодБезНоменклатуры(Знач Документ, Знач Штрихкод) Экспорт

    МенеджерЗаписи = МенеджерЗаписиШтрихкода(Документ, Штрихкод);

    Если Не ЗначениеЗаполнено(МенеджерЗаписи.Номенклатура) Тогда

        МенеджерЗаписи.Удалить();

    КонецЕсли;

КонецПроцедуры

// Функция удаляет штрихкоды документа из регистра сведений.
// 
// Параметры:
//  Документ - ДокументСсылка.ПересчетТоваров
// 
// Возвращаемое значение:
//  Число - Количество штрихкодов, которое было удалено
Функция УдалитьШтрихкодыДокумента(Знач Документ) Экспорт

    НаборЗаписей = СоздатьНаборЗаписей();

    // Получение записей
    НаборЗаписей.Отбор.Документ.Установить(Документ);
    НаборЗаписей.Прочитать();

    КоличествоШтрихкодов = НаборЗаписей.Количество();

    // Удаление записей
    НаборЗаписей.Очистить();
    НаборЗаписей.Записать();

    Возврат КоличествоШтрихкодов;

КонецФункции

// Функция определяет есть ли штрихкод в регистре сведений.
// 
// Параметры:
//  Документ - ДокументСсылка.ПересчетТоваров
//  Штрихкод - Строка
//  УникальныйИдентификаторХарактеристики - УникальныйИдентификатор
// 
// Возвращаемое значение:
//  Булево
Функция ЕстьШтрихкод(Знач Документ, Знач Штрихкод, Знач УникальныйИдентификаторХарактеристики) Экспорт

    Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
                          |    ИСТИНА КАК ЕстьШтрихкод
                          |ИЗ
                          |    РегистрСведений.УдалитьШтрихкодыТоваровСХарактеристиками КАК ВсеШтрихкоды
                          |ГДЕ
                          |    ВсеШтрихкоды.Документ = &Документ
                          |    И ВсеШтрихкоды.Штрихкод = &Штрихкод
                          |    И ВсеШтрихкоды.УникальныйИдентификаторХарактеристики = &УникальныйИдентификаторХарактеристики");

    Запрос.УстановитьПараметр("Документ", Документ);
    Запрос.УстановитьПараметр("Штрихкод", Штрихкод);
    УникальныйИдентификаторХарактеристики = ?(УникальныйИдентификаторХарактеристики = Неопределено, УникальныйИдентификаторПоУмолчанию(), УникальныйИдентификаторХарактеристики);
    Запрос.УстановитьПараметр("УникальныйИдентификаторХарактеристики", УникальныйИдентификаторХарактеристики);
    РезультатЗапроса = Запрос.Выполнить();
    Выборка = РезультатЗапроса.Выбрать();

    Возврат Выборка.Следующий();

КонецФункции

// Функция возвращает значение реквизита "Количество".
// 
// Параметры:
//  Документ - ДокументСсылка.ПоступлениеТоваров, ДокументСсылка.ПеремещениеТоваров, ДокументСсылка.ПересчетТоваров, ДокументСсылка.РеализацияТоваров - Документ
//  Штрихкод - Строка
//  УникальныйИдентификаторХарактеристики - УникальныйИдентификатор
// 
// Возвращаемое значение:
//  Число
Функция КоличествоПоШтрихкоду(Знач Документ, Знач Штрихкод, Знач УникальныйИдентификаторХарактеристики) Экспорт

    Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
                          |    ВсеШтрихкоды.Количество
                          |ИЗ
                          |    РегистрСведений.УдалитьШтрихкодыТоваровСХарактеристиками КАК ВсеШтрихкоды
                          |ГДЕ
                          |    ВсеШтрихкоды.Документ = &Документ
                          |    И ВсеШтрихкоды.Штрихкод = &Штрихкод
                          |    И ВсеШтрихкоды.УникальныйИдентификаторХарактеристики = &УникальныйИдентификаторХарактеристики");

    Запрос.УстановитьПараметр("Документ", Документ);
    Запрос.УстановитьПараметр("Штрихкод", Штрихкод);
    УникальныйИдентификаторХарактеристики = ?(УникальныйИдентификаторХарактеристики = Неопределено, УникальныйИдентификаторПоУмолчанию(), УникальныйИдентификаторХарактеристики);
    Запрос.УстановитьПараметр("УникальныйИдентификаторХарактеристики", УникальныйИдентификаторХарактеристики);
    РезультатЗапроса = Запрос.Выполнить();
    Выборка = РезультатЗапроса.Выбрать();

    Если Не Выборка.Следующий() Тогда

        Возврат 0;

    КонецЕсли;
    
    //@skip-check property-return-type
    Количество = Выборка.Количество; // Число

    Возврат Количество;

КонецФункции

// Функция определяет количество штрихкодов, для которых не заполнен реквизиьт "Номенклатура".
// 
// Параметры:
//  Документ - ДокументСсылка.ПоступлениеТоваров, ДокументСсылка.ПересчетТоваров, ДокументСсылка.РеализацияТоваров - Документ
// 
// Возвращаемое значение:
//  Число
Функция КоличествоШтрихкодовБезНоменклатуры(Знач Документ) Экспорт

    Запрос = Новый Запрос("ВЫБРАТЬ
                          |    КОЛИЧЕСТВО(*) КАК Количество
                          |ИЗ
                          |    РегистрСведений.УдалитьШтрихкодыТоваровСХарактеристиками КАК ВсеШтрихкоды
                          |ГДЕ
                          |    ВсеШтрихкоды.Документ = &Документ
                          |    И ВсеШтрихкоды.Номенклатура = ЗНАЧЕНИЕ(Справочник.НоменклатураРозница.ПустаяСсылка)");

    Запрос.УстановитьПараметр("Документ", Документ);
    РезультатЗапроса = Запрос.Выполнить();
    Выборка = РезультатЗапроса.Выбрать();

    Если Не Выборка.Следующий() Тогда

        ВызватьИсключение ("Не удалось получить количество штрихкодов без номенклатуры");

    КонецЕсли;
    
    //@skip-check property-return-type
    Количество = Выборка.Количество; // Число

    Возврат Количество;

КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Функция создает с дополнительными параметрами для добавления штрихкода.
// 
// Возвращаемое значение:
//  Структура:
//  * НаименованиеХарактеристики - Строка, Неопределено - Наименование характеристики
//  * Номенклатура - СправочникСсылка.НоменклатураРозница, Неопределено - Номенклатура товара
//  * Количество - Число
Функция НовыеДополнительныеПараметрыДобавленияШтрихкода() Экспорт

    ДополнительныеПараметрыДобавленияШтрихкода = Новый Структура;

    ДополнительныеПараметрыДобавленияШтрихкода.Вставить("НаименованиеХарактеристики", Неопределено);
    ДополнительныеПараметрыДобавленияШтрихкода.Вставить("Номенклатура", Неопределено);
    ДополнительныеПараметрыДобавленияШтрихкода.Вставить("Количество", 0);

    Возврат ДополнительныеПараметрыДобавленияШтрихкода;

КонецФункции

Функция УникальныйИдентификаторПоУмолчанию() Экспорт
    
    Возврат Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
    
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция находит штрихкод в регистре сведений. Вызывает исключение, если
// не удалось найти штрихкод.
// 
// Параметры:
//  Документ - ДокументСсылка.ПоступлениеТоваров, ДокументСсылка.ПеремещениеТоваров, ДокументСсылка.ПересчетТоваров - Документ
//  Штрихкод - Строка
//  УникальныйИдентификаторХарактеристики - УникальныйИдентификатор
//  ВызыватьИсключениеКогдаНеНайдено - Булево
// 
// Возвращаемое значение:
//  РегистрСведенийМенеджерЗаписи.ШтрихкодыТоваров
Функция МенеджерЗаписиШтрихкода(Знач Документ,
                                Знач Штрихкод,
                                Знач УникальныйИдентификаторХарактеристики = Неопределено,
                                Знач ВызыватьИсключениеКогдаНеНайдено = Истина)

    МенеджерЗаписи = СоздатьМенеджерЗаписи();

    // Заполнение параметров отбора
    МенеджерЗаписи.Документ = Документ;
    МенеджерЗаписи.Штрихкод = Штрихкод;
    МенеджерЗаписи.УникальныйИдентификаторХарактеристики = УникальныйИдентификаторХарактеристики;

    МенеджерЗаписи.Прочитать();

    Если ВызыватьИсключениеКогдаНеНайдено И Не МенеджерЗаписи.Выбран() Тогда

        ВызватьИсключение (СтрШаблон("Штрихкод '%1' не найден в %2", Штрихкод, Документ));

    КонецЕсли;

    Возврат МенеджерЗаписи;

КонецФункции

#КонецОбласти