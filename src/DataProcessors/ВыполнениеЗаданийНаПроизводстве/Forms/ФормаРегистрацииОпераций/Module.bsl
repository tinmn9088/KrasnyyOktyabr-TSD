// @strict-types
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

    ФормаСотрудник = Параметры.Сотрудник;
    ФормаПроцесс = Параметры.Процесс;

    ФормаСписокШтрихкодов.Параметры.УстановитьЗначениеПараметра("Сотрудник", ФормаСотрудник);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

    ФормаКодОперации = КодОперацииПоУмолчанию();
    Режим = РежимПоУмолчанию();
    ОбновитьКоличествоШтрихкодов();

#Если МобильноеПриложениеКлиент Или МобильныйКлиент Тогда

    Элементы.СписокШтрихкодов.Шапка = Ложь;

#КонецЕсли

    Элементы.ПодсказкаПроцесс.Заголовок = Строка(ФормаПроцесс);

    Заголовок = СтрШаблон("Выполнение: %1", ФормаПроцесс);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

    Если ВводДоступен() И ИмяСобытия = ОповещенияФормыКлиент.ИмяСобытияСканированияШтрихкода() Тогда

        Штрихкод = Строка(Параметр);

        ОбработатьШтрихкод(Штрихкод);

    КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Асинх Процедура ОбработатьШтрихкодСФормыАсинх(Команда)

    Значение = Ждать ВвестиСтрокуАсинх(ФормаШтрихкод, "Введите штрихкод");

    Если Не ЗначениеЗаполнено(Значение) Тогда

        Возврат;

    КонецЕсли;

    ФормаШтрихкод = Значение;
    ОбработатьШтрихкод(ФормаШтрихкод);

КонецПроцедуры

&НаКлиенте
Процедура РежимУдаления(Команда)

    Если ФормаКодОперации = "<НЕ ВЫБРАНА>" Тогда

        ПоказатьВажноеОповещениеОбОшибке("Ошибка", "Код операции не определён");
        Возврат;

    КонецЕсли;

    Режим = "Удаление";
    Элементы.Подсказка.Видимость = Истина;
    ПоказатьОповещение("Режим удаления", "Отсканируйте штрикод для удаления");

КонецПроцедуры

&НаКлиенте
Асинх Процедура ОчиститьШтрихкодыАсинх(Команда)

    КоличествоШтрихкодов = КоличествоЗарегистрированныхОпераций(ФормаСотрудник);
    
    // Проверка, что вызов серверной функции прошел без потери соединения с основным сервером
    Если КоличествоШтрихкодов = Неопределено Тогда
        
        // Из-за недоступности основного сервера должно появиться предложение перейти в автономный режим
        Возврат;

    КонецЕсли;

    Если КоличествоШтрихкодов = 0 Тогда

        ПоказатьОповещение("Штрихкоды отсутствуют");

        Возврат;

    КонецЕсли;

    ОтветНаВопрос = Ждать ВопросАсинх(СтрШаблон("Количество: %1", КоличествоШтрихкодов),
                                      РежимДиалогаВопрос.ДаНет,
                                      ,
                                      КодВозвратаДиалога.Нет,
                                      "Удалить все штрихкоды?"); // КодВозвратаДиалога

    Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда

        ПоказатьОповещение("Удаление штрихкодов");

        ШтрихкодыУдалены = УдалитьШтрихкодыОперацииСотрудника(ФормаСотрудник);
        
        // Проверка, что вызов серверной функции прошел без потери соединения с основным сервером
        Если ШтрихкодыУдалены = Неопределено Тогда
            
            // Из-за недоступности основного сервера должно появиться предложение перейти в автономный режим
            Возврат;

        КонецЕсли;

        ПоказатьОповещение("Удаление штрихкодов завершено");

    КонецЕсли;

    ОбновитьФорму();

КонецПроцедуры

#КонецОбласти
#Область СлужебныеПроцедурыИФункции

#Область ВыполнениеЗаданийНаПроизводстве

// Процедура обрабатывает штрихкод.
// 
// Параметры:
//  Штрихкод - Строка
&НаКлиенте
Процедура ОбработатьШтрихкод(Штрихкод)
	
	// 1. Проверка на штрихкод операции и его инициализацию
    Если ФормаКодОперации = "<НЕ ВЫБРАНА>" Тогда

        Если СтрДлина(Штрихкод) = 10 Тогда

            ФормаКодОперации = Штрихкод;
            Возврат;

        Иначе

            ПоказатьВажноеОповещениеОбОшибке("Не является кодом операции", Штрихкод);
            Возврат;

        КонецЕсли;

    КонецЕсли;

    Если СтрДлина(Штрихкод) = 10 Тогда

        ФормаКодОперации = Штрихкод;
        Возврат

    КонецЕсли
    ;

    Если Режим = "Удаление" Тогда

        ЭтоПроцессДляКоторогоНуженКодМаркировки = ЭтоПроцессДляКоторогоНуженКодМаркировки(ФормаПроцесс);

        Если ЭтоПроцессДляКоторогоНуженКодМаркировки Тогда

            ШтрихкодИзм = ШтрихкодыКлиентСервер.ЗаменитьСпециальныеСимволыКодаМаркировки(Лев(Штрихкод, 31), "#");

        Иначе

            ШтрихкодИзм = Штрихкод
			
		КонецЕсли
        ;

        Если Не Дубликат(ФормаСотрудник, ФормаКодОперации, ШтрихкодИзм) Тогда

            ПоказатьВажноеОповещениеОбОшибке("Штрихкод не найден", Штрихкод);
            Режим = РежимПоУмолчанию();
            ФормаКодОперации = КодОперацииПоУмолчанию();
            Элементы.Подсказка.Видимость = Ложь;
            Возврат;

        КонецЕсли;

        Результат = УдалитьШтрихкодОперации(ФормаСотрудник, ФормаКодОперации, Штрихкод);

        Если Результат = Неопределено Тогда
            
            // Из-за недоступности основного сервера должно появиться предложение перейти в автономный режим
            Возврат;

        КонецЕсли;

        ПоказатьОповещение("Штрихкод удален", Штрихкод);

        ОбновитьФорму();

        Режим = РежимПоУмолчанию();
        ФормаКодОперации = КодОперацииПоУмолчанию();
        Элементы.Подсказка.Видимость = Ложь;
        Возврат

    КонецЕсли
    ;

    ОписаниеОбработкиШтрихкода = ?(Штрихкод = 31,
                                   ОбработатьШтрихкодКодаМаркировки(Штрихкод),
                                   ОбработатьПроизвольныйШтрихкод(Штрихкод));
  
    // 2. Проверка, что вызов серверной функции прошел без потери соединения с основным сервером
    Если ОписаниеОбработкиШтрихкода = Неопределено Тогда
        
        // Из-за недоступности основного сервера должно появиться предложение перейти в автономный режим
        Возврат;

    КонецЕсли;
    
    // 3.1. Оповещение об успешной обработке
    Если ЭтоКодВозвратаУспех(ОписаниеОбработкиШтрихкода.КодВозврата) Тогда

        ПоказатьВажноеОповещениеОбУспешномВыполнении("Штрихкод обработан", Штрихкод);

        ОбновитьФорму();

        ФормаКодОперации = КодОперацииПоУмолчанию();

    // 3.2. Оповещение о том, что штрихкод уже был отсканирован
    ИначеЕсли ЭтоКодВозвратаШтрихкодУжеОтсканирован(ОписаниеОбработкиШтрихкода.КодВозврата) Тогда

        ПояснениеОповещения = СтрШаблон("%1", ОписаниеОбработкиШтрихкода.ДатаПредыдущегоСканирования);

        ПоказатьВажноеОповещениеОбОшибкеДляКодаВозврата(ОписаниеОбработкиШтрихкода.КодВозврата,
                                                        "Штрихкод уже отсканирован",
                                                        ПояснениеОповещения);
                                                        
    // 3.3. Оповещение о том, что штрихкод уже был отсканирован другим сотрудником
    ИначеЕсли ЭтоКодВозвратаШтрихкодУжеОтсканированДругим(ОписаниеОбработкиШтрихкода.КодВозврата) Тогда

        ПояснениеОповещения = СтрШаблон("%1 (%2)",
                                        ОписаниеОбработкиШтрихкода.ДатаПредыдущегоСканирования,
                                        ОписаниеОбработкиШтрихкода.СотрудникПредыдущегоСканирования);

        ПоказатьВажноеОповещениеОбОшибкеДляКодаВозврата(ОписаниеОбработкиШтрихкода.КодВозврата,
                                                        "Штрихкод уже отсканирован другим",
                                                        ПояснениеОповещения);

    КонецЕсли;

КонецПроцедуры

// Функция проверяет нужно ли для данного процесса сканировать код маркировки.
// 
// Параметры:
//  Процесс - ПеречислениеСсылка.ПроцессНаПроизводстве
// 
// Возвращаемое значение:
//  Булево
&НаКлиентеНаСервереБезКонтекста
Функция ЭтоПроцессДляКоторогоНуженКодМаркировки(Знач Процесс)

    Возврат Процесс = ПредопределенноеЗначение("Перечисление.ПроцессНаПроизводстве.ПечатьЭтикеток") Или Процесс
        = ПредопределенноеЗначение("Перечисление.ПроцессНаПроизводстве.Контроль") Или Процесс
        = ПредопределенноеЗначение("Перечисление.ПроцессНаПроизводстве.ФормированиеТележки");

КонецФункции

// Процедура обрезает первые 31 символ кода маркировки и обрабатывает его.
// 
// Параметры:
//  Штрихкод - Строка
// 
// Возвращаемое значение:
//  См. Производство.НовоеОписаниеОбработкиШтрихкода
&НаСервере
Функция ОбработатьШтрихкодКодаМаркировки(Знач Штрихкод)

    КМ31 = ШтрихкодыКлиентСервер.ЗаменитьСпециальныеСимволыКодаМаркировки(Лев(Штрихкод, 31), "#");

    Возврат Производство.ОбработатьШтрихкодОперации(ФормаСотрудник, ФормаКодОперации, КМ31);

КонецФункции

// Процедура обрабатывает произвольный штрихкод.
// 
// Параметры:
//  Штрихкод - Строка
// 
// Возвращаемое значение:
//  См. Производство.НовоеОписаниеОбработкиШтрихкода
&НаСервере
Функция ОбработатьПроизвольныйШтрихкод(Знач Штрихкод)

    Возврат Производство.ОбработатьШтрихкодОперации(ФормаСотрудник, ФормаКодОперации, Штрихкод);

КонецФункции

// См. Производство.УдалитьШтрихкодОперации
// 
// Параметры:
//  Сотрудник - СправочникСсылка.СотрудникиНаПроизводстве
//  КодОперации - Строка
//  Штрихкод - Строка
// 
// Возвращаемое значение:
//  Булево - Истина (или Неопределено, если оборвалось соединение с основным сервером)
&НаСервереБезКонтекста
Функция УдалитьШтрихкодОперации(Знач Сотрудник, Знач КодОперации, Знач Штрихкод)

    Производство.УдалитьШтрихкодОперации(Сотрудник, КодОперации, Штрихкод);

    Возврат Истина;

КонецФункции

// См. Производство.УдалитьШтрихкодыОперацииСотрудника
//  
// Параметры:
//  Сотрудник - СправочникСсылка.СотрудникиНаПроизводстве
//  Процесс - ПеречислениеСсылка.ПроцессНаПроизводстве
//  
// Возвращаемое значение:
//  Булево - Истина (или Неопределено, если оборвалось соединение с основным сервером)
&НаСервереБезКонтекста
Функция УдалитьШтрихкодыОперацииСотрудника(Знач Сотрудник)

    Производство.УдалитьШтрихкодыОперацииСотрудника(Сотрудник);
    ;

    Возврат Истина;

КонецФункции

//См. Производство.КоличествоЗарегистрированныхОпераций
&НаСервереБезКонтекста
Функция КоличествоЗарегистрированныхОпераций(Знач Сотрудник)

    //@skip-check invocation-parameter-type-intersect
    Возврат Производство.КоличествоЗарегистрированныхОпераций(Сотрудник);

КонецФункции

&НаКлиенте
Функция КодОперацииПоУмолчанию()

    Возврат "<НЕ ВЫБРАНА>";

КонецФункции

&НаКлиенте
Функция РежимПоУмолчанию()

    Возврат "Добавление";

КонецФункции

&НаСервереБезКонтекста
Функция Дубликат(Знач Сотрудник, Знач КодОперации, Знач Штрихкод)

    Возврат Производство.НайтиШтрихкодОперации(Сотрудник, КодОперации, Штрихкод);

КонецФункции

#КонецОбласти

#Область ОповещенияПользователя

// Функция возвращает ключ уникальности оповещений пользователя.
// 
// Возвращаемое значение:
//  Строка
&НаКлиенте
Функция КлючУникальностиОповещенийПользователя()

    Возврат ИмяФормы;

КонецФункции

// См. ОповещенияПользователяКлиент.ПоказатьОповещение
// 
// Параметры:
//  Заголовок - Строка
//  Пояснение - Строка
&НаКлиенте
Процедура ПоказатьОповещение(Знач Заголовок, Знач Пояснение = "")

    ОповещенияПользователяКлиент.ПоказатьОповещение(Заголовок, Пояснение, КлючУникальностиОповещенийПользователя());

КонецПроцедуры

// Процедура воспроизводит звуковой сигнал, соответствующий коду возврата и 
// показывает оповещение.
// 
// Параметры:
//  Заголовок - Строка
//  Пояснение - Строка
&НаКлиенте
Процедура ПоказатьВажноеОповещениеОбУспешномВыполнении(Знач Заголовок, Знач Пояснение)

#Если МобильноеПриложениеКлиент Или МобильныйКлиент Тогда

    СредстваМультимедиаКлиент.ВоспроизвестиЗвуковоеОповещениеОбУспешномВыполнении();

#КонецЕсли

    ОповещенияПользователяКлиент.ПоказатьОповещение(Заголовок, Пояснение, КлючУникальностиОповещенийПользователя());

КонецПроцедуры

// Процедура воспроизводит звуковой сигнал об ошибке и показывает важное оповещение об ошибке.
// 
// Параметры:
//  Заголовок - Строка
//  Пояснение - Строка
&НаКлиенте
Процедура ПоказатьВажноеОповещениеОбОшибке(Знач Заголовок, Знач Пояснение)

#Если МобильноеПриложениеКлиент Или МобильныйКлиент Тогда

    СредстваМультимедиаКлиент.ВоспроизвестиЗвуковоеОповещениеОшибки();

#КонецЕсли

    ОповещенияПользователяКлиент.ПоказатьВажноеОповещениеОшибка(Заголовок,
                                                                Пояснение,
                                                                КлючУникальностиОповещенийПользователя());

КонецПроцедуры

// Процедура воспроизводит звуковой сигнал, соответствующий коду возврата и 
// показывает важное оповещение об ошибке.
// 
// Параметры:
//  КодВозврата - Число - См. КодыВозвратаСерверГлобальный
//  Заголовок - Строка
//  Пояснение - Строка
&НаКлиенте
Процедура ПоказатьВажноеОповещениеОбОшибкеДляКодаВозврата(Знач КодВозврата, Знач Заголовок, Знач Пояснение)

#Если МобильноеПриложениеКлиент Или МобильныйКлиент Тогда

    СредстваМультимедиаКлиент.ВоспроизвестиЗвуковоеОповещениеДляКодаВозврата(КодВозврата);

#КонецЕсли

    ОповещенияПользователяКлиент.ПоказатьВажноеОповещениеОшибка(Заголовок,
                                                                Пояснение,
                                                                КлючУникальностиОповещенийПользователя());

КонецПроцедуры

#КонецОбласти

#Область Форма

// Процедура обновляет количество штрихкодов.
&НаКлиенте
Процедура ОбновитьКоличествоШтрихкодов()

    ФормаКоличествоШтрихкодов = КоличествоЗарегистрированныхОпераций(ФормаСотрудник);

КонецПроцедуры

// Процедура обновляет количество штрихкодов и список штрихкодов.
&НаКлиенте
Процедура ОбновитьФорму()

    ОбновитьКоличествоШтрихкодов();

    Элементы.СписокШтрихкодов.Обновить();

КонецПроцедуры

#КонецОбласти

#КонецОбласти