// @strict-types
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

    ФормаЗадание = Параметры.Задание;
    ФормаКомплектовщик = Параметры.Комплектовщик;

    ФормаСписокЗаданийНаОтбор.Параметры.УстановитьЗначениеПараметра("Задание", ФормаЗадание);
    ФормаСписокЗаданийНаОтбор.Параметры.УстановитьЗначениеПараметра("Комплектовщик", ФормаКомплектовщик);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

    ОбновитьОстаткиПоЗаданию();

#Если МобильныйКлиент Или МобильноеПриложениеКлиент Тогда

    // Отключение видимости шапки динамического списка, чтобы сэкономить место на экране 
    Элементы.СписокЗаданийНаОтбор.Шапка = Ложь;

#КонецЕсли

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбработатьШтрихкодСФормы(Команда)

    ОбработатьШтрихкод(ФормаШтрихкод);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция возвращает ключ уникальности оповещений пользователя.
// 
// Возвращаемое значение:
//  Строка
&НаКлиенте
Функция КлючУникальностиОповещенийПользователя()

    Возврат ИмяФормы;

КонецФункции

// Процедура определяет тип штрихокда и выполняет
// его обработку в зависимости от типа.
// 
// Параметры:
//  Штрихкод - Строка
&НаКлиенте
Процедура ОбработатьШтрихкод(Штрихкод)

    Перем ОписаниеОбработкиШтрихкода; // См. КонтрольОтбора.НовоеОписаниеОбработкиШтрихкода

    // 1. Определение типа штрихкода
    Тип = ШтрихкодыКлиентСервер.ТипШтрихкода(Штрихкод);

    // 2.1. Остановить обработку, если не удалось определить тип штрихкода
    Если Тип = Неопределено Тогда

        ОповещенияПользователяКлиент.ПоказатьВажноеОповещениеОшибка("Неверный штрихкод",
                                                                    Штрихкод,
                                                                    КлючУникальностиОповещенийПользователя());
        Возврат;

    // 2.2. Обработка штрихкода короба
    ИначеЕсли Тип = ПредопределенноеЗначение("Перечисление.ТипШтрихкода.ТШК") Тогда

        ОповещенияПользователяКлиент.ПоказатьОповещение("Обработка ТШК",
                                                        Штрихкод,
                                                        КлючУникальностиОповещенийПользователя());

        ОписаниеОбработкиШтрихкода = ОбработатьШтрихкодКороба(Штрихкод);

    // 2.3. Обработка штрихкода россыпи
    ИначеЕсли Тип = ПредопределенноеЗначение("Перечисление.ТипШтрихкода.DataMatrix") Тогда

        ОповещенияПользователяКлиент.ПоказатьОповещение("Обработка КМ31",
                                                        Штрихкод,
                                                        КлючУникальностиОповещенийПользователя());

        ОписаниеОбработкиШтрихкода = ОбработатьШтрихкодРоссыпи(Штрихкод);

    КонецЕсли;
    
    // 3.1. Оповещение об успешной обработке
    Если ЭтоКодВозвратаУспех(ОписаниеОбработкиШтрихкода.КодВозврата) Тогда

        ЗаголовокОповещения = СтрШаблон("Задание на отбор %1 обработано",
                                        ОписаниеОбработкиШтрихкода.НомерЗаданияНаОтбор);
        ПояснениеОповещения = СтрШаблон("Количество %1 → %2",
                                        ОписаниеОбработкиШтрихкода.ПредыдущееКоличество,
                                        ОписаниеОбработкиШтрихкода.НовоеКоличество);

        ОповещенияПользователяКлиент.ПоказатьОповещение(ЗаголовокОповещения,
                                                        ПояснениеОповещения,
                                                        КлючУникальностиОповещенийПользователя());

        ОбновитьФорму();

    // 3.2. Оповещение о том, что задание на отбор не найдено
    ИначеЕсли ЭтоКодВозвратаНеНайденоЗаданиеНаОтборПоШтрихкоду(ОписаниеОбработкиШтрихкода.КодВозврата) Тогда

        ОповещенияПользователяКлиент.ПоказатьВажноеОповещениеОшибка("Задание на отбор не найдено",
                                                                    Штрихкод,
                                                                    КлючУникальностиОповещенийПользователя());
                                                        
    // 3.3. Оповещение о том, что задание на отбор не найдено
    ИначеЕсли ЭтоКодВозвратаСлишкомМногоВКоробе(ОписаниеОбработкиШтрихкода.КодВозврата) Тогда

        ВКоробе = ОписаниеОбработкиШтрихкода.ПредыдущееКоличество - ОписаниеОбработкиШтрихкода.НовоеКоличество;
        ПояснениеОповещения = СтрШаблон("%1 ↘ %2", ВКоробе, ОписаниеОбработкиШтрихкода.ПредыдущееКоличество);

        ОповещенияПользователяКлиент.ПоказатьВажноеОповещениеОшибка("В коробе больше чем в задании",
                                                                    ПояснениеОповещения,
                                                                    КлючУникальностиОповещенийПользователя());
                                                                    
    // 3.4. Оповещение о том, что у задания отсутствует документ на перемещение
    ИначеЕсли ЭтоКодВозвратаОтсутствуетДокументНаВнутреннееПеремещение(ОписаниеОбработкиШтрихкода.КодВозврата) Тогда

        ОповещенияПользователяКлиент.ПоказатьВажноеОповещениеОшибка("Нет документа на перемещение",
                                                                    "Возможно, в задании ошибка",
                                                                    КлючУникальностиОповещенийПользователя());
                                                                    
    // 3.5. Оповещение о том, что у штрихкод уже был проведен
    ИначеЕсли ЭтоКодВозвратаШтрихкодУжеПроведен(ОписаниеОбработкиШтрихкода.КодВозврата) Тогда

        ОповещенияПользователяКлиент.ПоказатьВажноеОповещениеОшибка("Штрихкод уже был проведен",
                                                                    Строка(ОписаниеОбработкиШтрихкода.ДатаПредыдущегоСканирования),
                                                                    КлючУникальностиОповещенийПользователя());
                                                                    
    // 3.6. Оповещение о том, что у штрихкод уже был проведен другим комплектовщиком
    ИначеЕсли ЭтоКодВозвратаШтрихкодУжеПроведенДругим(ОписаниеОбработкиШтрихкода.КодВозврата) Тогда

        ПояснениеОповещения = СтрШаблон("%1 (%2)",
                                        ОписаниеОбработкиШтрихкода.ДатаПредыдущегоСканирования,
                                        ОписаниеОбработкиШтрихкода.КомплектовщикПредыдущегоСканирования);

        ОповещенияПользователяКлиент.ПоказатьВажноеОповещениеОшибка("Штрихкод уже был проведен другим",
                                                                    ПояснениеОповещения,
                                                                    КлючУникальностиОповещенийПользователя());

    КонецЕсли;

КонецПроцедуры

// Процедура обрабатывает штрихкод короба.
// 
// Параметры:
//  Штрихкод - Строка
// 
// Возвращаемое значение:
//  См. КонтрольОтбора.НовоеОписаниеОбработкиШтрихкода
&НаСервере
Функция ОбработатьШтрихкодКороба(Знач Штрихкод)

    Возврат КонтрольОтбора.ОбработатьШтрихкодКороба(ФормаЗадание, ФормаКомплектовщик, Штрихкод);

КонецФункции

// Процедура обрабатывает штрихкод россыпи.
// 
// Параметры:
//  Штрихкод - Строка
// 
// Возвращаемое значение:
//  См. КонтрольОтбора.НовоеОписаниеОбработкиШтрихкода
&НаСервере
Функция ОбработатьШтрихкодРоссыпи(Знач Штрихкод)

    Возврат КонтрольОтбора.ОбработатьШтрихкодРоссыпи(ФормаЗадание, ФормаКомплектовщик, Штрихкод);

КонецФункции

// Процедура обновляет список заданий на отбор и, если он пуст, отображает
// задание как выполненное.
&НаКлиенте
Процедура ОбновитьФорму()

    ОбновитьОстаткиПоЗаданию();

    Элементы.СписокЗаданийНаОтбор.Обновить();

    Если ЗаданиеВыполненоДляКомплектовщика(ФормаЗадание, ФормаКомплектовщик) Тогда

        Элементы.Комплектовщик.Заголовок = "Выполнил";

        Элементы.СписокЗаданийНаОтбор.Видимость = Ложь;
        Элементы.ВводШтрихкода.Видимость = Ложь;

        Элементы.ПодсказкаЗаданиеВыполнено.Видимость = Истина;

        ОповещенияПользователяКлиент.ПоказатьВажноеОповещениеУспех("Задание выполнено",
                                                                   Строка(ФормаЗадание),
                                                                   КлючУникальностиОповещенийПользователя());

    КонецЕсли;

КонецПроцедуры

// Процедура обновляет показатели остатков по заданию на форме.
&НаКлиенте
Процедура ОбновитьОстаткиПоЗаданию()

    ОсталосьПоЗаданию = ОсталосьПоЗаданию(ФормаЗадание, ФормаКомплектовщик);
    ФормаОсталосьПоЗаданиюКоробов = ОсталосьПоЗаданию.Коробов;
    ФормаОсталосьПоЗаданиюКоробок = ОсталосьПоЗаданию.Коробок;

КонецПроцедуры

// См. КонтрольОтбора.ЗаданиеВыполненоДляКомплектовщика
&НаСервере
Функция ЗаданиеВыполненоДляКомплектовщика(Знач Задание, Знач Комплектовщик)

    Возврат КонтрольОтбора.ЗаданиеВыполненоДляКомплектовщика(Задание, Комплектовщик);

КонецФункции

// См. КонтрольОтбора.ОсталосьПоЗаданию
&НаСервере
Функция ОсталосьПоЗаданию(Знач Задание, Знач Комплектовщик)

    Возврат КонтрольОтбора.ОсталосьПоЗаданию(Задание, Комплектовщик);

КонецФункции

#КонецОбласти