// @strict-types
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

    ФормаСотрудник = Параметры.Сотрудник;

    ФормаСписокТоваров.Параметры.УстановитьЗначениеПараметра("Документ", Объект.Ссылка);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

#Если МобильноеПриложениеКлиент Или МобильныйКлиент Тогда

    Элементы.ОтправительНадпись.Видимость = Истина;
    Элементы.МагазинОтправитель.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
    Элементы.СкладОтправитель.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
    Элементы.Организация.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;

    Элементы.ПолучательНадпись.Видимость = Истина;
    Элементы.МагазинПолучатель.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
    Элементы.СкладПолучатель.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
    Элементы.ОрганизацияПолучатель.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;

    Элементы.СписокТоваров.Шапка = Ложь;

#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

    Если ВводДоступен() И ИмяСобытия = ОповещенияФормыКлиент.ИмяСобытияСканированияШтрихкода() Тогда

        Штрихкод = Строка(Параметр);

        ОбработатьШтрихкод(Штрихкод);

    КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ШтрихкодИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)

    Элементы.КнопкаОбработатьШтрихкод.Доступность = ЗначениеЗаполнено(Текст);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокТоваров

// Процедура обрабатывает выбор строки в списке товаров.
// 
// Параметры:
//  Элемент - ТаблицаФормы
//  ВыбраннаяСтрока - Число - Номер строки табличной части "Товары"
//  Поле - ПолеФормы
//  СтандартнаяОбработка - Булево
&НаКлиенте
Асинх Процедура СписокТоваровВыборАсинх(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

    Товар = Объект.Товары.Получить(ВыбраннаяСтрока - 1);
    ПредыдущееКоличество = Товар.Количество;

    КодНоменклатуры = КодНоменклатурыИзНомераТовара(Объект.Ссылка, ВыбраннаяСтрока);

    НовоеКоличество = Ждать ВвестиЧислоАсинх(ПредыдущееКоличество, КодНоменклатуры, , 3);

    Если НовоеКоличество <> Неопределено И НовоеКоличество > 0 И НовоеКоличество <> ПредыдущееКоличество Тогда

        ОбновитьКоличествоТовара(Объект.Ссылка, ВыбраннаяСтрока, НовоеКоличество);

        ОбновитьФорму();

    КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбработатьШтрихкодСФормы(Команда)

    ОбработатьШтрихкод(ФормаШтрихкод);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеПеремещенияТоваров

// Процедура обрабатывает штрихкод.
// 
// Параметры:
//  Штрихкод - Строка
&НаКлиенте
Процедура ОбработатьШтрихкод(Штрихкод)

    Перем ОписаниеОбработкиШтрихкода; // См. Перемещения.ОбработатьШтрихкодТовара
    Перем ТоварБылДобавлен; // Булево

    // 1. Оповещение пользователю о начале обработки штрихкода
    ПоказатьОповещениеОбУспешномСканировании("Обработка штрихкода", Штрихкод);
                                                    
    // 2. Обработка штрихкода
    ОписаниеОбработкиШтрихкода = ОбработатьШтрихкодТовара(Объект.Ссылка, Штрихкод, ТоварБылДобавлен);
                                              
    // 3.1. Оповещение об успешной обработке
    Если ЭтоКодВозвратаУспех(ОписаниеОбработкиШтрихкода.КодВозврата) Тогда

        ЗаголовокОповещения = СтрШаблон("Товар %1", ОписаниеОбработкиШтрихкода.НомерТовара);
        ПояснениеОповещения = СтрШаблон("Количество %1 → %2",
                                        ОписаниеОбработкиШтрихкода.ПредыдущееКоличество,
                                        ОписаниеОбработкиШтрихкода.НовоеКоличество);

        ПоказатьОповещениеПоКодуВозврата(ОписаниеОбработкиШтрихкода.КодВозврата,
                                         ЗаголовокОповещения,
                                         ПояснениеОповещения);

        ОбновитьФорму();
                                                        
    // 3.2. Оповещение о том, что не найдена номенклатура по штрихкоду товара
    ИначеЕсли ЭтоКодВозвратаНеНайденаНоменклатура(ОписаниеОбработкиШтрихкода.КодВозврата) Тогда

        ПоказатьВажноеОповещениеОбОшибкеДляКодаВозврата(ОписаниеОбработкиШтрихкода.КодВозврата,
                                                        "Номенклатура не найдена",
                                                        Штрихкод);

    КонецЕсли;

КонецПроцедуры

// См. Перемещения.ОбработатьШтрихкодТовара
//@skip-check method-param-value-type
&НаСервереБезКонтекста
Функция ОбработатьШтрихкодТовара(ПеремещениеТоваров, ШтрихкодТовара, ТоварБылДобавлен)

    Возврат Перемещения.ОбработатьШтрихкодТовара(ПеремещениеТоваров, ШтрихкодТовара, ТоварБылДобавлен);

КонецФункции

// Процедура обновляет количество товара.
// 
// Параметры:
//  ПеремещениеТоваров - ДокументСсылка.ПеремещениеТоваров
//  НомерТовара - Число
//  НовоеКоличествоТовара - Число
&НаСервереБезКонтекста
Процедура ОбновитьКоличествоТовара(Знач ПеремещениеТоваров, Знач НомерТовара, Знач НовоеКоличествоТовара)

    ПеремещениеТоваров.ПолучитьОбъект().ОбновитьКоличествоТовара(НомерТовара, НовоеКоличествоТовара);

КонецПроцедуры

// Функция достает код по номеру строки табличной части "Товары".
// Она используется для того, чтобы достать из базы данных только код,
// а не все реквизиты номенклатуры (синтаксис через точку).
// 
// Параметры:
//  ПеремещениеТоваров - ДокументСсылка.ПеремещениеТоваров
//  НомерТовара - Число - Номер строки табличной части "Товары"
// 
// Возвращаемое значение:
//  Строка 
&НаСервереБезКонтекста
Функция КодНоменклатурыИзНомераТовара(Знач ПеремещениеТоваров, Знач НомерТовара)

    Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
                          |    ВсеТовары.Номенклатура.Код КАК КодНоменклатуры
                          |ИЗ
                          |    Документ.ПеремещениеТоваров.Товары КАК ВсеТовары
                          |ГДЕ
                          |    ВсеТовары.Ссылка = &Документ
                          |    И ВсеТовары.НомерСтроки = &НомерСтроки");

    Запрос.УстановитьПараметр("Документ", ПеремещениеТоваров);
    Запрос.УстановитьПараметр("НомерСтроки", НомерТовара);

    РезультатЗапроса = Запрос.Выполнить();
    Выборка = РезультатЗапроса.Выбрать();

    Если Не Выборка.Следующий() Тогда

        Возврат Неопределено;

    КонецЕсли;
    
    //@skip-check property-return-type
    КодНоменклатуры = Выборка.КодНоменклатуры; // Строка

    Возврат КодНоменклатуры;

КонецФункции

#КонецОбласти

#Область ОповещенияПользователя

// Функция возвращает ключ уникальности оповещений пользователя.
// 
// Возвращаемое значение:
//  Строка
&НаКлиенте
Функция КлючУникальностиОповещенийПользователя()

    Возврат ИмяФормы;

КонецФункции

// Процедура воспроизводит звуковой сигнал и показывает оповещение.
// 
// Параметры:
//  Заголовок - Строка
//  Пояснение - Строка
&НаКлиенте
Процедура ПоказатьОповещениеОбУспешномСканировании(Знач Заголовок, Знач Пояснение)

#Если МобильноеПриложениеКлиент Или МобильныйКлиент Тогда

    СредстваМультимедиаКлиент.ВоспроизвестиЗвуковоеОповещениеОбУспешномСканированииШтрихкода();

#КонецЕсли

    ОповещенияПользователяКлиент.ПоказатьОповещение(Заголовок, Пояснение, КлючУникальностиОповещенийПользователя());

КонецПроцедуры

// Процедура воспроизводит звуковой сигнал, соответствующий коду возврата и 
// показывает оповещение.
// 
// Параметры:
//  КодВозврата - Число - См. КодыВозвратаСерверГлобальный
//  Заголовок - Строка
//  Пояснение - Строка
&НаКлиенте
Процедура ПоказатьОповещениеПоКодуВозврата(Знач КодВозврата, Знач Заголовок, Знач Пояснение)

#Если МобильноеПриложениеКлиент Или МобильныйКлиент Тогда

    СредстваМультимедиаКлиент.ВоспроизвестиЗвуковоеОповещениеДляКодаВозврата(КодВозврата);

#КонецЕсли

    ОповещенияПользователяКлиент.ПоказатьОповещение(Заголовок, Пояснение, КлючУникальностиОповещенийПользователя());

КонецПроцедуры

// Процедура воспроизводит звуковой сигнал, соответствующий коду возврата и 
// показывает важное оповещение об ошибке.
// 
// Параметры:
//  КодВозврата - Число - См. КодыВозвратаСерверГлобальный
//  Заголовок - Строка
//  Пояснение - Строка
&НаКлиенте
Процедура ПоказатьВажноеОповещениеОбОшибкеДляКодаВозврата(Знач КодВозврата, Знач Заголовок, Знач Пояснение)

#Если МобильноеПриложениеКлиент Или МобильныйКлиент Тогда

    СредстваМультимедиаКлиент.ВоспроизвестиЗвуковоеОповещениеДляКодаВозврата(КодВозврата);

#КонецЕсли

    ОповещенияПользователяКлиент.ПоказатьВажноеОповещениеОшибка(Заголовок,
                                                                Пояснение,
                                                                КлючУникальностиОповещенийПользователя());

КонецПроцедуры

#КонецОбласти

#Область Форма

// Процедура обновляет список товаров.
&НаКлиенте
Процедура ОбновитьФорму()
    
    // Чтение объекта из базы данных
    Прочитать();

    Элементы.СписокТоваров.Обновить();

КонецПроцедуры

#КонецОбласти

#КонецОбласти