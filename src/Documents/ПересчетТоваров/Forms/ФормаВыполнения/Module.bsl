// @strict-types
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

    ФормаДокумент = Параметры.Документ;
    ФормаВыполениеЗавершено = ВыполнениеПересчетаЗавершено(ФормаДокумент);
    ФормаСотрудник = Параметры.Сотрудник;

    ФормаСписокТоваров.Параметры.УстановитьЗначениеПараметра("Документ", ФормаДокумент);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

    ОбновитьОписаниеОтклонений();
    ОбновитьКнопкуУдаленияШтрихкодовБезНоменклатуры();

    Если ФормаВыполениеЗавершено Тогда

        ПоказатьВыполнениеЗавершено();

    КонецЕсли;

#Если МобильноеПриложениеКлиент Или МобильныйКлиент Тогда

    Элементы.Магазин.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
    Элементы.Склад.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
    Элементы.Организация.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;

    Элементы.ОписаниеОтклонений.ГоризонтальноеПоложениеПодчиненных = ГоризонтальноеПоложениеЭлемента.Центр;

    Элементы.СписокТоваров.Шапка = Ложь;

#КонецЕсли

    // Заполнение заголовка формы
    Заголовок = СтрШаблон("Выполнение: %1", ФормаДокумент);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

    Если ВводДоступен() И ИмяСобытия = ОповещенияФормыКлиент.ИмяСобытияСканированияШтрихкода() Тогда

        Штрихкод = Строка(Параметр);

        ОбработатьШтрихкодАсинх(Штрихкод);

    КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокТоваров

// Процедура предлагает удалить прогресс для товара.
// 
// Параметры:
//  Элемент - ТаблицаФормы
//  ВыбраннаяСтрока - Произвольный
//  Поле - ПолеФормы
//  СтандартнаяОбработка - Булево
&НаКлиенте
Асинх Процедура СписокТоваровВыборАсинх(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

    //@skip-check property-return-type
    Номенклатура = ВыбраннаяСтрока.Номенклатура; // СправочникСсылка.НоменклатураРозница
    
    //@skip-check property-return-type
    УникальныйИдентификаторХарактеристики = ВыбраннаяСтрока.УникальныйИдентификаторХарактеристики; // УникальныйИдентификатор
    
    //@skip-check property-return-type
    НаименованиеХарактеристики = ВыбраннаяСтрока.НаименованиеХарактеристики; // Строка

    ПредставлениеНоменклатуры = Строка(Номенклатура);

    ПредставлениеТовара = ?(ЗначениеЗаполнено(НаименованиеХарактеристики),
                            СтрШаблон("%1 (%2)", ПредставлениеНоменклатуры, НаименованиеХарактеристики),
                            ПредставлениеНоменклатуры);

    ОтветНаВопрос = Ждать ВопросАсинх(ПредставлениеТовара,
                                      РежимДиалогаВопрос.ДаНет,
                                      ,
                                      КодВозвратаДиалога.Нет,
                                      "Очистить прогресс для товара?"); // КодВозвратаДиалога

    Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда

        ПоказатьОповещение("Очистка прогресса для товара", ПредставлениеТовара);

        ОчиститьТовар(ФормаДокумент, Номенклатура, УникальныйИдентификаторХарактеристики);

        ПоказатьОповещение("Прогресс для товара очищен", ПредставлениеТовара);

        ОбновитьФорму();

    КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Асинх Процедура ОбработатьШтрихкодСФормыАсинх(Команда)

    Значение = Ждать ВвестиСтрокуАсинх(ФормаШтрихкод, "Введите штрихкод");

    Если Не ЗначениеЗаполнено(Значение) Тогда

        Возврат;

    КонецЕсли;

    ФормаШтрихкод = Значение;

    ОбработатьШтрихкодАсинх(ФормаШтрихкод);

КонецПроцедуры

&НаКлиенте
Асинх Процедура УдалитьШтрихкодБезНоменклатурыАсинх(Команда)
    
    // 1. Подготовка списка штрихкодов без номенклатуры
    СписокШтрихкодовБезНоменклатуры = ШтрихкодыБезНоменклатуры(ФормаДокумент);
    
    // Проверка, что вызов серверной функции прошел без потери соединения с основным сервером
    Если СписокШтрихкодовБезНоменклатуры = Неопределено Тогда
        
        // Из-за недоступности основного сервера должно появиться предложение перейти в автономный режим
        Возврат;

    КонецЕсли;
    
    // 2. Выбор штрихкода для удаления
    ВыбранныйЭлемент = Ждать СписокШтрихкодовБезНоменклатуры.ВыбратьЭлементАсинх("Удалить штрихкод");

    Если ВыбранныйЭлемент = Неопределено Тогда

        Возврат;

    КонецЕсли;

    ВыбранныйШтрихкод = Строка(ВыбранныйЭлемент.Значение);

    // 3. Подтверждение удаления штрихкода
    ОтветНаВопрос = Ждать ВопросАсинх(ВыбранныйШтрихкод, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, "Удалить штрихкод?"); // КодВозвратаДиалога

    Если ОтветНаВопрос <> КодВозвратаДиалога.Да Тогда

        Возврат;

    КонецЕсли;

    // 4. Удаление штрихкода
    УдалитьШтрихкодБезНоменклатуры(ФормаДокумент, ВыбранныйШтрихкод);

    // Нельзя обновлять список товаров, т.к. это вызывает ошибку на мобильном клиенте
    ОбновитьФорму(Ложь);

КонецПроцедуры

&НаКлиенте
Асинх Процедура ОчиститьШтрихкодыАсинх(Команда)

    Ответ = Ждать ВопросАсинх("Будет очищен прогресс пересчета товаров.", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, "Начать заново?"); // КодВозвратаДиалога

    Если Ответ <> КодВозвратаДиалога.Да Тогда

        Возврат;

    КонецЕсли;

    ШтрихкодовУдалено = ОчиститьШтрихкоды(ФормаДокумент);
    
        // Проверка, что вызов серверной функции прошел без потери соединения с основным сервером
    Если ШтрихкодовУдалено = Неопределено Тогда
        
        // Из-за недоступности основного сервера должно появиться предложение перейти в автономный режим
        Возврат;

    КонецЕсли;

    ПоказатьОповещение("Прогресс очищен", Строка(ШтрихкодовУдалено));

    ОбновитьФорму();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеПоступленияТоваров

// Функция определяет завершено ли заполнение.
// 
// Параметры:
//  ПересчетТоваров - ДокументСсылка.ПересчетТоваров
// 
// Возвращаемое значение:
//  Булево
&НаСервереБезКонтекста
Функция ВыполнениеПересчетаЗавершено(Знач ПересчетТоваров)

    Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
                          |    ПересчетТоваров.ПометкаУдаления КАК ВыполнениеЗавершено
                          |ИЗ
                          |    Документ.ПересчетТоваров КАК ПересчетТоваров
                          |ГДЕ
                          |    ПересчетТоваров.Ссылка = &Документ");

    Запрос.УстановитьПараметр("Документ", ПересчетТоваров);
    РезультатЗапроса = Запрос.Выполнить();
    Выборка = РезультатЗапроса.Выбрать();

    Если Не Выборка.Следующий() Тогда

        ВызватьИсключение ("Не удалось определить завершено ли выполнение");

    КонецЕсли;

    //@skip-check property-return-type
    ВыполнениеЗавершено = Выборка.ВыполнениеЗавершено; // Булево

    Возврат ВыполнениеЗавершено;

КонецФункции

// См. ИнвентаризацияТоваров.ИтогиПересчета
&НаСервереБезКонтекста
Функция ОписаниеОтклонений(Знач ПересчетТоваров)

    Возврат ИнвентаризацияТоваров.ИтогиПересчета(ПересчетТоваров);

КонецФункции

// Функция получает характеристики номенклатуры.
// 
// Параметры:
//  Штрихкод - Строка
//  ПредставлениеНоменклатуры - Строка - Выходной
// 
// Возвращаемое значение:
//  СписокЗначений из УникальныйИдентификатор
&НаКлиенте
Функция УдалитьПереопределяемыйХарактеристикиНоменклатурыПоШтрихкодуАсинх(Знач Штрихкод, ПредставлениеНоменклатуры)

    Возврат Новый СписокЗначений;

КонецФункции

// Функция определяет количество товара, которое сейчас сохранено в баще данных.
// 
// Параметры:
//  Штрихкод - Строка
//  УникальныйИдентификаторХарактеристики - УникальныйИдентификатор
// 
// Возвращаемое значение:
//  Неопределено, Число - Новое количество, положительное
&НаКлиенте
Асинх Функция УдалитьВвестиКоличествоТовараАсинх(Знач Штрихкод, Знач УникальныйИдентификаторХарактеристики)

    ИсходноеЗначение = КоличествоТовараПоШтрихкоду(ФормаДокумент, Штрихкод, УникальныйИдентификаторХарактеристики);

    НовоеЗначение = Ждать ВвестиЧислоАсинх(ИсходноеЗначение, "Введите количество", 15, 3);

    Если НовоеЗначение = Неопределено Тогда

        Возврат Неопределено;

    КонецЕсли;

    Если НовоеЗначение < 0 Тогда

        НовоеЗначение = НовоеЗначение * (-1);

    ИначеЕсли НовоеЗначение = 0 Тогда

        НовоеЗначение = 1;

    КонецЕсли;

    Возврат НовоеЗначение;

КонецФункции

// См. РегистрСведенийМенеджер.УдалитьШтрихкодыТоваровСХарактеристиками.КоличествоПоШтрихкоду
&НаСервереБезКонтекста
Функция КоличествоТовараПоШтрихкоду(Знач Документ, Знач Штрихкод, Знач УникальныйИдентификаторХарактеристики)

    Возврат РегистрыСведений.УдалитьШтрихкодыТоваровСХарактеристиками.КоличествоПоШтрихкоду(Документ,
                                                                                            Штрихкод,
                                                                                            УникальныйИдентификаторХарактеристики);

КонецФункции

// Функция определяет принадлежит ли штрихкод номенклатуре.
// 
// Параметры:
//  Штрихкод - Строка
// 
// Возвращаемое значение:
//  Булево - Истина, если номенклатура с данным штрихкодом существует
&НаСервереБезКонтекста
Функция УдалитьЭтотШтрихкодПринадлежитНоменклатуре(Знач Штрихкод)

    Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
                          |    ИСТИНА КАК Существует
                          |ИЗ
                          |    Справочник.НоменклатураРозница.Штрихкоды КАК ВсеШтрихкоды
                          |ГДЕ
                          |    ВсеШтрихкоды.Штрихкод = &Штрихкод");

    Запрос.УстановитьПараметр("Штрихкод", Штрихкод);

    РезультатЗапроса = Запрос.Выполнить();

    Возврат Не РезультатЗапроса.Пустой();

КонецФункции

// Процедуры выводит вопрос о сохранении штрихкода без номенклатуры.
// 
// Параметры:
//  Штрихкод - Строка
&НаКлиенте
Процедура УдалитьПоказатьВопросОСохраненииШтрихкодаБезНоменклатуры(Знач Штрихкод)

    ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьОтветНаВопросОСохраненииШтрихкодаБезНоменклатуры",
                                            ЭтотОбъект,
                                            Штрихкод),
                   "Номенклатура со штрихкодом не найдена, но можно будет создать новую карточку позднее.",
                   РежимДиалогаВопрос.ДаНет,
                   ,
                   КодВозвратаДиалога.Да,
                   "Сохранить штрихкод?");

КонецПроцедуры

// Процедура обрабатывает штрихкод.
// 
// Параметры:
//  Штрихкод - Строка
&НаКлиенте
Асинх Процедура ОбработатьШтрихкодАсинх(Штрихкод)

    Перем ОписаниеОбработкиШтрихкода; // См. ИнвентаризацияТоваров.ОбработатьШтрихкодТовара

    // 1. Оповещение пользователю о начале обработки штрихкода
    ПоказатьОповещение("Обработка штрихкода", Штрихкод);
    
    // 2. Проверка, что штрихкод принадлежит номенклатуре заранее (чтобы знать, нужно ли предлагать выбор характеристики)
    Если Не УдалитьЭтотШтрихкодПринадлежитНоменклатуре(Штрихкод) Тогда

        УдалитьПоказатьВопросОСохраненииШтрихкодаБезНоменклатуры(Штрихкод);
        Возврат;

    КонецЕсли;
    
    // 3. Выбор характеристики номенклатуры
    УникальныйИдентификаторХарактеристики = Неопределено;
    НаименованиеХарактеристики = Неопределено;

    ПредставлениеНоменклатуры = "";
    ХарактеристикиНоменклатуры = УдалитьПереопределяемыйХарактеристикиНоменклатурыПоШтрихкодуАсинх(Штрихкод,
                                                                                                   ПредставлениеНоменклатуры);
    Если ХарактеристикиНоменклатуры = Неопределено Тогда

        ПоказатьОповещение("Не удалось получить характеристики товара со штрихкодом", Штрихкод);
        Возврат;

    КонецЕсли;

    Если ХарактеристикиНоменклатуры.Количество() > 0 Тогда

        ВыбраннаяХарактеристика = Неопределено;

        Если ХарактеристикиНоменклатуры.Количество() = 1 Тогда

            ВыбраннаяХарактеристика = ХарактеристикиНоменклатуры[0];

        Иначе

            ВыбраннаяХарактеристика = Ждать ХарактеристикиНоменклатуры.ВыбратьЭлементАсинх(ПредставлениеНоменклатуры);

            Если ВыбраннаяХарактеристика = Неопределено Тогда
                
                // Пользователь отказался от выбора
                Возврат;

            КонецЕсли;

        КонецЕсли;

        УникальныйИдентификаторХарактеристики = ВыбраннаяХарактеристика.Значение; // УникальныйИдентификатор
        НаименованиеХарактеристики = ВыбраннаяХарактеристика.Представление;

    КонецЕсли;
    
    // 4. Ввод количества    
    КоличествоТовара = Ждать УдалитьВвестиКоличествоТовараАсинх(Штрихкод, УникальныйИдентификаторХарактеристики);

    Если КоличествоТовара = Неопределено Тогда
        
        // Пользователь отказался от ввода количества
        Возврат;

    КонецЕсли;
                                                    
    // 5.1. Обработка штрихкода
    
    // Попытка извлечь GTIN из штрихкода
    GTIN = GTINИзШтрихкода(Штрихкод);

    ОписаниеОбработкиШтрихкода =  ОбработатьШтрихкодТовара(ФормаДокумент,
                                                           ?(ЗначениеЗаполнено(GTIN), GTIN, Штрихкод),
                                                           УникальныйИдентификаторХарактеристики,
                                                           НаименованиеХарактеристики,
                                                           КоличествоТовара);       
                                   
    // 5.2. Проверка, что вызов серверной функции прошел без потери соединения с основным сервером
    Если ОписаниеОбработкиШтрихкода = Неопределено Тогда
        
        // Из-за недоступности основного сервера должно появиться предложение перейти в автономный режим
        Возврат;

    КонецЕсли;
                                              
    // 6.1. Оповещение об успешной обработке
    Если ЭтоКодВозвратаТоварНайден(ОписаниеОбработкиШтрихкода.КодВозврата) Тогда

        ПояснениеОповещения = СтрШаблон("Количество %1", ОписаниеОбработкиШтрихкода.НовоеКоличество);

        ПоказатьОповещениеПоКодуВозврата(ОписаниеОбработкиШтрихкода.КодВозврата,
                                         Строка(ОписаниеОбработкиШтрихкода.Номенклатура),
                                         ПояснениеОповещения);

        ОбновитьФорму();
                                                        
    // 6.2. Если не найдена номенклатура, предложить сохранить штрихкод без номенклатуры
    ИначеЕсли ЭтоКодВозвратаНовыйШтрихкод(ОписаниеОбработкиШтрихкода.КодВозврата) Тогда

        ПоказатьОповещениеПоКодуВозврата(ОписаниеОбработкиШтрихкода.КодВозврата, "Новый штрихкод");
        УдалитьПоказатьВопросОСохраненииШтрихкодаБезНоменклатуры(Штрихкод);

    КонецЕсли;

КонецПроцедуры

// Процедура сохраняет штрихкод без номенклатуры.
// 
// Параметры:
//  РезультатВопроса - КодВозвратаДиалога
//  ДополнительныеПараметры - Строка
&НаКлиенте
Процедура ОбработатьОтветНаВопросОСохраненииШтрихкодаБезНоменклатуры(РезультатВопроса, ДополнительныеПараметры) Экспорт

    // 1. Проверка, что пользователь не нажал кнопку "Отмена"
    Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда

        Возврат;

    КонецЕсли;

    // 2. Обработка штрихкода
    Штрихкод = ДополнительныеПараметры;
    ОписаниеОбработкиШтрихкода = ОбработатьШтрихкодБезНоменклатуры(ФормаДокумент, Штрихкод);
    
    // 3.1. Оповещение об успешной обработке
    Если ЭтоКодВозвратаУспех(ОписаниеОбработкиШтрихкода.КодВозврата) Тогда

        ПоказатьОповещение("Штрихкод без номенклатуры", ДополнительныеПараметры);

        ОбновитьФорму();
                                                        
    // 3.2. Оповещение об ошибке
    Иначе

        ПоказатьВажноеОповещениеОбОшибкеДляКодаВозврата(ОписаниеОбработкиШтрихкода.КодВозврата,
                                                        "Не удалось сохранить штрихкод без номенклатуры",
                                                        Штрихкод);

    КонецЕсли;

    ОбновитьФорму();

КонецПроцедуры

// См. ШтрихкодыКлиентСервер.GTINИзШтрихкода
&НаКлиенте
Функция GTINИзШтрихкода(Штрихкод)

    Возврат ШтрихкодыКлиентСервер.GTINИзШтрихкода(Штрихкод);

КонецФункции 

// См. ИнвентаризацияТоваров.ОбработатьШтрихкодТовара
// 
// Параметры:
//  ПересчетТоваров - ДокументСсылка.ПересчетТоваров
//  ШтрихкодТовара - Строка
//  УникальныйИдентификаторХарактеристики - УникальныйИдентификатор
//  НаименованиеХарактеристики - Строка
//  НовоеКоличество - Число
&НаСервереБезКонтекста
Функция ОбработатьШтрихкодТовара(ПересчетТоваров,
                                 ШтрихкодТовара,
                                 УникальныйИдентификаторХарактеристики,
                                 НаименованиеХарактеристики,
                                 НовоеКоличество)

    ДополнительныеПараметры = ИнвентаризацияТоваров.НовыеДополнительныеПараметрыОбработкиШтрихкода();
    ДополнительныеПараметры.УникальныйИдентификаторХарактеристики = УникальныйИдентификаторХарактеристики;
    ДополнительныеПараметры.НаименованиеХарактеристики = НаименованиеХарактеристики;
    ДополнительныеПараметры.НовоеКоличество = НовоеКоличество;

    Возврат ИнвентаризацияТоваров.ОбработатьШтрихкодТовара(ПересчетТоваров, ШтрихкодТовара, ДополнительныеПараметры);

КонецФункции

// См. ИнвентаризацияТоваров.ОбработатьШтрихкодБезНоменклатуры
&НаСервереБезКонтекста
Функция ОбработатьШтрихкодБезНоменклатуры(ПересчетТоваров, ШтрихкодБезНоменклатуры)

    Возврат ИнвентаризацияТоваров.ОбработатьШтрихкодБезНоменклатуры(ПересчетТоваров, ШтрихкодБезНоменклатуры);

КонецФункции

// См. РегистрыСведений.УдалитьШтрихкодыТоваровСХарактеристиками.УдалитьШтрихкодБезНоменклатуры
// 
// Параметры:
//  ПересчетТоваров - ДокументСсылка.ПересчетТоваров
//  ШтрихкодБезНоменклатуры - Строка
&НаСервереБезКонтекста
Процедура УдалитьШтрихкодБезНоменклатуры(Знач ПересчетТоваров, Знач ШтрихкодБезНоменклатуры)

    РегистрыСведений.УдалитьШтрихкодыТоваровСХарактеристиками.УдалитьШтрихкодБезНоменклатуры(ПересчетТоваров,
                                                                                             ШтрихкодБезНоменклатуры);

КонецПроцедуры

// См. РегистрСведенийМенеджер.УдалитьШтрихкодыТоваровСХарактеристиками.КоличествоШтрихкодовБезНоменклатуры
// 
// Параметры:
//  ПересчетТоваров - ДокументСсылка.ПересчетТоваров
//  
// Возвращаемое значение:
//  Число
&НаСервереБезКонтекста
Функция КоличествоШтрихкодовБезНоменклатуры(ПересчетТоваров)

    Возврат РегистрыСведений.УдалитьШтрихкодыТоваровСХарактеристиками.КоличествоШтрихкодовБезНоменклатуры(ПересчетТоваров);

КонецФункции

// Функция возвращает список из 50 штрихкодов без номенклатуры.
// 
// Параметры:
//  ПересчетТоваров - ДокументСсылка.ПересчетТоваров
// 
// Возвращаемое значение:
// СписокЗначений из Строка
&НаСервереБезКонтекста
Функция ШтрихкодыБезНоменклатуры(ПересчетТоваров)

    Штрихкоды = Новый СписокЗначений; // СписокЗначений из Строка

    Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 50
                          |    ВсеШтрихкоды.Штрихкод
                          |ИЗ
                          |    РегистрСведений.УдалитьШтрихкодыТоваровСХарактеристиками КАК ВсеШтрихкоды
                          |ГДЕ
                          |    ВсеШтрихкоды.Документ = &Документ
                          |    И ВсеШтрихкоды.Номенклатура = ЗНАЧЕНИЕ(Справочник.НоменклатураРозница.ПустаяСсылка)");

    Запрос.УстановитьПараметр("Документ", ПересчетТоваров);
    РезультатЗапроса = Запрос.Выполнить();
    Выборка = РезультатЗапроса.Выбрать();

    Пока Выборка.Следующий() Цикл
        
        //@skip-check property-return-type
        Штрихкод = Выборка.Штрихкод; // Строка

        Штрихкоды.Добавить(Штрихкод);

    КонецЦикла;

    Возврат Штрихкоды;

КонецФункции

// См. ИнвентаризацияТоваров.ОчиститьШтрихкоды
&НаСервереБезКонтекста
Функция ОчиститьШтрихкоды(Знач ПересчетТоваров)

    Возврат ИнвентаризацияТоваров.ОчиститьШтрихкоды(ПересчетТоваров);

КонецФункции

// См. РегистрыСведений.УдалитьШтрихкодыТоваровСХарактеристиками.УдалитьТоварСХарактеристикой
// 
// Параметры:
//  ПересчетТоваров - ДокументСсылка.ПересчетТоваров
//  Номенклатура - СправочникСсылка.НоменклатураРозница
//  УникальныйИдентификаторХарактеристики - УникальныйИдентификатор
&НаСервереБезКонтекста
Процедура ОчиститьТовар(Знач ПересчетТоваров, Знач Номенклатура, Знач УникальныйИдентификаторХарактеристики)

    РегистрыСведений.УдалитьШтрихкодыТоваровСХарактеристиками.УдалитьТоварСХарактеристикой(ПересчетТоваров,
                                                                                           Номенклатура,
                                                                                           УникальныйИдентификаторХарактеристики);

КонецПроцедуры

#КонецОбласти

#Область ОповещенияПользователя

// Функция возвращает ключ уникальности оповещений пользователя.
// 
// Возвращаемое значение:
//  Строка
&НаКлиенте
Функция КлючУникальностиОповещенийПользователя()

    Возврат ИмяФормы;

КонецФункции

// См. ОповещенияПользователяКлиент.ПоказатьОповещение
// 
// Параметры:
//  Заголовок - Строка
//  Пояснение - Строка
&НаКлиенте
Процедура ПоказатьОповещение(Знач Заголовок, Знач Пояснение = "")

    ОповещенияПользователяКлиент.ПоказатьОповещение(Заголовок, Пояснение, КлючУникальностиОповещенийПользователя());

КонецПроцедуры

// Процедура воспроизводит звуковой сигнал, соответствующий коду возврата и 
// показывает оповещение.
// 
// Параметры:
//  КодВозврата - Число - См. КодыВозвратаСерверГлобальный
//  Заголовок - Строка
//  Пояснение - Строка
&НаКлиенте
Процедура ПоказатьОповещениеПоКодуВозврата(Знач КодВозврата, Знач Заголовок, Знач Пояснение = "")

#Если МобильноеПриложениеКлиент Или МобильныйКлиент Тогда

    СредстваМультимедиаКлиент.ВоспроизвестиЗвуковоеОповещениеДляКодаВозврата(КодВозврата);

#КонецЕсли

    ОповещенияПользователяКлиент.ПоказатьОповещение(Заголовок, Пояснение, КлючУникальностиОповещенийПользователя());

КонецПроцедуры

// Процедура воспроизводит звуковой сигнал, соответствующий коду возврата и 
// показывает важное оповещение об ошибке.
// 
// Параметры:
//  КодВозврата - Число - См. КодыВозвратаСерверГлобальный
//  Заголовок - Строка
//  Пояснение - Строка
&НаКлиенте
Процедура ПоказатьВажноеОповещениеОбОшибкеДляКодаВозврата(Знач КодВозврата, Знач Заголовок, Знач Пояснение)

#Если МобильноеПриложениеКлиент Или МобильныйКлиент Тогда

    СредстваМультимедиаКлиент.ВоспроизвестиЗвуковоеОповещениеДляКодаВозврата(КодВозврата);

#КонецЕсли

    ОповещенияПользователяКлиент.ПоказатьВажноеОповещениеОшибка(Заголовок,
                                                                Пояснение,
                                                                КлючУникальностиОповещенийПользователя());

КонецПроцедуры

#КонецОбласти

#Область Форма

&НаКлиенте
Процедура ПоказатьВыполнениеЗавершено()

    Элементы.СписокТоваров.Видимость = Ложь;
    Элементы.КнопкаНачатьЗаново.Видимость = Ложь;
    Элементы.КнопкаВвестиШтрихкод.Видимость = Ложь;
    Элементы.КнопкаУдалитьШтрихкодБезНоменклатуры.Видимость = Ложь;

    Элементы.ПодсказкаВыполнениеЗавершено.Видимость = Истина;

    Элементы.Сотрудник.Заголовок = "Выполнил";

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОписаниеОтклонений()

    ОписаниеОтклонений = ОписаниеОтклонений(ФормаДокумент);

    ФормаИзлишки = ОписаниеОтклонений.Излишки;
    ФормаНедостатки = ОписаниеОтклонений.Недостатки;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКнопкуУдаленияШтрихкодовБезНоменклатуры()

    КоличествоШтрихкодовБезНоменклатуры = КоличествоШтрихкодовБезНоменклатуры(ФормаДокумент);
    
    // Проверка, что вызов серверной функции прошел без потери соединения с основным сервером
    Если КоличествоШтрихкодовБезНоменклатуры = Неопределено Тогда
        
        // Из-за недоступности основного сервера должно появиться предложение перейти в автономный режим
        Возврат;

    КонецЕсли;

    ПоказатьКнопку = КоличествоШтрихкодовБезНоменклатуры > 0;

    // Приходится скрывать поле формы с названием документа, чтобы в автономном режиме
    // не появилась полоса прокрутки
    Элементы.Документ.Видимость = Не ПоказатьКнопку;

    Элементы.КнопкаУдалитьШтрихкодБезНоменклатуры.Видимость = ПоказатьКнопку;
    Элементы.КнопкаУдалитьШтрихкодБезНоменклатуры.Заголовок = СтрШаблон("Штрихкоды без номенклатуры (%1)",
                                                                        КоличествоШтрихкодовБезНоменклатуры);

КонецПроцедуры

// Процедура обновляет список товаров и кнопку удаления штрихкодов без номенклатуры.
&НаКлиенте
Процедура ОбновитьФорму(ОбновитьСписокТоваров = Истина)

    ОбновитьОписаниеОтклонений();

    ОбновитьКнопкуУдаленияШтрихкодовБезНоменклатуры();

    Если ОбновитьСписокТоваров Тогда

        Элементы.СписокТоваров.Обновить();

    КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти