// @strict-types
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

    ФормаКомплектовщик = Параметры.Комплектовщик;

    ФормаСписокШтрихкодов.Параметры.УстановитьЗначениеПараметра("Документ", Объект.Ссылка);
    ФормаСписокШтрихкодов.Параметры.УстановитьЗначениеПараметра("Комплектовщик", ФормаКомплектовщик);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

    ОбновитьНомерЯчейки();

#Если МобильноеПриложениеКлиент Или МобильныйКлиент Тогда

    Элементы.Описание.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда; 
	
	// Скрытие некоторых заголовков, чтобы сэкономить место на экране
    Элементы.Цех.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
    Элементы.Примечание.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;

    Элементы.СписокШтрихкодов.Шапка = Ложь;

#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

    Если ВводДоступен() И ИмяСобытия = ОповещенияФормыКлиент.ИмяСобытияСканированияШтрихкода() Тогда

        Штрихкод = Строка(Параметр);

        ОбработатьШтрихкод(Штрихкод);

    КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВводШтрихкодаЗначениеИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)

    Элементы.ВводШтрихкодаКнопка.Доступность = ЗначениеЗаполнено(Текст);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокШтрихкодов

// Процедура предлагает удалить штрихкод по его номеру.
// 
// Параметры:
//  Элемент - ТаблицаФормы
//  Значение - Число - Номер строки табличной части "Штрихкоды"
//  СтандартнаяОбработка - Булево
&НаКлиенте
Асинх Процедура УдалитьШтрихкодАсинх(Элемент, Значение, СтандартнаяОбработка)

    ОтветНаВопрос = Ждать ВопросАсинх("Удалить штрихкод?",
                                      РежимДиалогаВопрос.ДаНет,
                                      ,
                                      КодВозвратаДиалога.Нет); // КодВозвратаДиалога

    Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда

        ПоказатьОповещение("Удаление штрихкода");

        Результат = УдалитьШтрихкодПоНомеру(Объект.Ссылка, Значение);
        
        // Проверка, что вызов серверной функции прошел без потери соединения с основным сервером
        Если Результат = Неопределено Тогда
            
            // Из-за недоступности основного сервера должно появиться предложение перейти в автономный режим
            Возврат;

        КонецЕсли;

        ПоказатьОповещение("Штрихкод удален");

        ОбновитьФорму();

    КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбработатьШтрихкодСФормы(Команда)

    ОбработатьШтрихкод(ФормаШтрихкод);

КонецПроцедуры

&НаКлиенте
Асинх Процедура ОчиститьШтрихкодыАсинх(Команда)

    КоличествоШтрихкодов = КоличествоШтрихкодов(Объект.Ссылка, ФормаКомплектовщик);
    
    // Проверка, что вызов серверной функции прошел без потери соединения с основным сервером
    Если КоличествоШтрихкодов = Неопределено Тогда
        
        // Из-за недоступности основного сервера должно появиться предложение перейти в автономный режим
        Возврат;

    КонецЕсли;

    Если КоличествоШтрихкодов = 0 Тогда

        ПоказатьОповещение("Штрихкоды отсутствуют");

        Возврат;

    КонецЕсли;

    ОтветНаВопрос = Ждать ВопросАсинх(СтрШаблон("Количество: %1", КоличествоШтрихкодов),
                                      РежимДиалогаВопрос.ДаНет,
                                      ,
                                      КодВозвратаДиалога.Нет,
                                      "Удалить все штрихкоды?"); // КодВозвратаДиалога

    Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда

        ПоказатьОповещение("Удаление штрихкодов");

        КоличествоУдаленныхШтрихкодов = УдалитьШтрихкодыКомплектовщика(Объект.Ссылка, ФормаКомплектовщик);
        
        // Проверка, что вызов серверной функции прошел без потери соединения с основным сервером
        Если КоличествоУдаленныхШтрихкодов = Неопределено Тогда
            
            // Из-за недоступности основного сервера должно появиться предложение перейти в автономный режим
            Возврат;

        КонецЕсли;

        ПоказатьОповещение("Удаление штрихкодов завершено", СтрШаблон("Удалено: %1", КоличествоУдаленныхШтрихкодов));

    КонецЕсли;

    ОбновитьФорму();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ВыполнениеИнвентаризацииОбуви

// Процедура обрабатывает штрихкод.
// 
// Параметры:
//  Штрихкод - Строка
&НаКлиенте
Процедура ОбработатьШтрихкод(Штрихкод)

    Перем ОписаниеОбработкиШтрихкода; // См. ИнвентаризацияОбуви.НовоеОписаниеОбработкиШтрихкода

    // 1. Определение типа штрихкода
    Тип = ШтрихкодыОбувиКлиентСервер.ТипШтрихкода(Штрихкод);

    // 2.1. Остановить обработку, если не удалось определить тип штрихкода
    Если Тип = Неопределено Тогда

        ПоказатьОповещениеОбОшибкеСканирования(Штрихкод);

        Возврат;
        
    // 2.2. Обработка штрихкода короба
    ИначеЕсли Тип = ПредопределенноеЗначение("Перечисление.ТипШтрихкода.НомерКороба") Тогда

        ПоказатьОповещениеОбУспешномСканировании(Тип, "Обработка номера короба", Штрихкод);

        Если ЯчейкаНеВыбрана() Тогда

            ПоказатьОповещениеОбОшибкеНевыбраннойЯчейки();

            Возврат;

        КонецЕсли;

        ОписаниеОбработкиШтрихкода = ОбработатьШтрихкодНомераКороба(Штрихкод);
        
    // 2.3. Обработка штрихкода кода маркировки
    ИначеЕсли Тип = ПредопределенноеЗначение("Перечисление.ТипШтрихкода.КодМаркировки") Тогда

        ПоказатьОповещениеОбУспешномСканировании(Тип, "Обработка кода маркировки", Штрихкод);

        Если ЯчейкаНеВыбрана() Тогда

            ПоказатьОповещениеОбОшибкеНевыбраннойЯчейки();

            Возврат;

        КонецЕсли;

        ОписаниеОбработкиШтрихкода = ОбработатьШтрихкодКодаМаркировки(Штрихкод);
        
    // 2.4. Обработка штрихкода номера ячейки
    ИначеЕсли Тип = ПредопределенноеЗначение("Перечисление.ТипШтрихкода.НомерЯчейки") Тогда

        ПоказатьОповещениеОбУспешномСканировании(Тип, "Обработка номера ячейки", Штрихкод);

        Результат = УстановитьНомерЯчейки(Штрихкод);
        
        // Проверка, что вызов серверной функции прошел без потери соединения с основным сервером
        Если Результат = Неопределено Тогда
            
            // Из-за недоступности основного сервера должно появиться предложение перейти в автономный режим
            Возврат;

        КонецЕсли;

        ПоказатьОповещениеОбУспешномСканировании(Тип, "Номер ячейки изменен", Штрихкод);

        ОбновитьФорму();

        Возврат;

    КонецЕсли;
    
    // 2.5. Проверка, что вызов серверной функции прошел без потери соединения с основным сервером
    Если ОписаниеОбработкиШтрихкода = Неопределено Тогда
        
        // Из-за недоступности основного сервера должно появиться предложение перейти в автономный режим
        Возврат;

    КонецЕсли;
    
    // 3.1. Оповещение об успешной обработке
    Если ЭтоКодВозвратаУспех(ОписаниеОбработкиШтрихкода.КодВозврата) Тогда

        ПоказатьОповещениеПоКодуВозврата(ОписаниеОбработкиШтрихкода.КодВозврата, "Штрихкод обработан", Штрихкод);

        ОбновитьФорму();

    // 3.2. Оповещение о том, что штрихкод уже был обработан
    ИначеЕсли ЭтоКодВозвратаШтрихкодУжеОтсканирован(ОписаниеОбработкиШтрихкода.КодВозврата) Тогда

        ПояснениеОповещения = СтрШаблон("Номер %1", ОписаниеОбработкиШтрихкода.НомерШтрихкода);

        ПоказатьВажноеОповещениеОбОшибкеДляКодаВозврата(ОписаниеОбработкиШтрихкода.КодВозврата,
                                                        "Штрихкод уже отсканирован",
                                                        ПояснениеОповещения);
                                                        
    // 3.3. Оповещение о том, что штрихкод уже был обработан другим комплектовщиком
    ИначеЕсли ЭтоКодВозвратаШтрихкодУжеОтсканированДругим(ОписаниеОбработкиШтрихкода.КодВозврата) Тогда

        ПояснениеОповещения = СтрШаблон("%1 (%2)",
                                        ОписаниеОбработкиШтрихкода.ДатаПредыдущегоСканирования,
                                        ОписаниеОбработкиШтрихкода.КомплектовщикПредыдущегоСканирования);

        ПоказатьВажноеОповещениеОбОшибкеДляКодаВозврата(ОписаниеОбработкиШтрихкода.КодВозврата,
                                                        "Штрихкод уже отсканирован другим",
                                                        ПояснениеОповещения);

    КонецЕсли;

КонецПроцедуры  

// Процедура обрабатывает штрихкод номера короба. 
// Предполагается, что номер ячейки уже заполнен.
// 
// Параметры:
//  Штрихкод - Строка
// 
// Возвращаемое значение:
//  См. ИнвентаризацияОбуви.НовоеОписаниеОбработкиШтрихкода
&НаСервере
Функция ОбработатьШтрихкодНомераКороба(Знач Штрихкод)

    Возврат ИнвентаризацияОбуви.ОбработатьШтрихкодОбуви(Объект.Ссылка, Штрихкод, ФормаКомплектовщик, ФормаНомерЯчейки);

КонецФункции

// Процедура обрезает первые 31 символ кода маркировки и обрабатывает его.
// Предполагается, что номер ячейки уже заполнен.
// 
// Параметры:
//  Штрихкод - Строка
// 
// Возвращаемое значение:
//  См. ИнвентаризацияОбуви.НовоеОписаниеОбработкиШтрихкода
&НаСервере
Функция ОбработатьШтрихкодКодаМаркировки(Знач Штрихкод)

    КМ31 = ШтрихкодыКлиентСервер.ЗаменитьСпециальныеСимволыКодаМаркировки(Лев(Штрихкод, 31), "#");

    Возврат ИнвентаризацияОбуви.ОбработатьШтрихкодОбуви(Объект.Ссылка, КМ31, ФормаКомплектовщик, ФормаНомерЯчейки);

КонецФункции

&НаКлиенте
Функция ЯчейкаНеВыбрана()

    Возврат ФормаНомерЯчейки = НомерЯчейкиПоУмолчанию();

КонецФункции

// Процедура устанавливает номер ячейки для комплектовщика.
// 
// Параметры:
//  Штрихкод - Строка
//  
// Возвращаемое значение:
//  Булево - Истина (или Неопределено, если оборвалось соединение с основным сервером)
&НаСервере
Функция УстановитьНомерЯчейки(Знач Штрихкод)

    Объект.Ссылка.ПолучитьОбъект().УстановитьНомерЯчейкиКомплектовщика(ФормаКомплектовщик, Штрихкод);

    Возврат Истина;

КонецФункции

// Процедура удаляет штрихкод с данным номером.
// 
// Параметры:
//  ИнвентаризацияСклад - ДокументСсылка.ИнвентаризацияСклад
//  НомерШтрихкода - Число
//  
// Возвращаемое значение:
//  Булево - Истина (или Неопределено, если оборвалось соединение с основным сервером)
&НаСервереБезКонтекста
Функция УдалитьШтрихкодПоНомеру(Знач ИнвентаризацияСклад, Знач НомерШтрихкода)

    ИнвентаризацияСклад.ПолучитьОбъект().УдалитьШтрихкод(НомерШтрихкода);

    Возврат Истина;

КонецФункции

// Функция удаляет все штрихкоды, обработанные текущим комплектовщиком.
//
// Параметры:
//  ИнвентаризацияСклад - ДокументСсылка.ИнвентаризацияСклад 
//  Комплектовщик - СправочникСсылка.Комплектовщики 
//
// Возвращаемое значение:
//  Число - Количество удаленных штрихкодов
&НаСервереБезКонтекста
Функция УдалитьШтрихкодыКомплектовщика(Знач ИнвентаризацияСклад, Знач Комплектовщик)

    Возврат ИнвентаризацияСклад.ПолучитьОбъект().УдалитьШтрихкодыКомплектовщика(Комплектовщик);

КонецФункции

// Процедура определяет количество штрихкодов, обработнных текущим комплектовщиком.
//
// Параметры:
//  ИнвентаризацияСклад - ДокументСсылка.ИнвентаризацияСклад
//  Комплектовщик - СправочникСсылка.Комплектовщики 
&НаСервереБезКонтекста
Функция КоличествоШтрихкодов(Знач ИнвентаризацияСклад, Знач Комплектовщик)

    Возврат ИнвентаризацияОбуви.КоличествоШтрихкодовКомплектовщика(ИнвентаризацияСклад, Комплектовщик);

КонецФункции

#КонецОбласти

#Область ОповещенияПользователя

// Функция возвращает ключ уникальности оповещений пользователя.
// 
// Возвращаемое значение:
//  Строка
&НаКлиенте
Функция КлючУникальностиОповещенийПользователя()

    Возврат ИмяФормы;

КонецФункции

// Процедура показывает оповещение.
// 
// Параметры:
//  КодВозврата - Число - См. КодыВозвратаСерверГлобальный
//  Заголовок - Строка
//  Пояснение - Строка
&НаКлиенте
Процедура ПоказатьОповещение(Знач Заголовок, Знач Пояснение = "")

    ОповещенияПользователяКлиент.ПоказатьОповещение(Заголовок, Пояснение, КлючУникальностиОповещенийПользователя());

КонецПроцедуры

// Процедура воспроизводит звуковой сигнал, соответствующий коду возврата и 
// показывает оповещение.
// 
// Параметры:
//  КодВозврата - Число - См. КодыВозвратаСерверГлобальный
//  Заголовок - Строка
//  Пояснение - Строка
&НаКлиенте
Процедура ПоказатьОповещениеПоКодуВозврата(Знач КодВозврата, Знач Заголовок, Знач Пояснение)

#Если МобильноеПриложениеКлиент Или МобильныйКлиент Тогда

    СредстваМультимедиаКлиент.ВоспроизвестиЗвуковоеОповещениеДляКодаВозврата(КодВозврата);

#КонецЕсли

    ОповещенияПользователяКлиент.ПоказатьОповещение(Заголовок, Пояснение, КлючУникальностиОповещенийПользователя());

КонецПроцедуры

// Процедура воспроизводит звуковой сигнал, соответствующий ошибке сканирования штрихкода и 
// показывает важное оповещение об ошибке.
// 
// Параметры:
//  Штрихкод - Строка
&НаКлиенте
Процедура ПоказатьОповещениеОбОшибкеСканирования(Знач Штрихкод)

#Если МобильноеПриложениеКлиент Или МобильныйКлиент Тогда

    СредстваМультимедиаКлиент.ВоспроизвестиЗвуковоеОповещениеОбОшибкеСканированияШтрихкода();

#КонецЕсли

    ОповещенияПользователяКлиент.ПоказатьОповещение("Неверный штрихкод",
                                                    Штрихкод,
                                                    КлючУникальностиОповещенийПользователя());

КонецПроцедуры

// Процедура воспроизводит звуковой сигнал, соответствующий ошибке сканирования штрихкода и 
// показывает важное оповещение об ошибке.
&НаКлиенте
Процедура ПоказатьОповещениеОбОшибкеНевыбраннойЯчейки()

#Если МобильноеПриложениеКлиент Или МобильныйКлиент Тогда

    СредстваМультимедиаКлиент.ВоспроизвестиЗвуковоеОповещениеОбОшибкеСканированияШтрихкода();

#КонецЕсли

    ОповещенияПользователяКлиент.ПоказатьОповещение("Ячейка не выбрана",
                                                    "Сначала отсканируйте номер ячейки",
                                                    КлючУникальностиОповещенийПользователя());

КонецПроцедуры

// Процедура воспроизводит звуковой сигнал, соответствующий типу штрихкода и 
// показывает оповещение.
// 
// Параметры:
//  Тип - ПеречислениеСсылка.ТипШтрихкода
//  Заголовок - Строка
//  Пояснение - Строка
&НаКлиенте
Процедура ПоказатьОповещениеОбУспешномСканировании(Знач Тип, Знач Заголовок, Знач Пояснение)

    ОповещенияПользователяКлиент.ПоказатьОповещение(Заголовок, Пояснение, КлючУникальностиОповещенийПользователя());

КонецПроцедуры

// Процедура воспроизводит звуковой сигнал, соответствующий коду возврата и 
// показывает важное оповещение об ошибке.
// 
// Параметры:
//  КодВозврата - Число - См. КодыВозвратаСерверГлобальный
//  Заголовок - Строка
//  Пояснение - Строка
&НаКлиенте
Процедура ПоказатьВажноеОповещениеОбОшибкеДляКодаВозврата(Знач КодВозврата, Знач Заголовок, Знач Пояснение)

#Если МобильноеПриложениеКлиент Или МобильныйКлиент Тогда

    СредстваМультимедиаКлиент.ВоспроизвестиЗвуковоеОповещениеДляКодаВозврата(КодВозврата);

#КонецЕсли

    ОповещенияПользователяКлиент.ПоказатьВажноеОповещениеОшибка(Заголовок,
                                                                Пояснение,
                                                                КлючУникальностиОповещенийПользователя());

КонецПроцедуры

#КонецОбласти

#Область Форма

&НаКлиенте
Функция НомерЯчейкиПоУмолчанию()

    Возврат "<НЕ ВЫБРАНА>";

КонецФункции

// Процедура обновляет номер текущей ячейки.
&НаКлиенте
Процедура ОбновитьНомерЯчейки()

    ЯчейкиКомплектовщика = Объект.ЯчейкиКомплектовщиков.НайтиСтроки(Новый Структура("Комплектовщик",
                                                                                    ФормаКомплектовщик));
    ФормаНомерЯчейки = ?(ЯчейкиКомплектовщика.Количество() > 0,
                         ЯчейкиКомплектовщика[0].НомерЯчейки,
                         НомерЯчейкиПоУмолчанию());

КонецПроцедуры

// Процедура перечитывает документ из базы данных и обновляет список штрихкодов.
&НаКлиенте
Процедура ОбновитьФорму()
    
    // Чтение объекта из базы данных
    Прочитать();

    ОбновитьНомерЯчейки();

    Элементы.СписокШтрихкодов.Обновить();

КонецПроцедуры

#КонецОбласти

#КонецОбласти