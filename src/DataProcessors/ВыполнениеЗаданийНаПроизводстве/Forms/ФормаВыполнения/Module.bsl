// @strict-types
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

    ФормаСотрудник = Параметры.Сотрудник;
    ФормаПроцесс = Параметры.Процесс;

    ФормаСписокШтрихкодов.Параметры.УстановитьЗначениеПараметра("Сотрудник", ФормаСотрудник);
    ФормаСписокШтрихкодов.Параметры.УстановитьЗначениеПараметра("Процесс", ФормаПроцесс);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

    ОбновитьКоличествоШтрихкодов();

#Если МобильноеПриложениеКлиент Или МобильныйКлиент Тогда

    Элементы.СписокШтрихкодов.Шапка = Ложь;

#КонецЕсли

    Элементы.ПодсказкаПроцесс.Заголовок = Строка(ФормаПроцесс);
    ОбновитьЦветПодсказкиПроцесса();

    Заголовок = СтрШаблон("Выполнение: %1", ФормаПроцесс);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

    Если ВводДоступен() И ИмяСобытия = ОповещенияФормыКлиент.ИмяСобытияСканированияШтрихкода() Тогда

        Штрихкод = Строка(Параметр);

        ОбработатьШтрихкод(Штрихкод);

    КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокШтрихкодов

// Процедура предлагает удалить штрихкод.
// 
// Параметры:
//  Элемент - ТаблицаФормы
//  Значение - Строка - Штрихкод
//  СтандартнаяОбработка - Булево
&НаКлиенте
Асинх Процедура УдалитьШтрихкодАсинх(Элемент, Значение, СтандартнаяОбработка)

    ОтветНаВопрос = Ждать ВопросАсинх("Удалить штрихкод?",
                                      РежимДиалогаВопрос.ДаНет,
                                      ,
                                      КодВозвратаДиалога.Нет); // КодВозвратаДиалога

    Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда

        ПоказатьОповещение("Удаление штрихкода");

        Результат = УдалитьШтрихкод(ФормаСотрудник, ФормаПроцесс, Значение);
        
        // Проверка, что вызов серверной функции прошел без потери соединения с основным сервером
        Если Результат = Неопределено Тогда
            
            // Из-за недоступности основного сервера должно появиться предложение перейти в автономный режим
            Возврат;

        КонецЕсли;

        ПоказатьОповещение("Штрихкод удален", Значение);

        ОбновитьФорму();

    КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Асинх Процедура ОбработатьШтрихкодСФормыАсинх(Команда)

    Значение = Ждать ВвестиСтрокуАсинх(ФормаШтрихкод, "Введите штрихкод");

    Если Не ЗначениеЗаполнено(Значение) Тогда

        Возврат;

    КонецЕсли;

    ФормаШтрихкод = Значение;
    ОбработатьШтрихкод(ФормаШтрихкод);

КонецПроцедуры

&НаКлиенте
Асинх Процедура ОчиститьШтрихкодыАсинх(Команда)

    КоличествоШтрихкодов = КоличествоШтрихкодов(ФормаСотрудник, ФормаПроцесс);
    
    // Проверка, что вызов серверной функции прошел без потери соединения с основным сервером
    Если КоличествоШтрихкодов = Неопределено Тогда
        
        // Из-за недоступности основного сервера должно появиться предложение перейти в автономный режим
        Возврат;

    КонецЕсли;

    Если КоличествоШтрихкодов = 0 Тогда

        ПоказатьОповещение("Штрихкоды отсутствуют");

        Возврат;

    КонецЕсли;

    ОтветНаВопрос = Ждать ВопросАсинх(СтрШаблон("Количество: %1", КоличествоШтрихкодов),
                                      РежимДиалогаВопрос.ДаНет,
                                      ,
                                      КодВозвратаДиалога.Нет,
                                      "Удалить все штрихкоды?"); // КодВозвратаДиалога

    Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда

        ПоказатьОповещение("Удаление штрихкодов");

        ШтрихкодыУдалены = УдалитьШтрихкодыСотрудника(ФормаСотрудник, ФормаПроцесс);
        
        // Проверка, что вызов серверной функции прошел без потери соединения с основным сервером
        Если ШтрихкодыУдалены = Неопределено Тогда
            
            // Из-за недоступности основного сервера должно появиться предложение перейти в автономный режим
            Возврат;

        КонецЕсли;

        ПоказатьОповещение("Удаление штрихкодов завершено");

    КонецЕсли;

    ОбновитьФорму();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ВыполнениеЗаданийНаПроизводстве

// Функция проверяет нужно ли для данного процесса сканировать каод маркировки.
// 
// Параметры:
//  Процесс - ПеречислениеСсылка.ПроцессНаПроизводстве
// 
// Возвращаемое значение:
//  Булево
&НаКлиентеНаСервереБезКонтекста
Функция ЭтоПроцессДляКоторогоНуженКодМаркировки(Знач Процесс)

    Возврат Процесс = ПредопределенноеЗначение("Перечисление.ПроцессНаПроизводстве.ПечатьЭтикеток") Или Процесс
        = ПредопределенноеЗначение("Перечисление.ПроцессНаПроизводстве.Контроль") Или Процесс
        = ПредопределенноеЗначение("Перечисление.ПроцессНаПроизводстве.ФормированиеТележки");

КонецФункции

// Процедура обрабатывает штрихкод.
// 
// Параметры:
//  Штрихкод - Строка
&НаКлиенте
Процедура ОбработатьШтрихкод(Штрихкод)

    // 1. Проверка штрихкода в зависимости от процесса
    ЭтоПроцессДляКоторогоНуженКодМаркировки = ЭтоПроцессДляКоторогоНуженКодМаркировки(ФормаПроцесс);

    Если ЭтоПроцессДляКоторогоНуженКодМаркировки Тогда
      
        // Определение типа штрихкода
        Тип = ШтрихкодыОбувиКлиентСервер.ТипШтрихкода(Штрихкод);
    
        // Остановить обработку, если это не код маркировки
        Если Тип <> ПредопределенноеЗначение("Перечисление.ТипШтрихкода.КодМаркировки") Тогда

            ПоказатьВажноеОповещениеОбОшибке("Не является кодом маркировки", Штрихкод);

            Возврат;

        КонецЕсли;

    КонецЕсли;

    // 2. Обработка штрихкода в зависимости от процесса
    ПоказатьОповещение(?(ЭтоПроцессДляКоторогоНуженКодМаркировки, "Обработка кода маркировки", "Обработка штрихкода"),
                       Штрихкод);

    ОписаниеОбработкиШтрихкода = ?(ЭтоПроцессДляКоторогоНуженКодМаркировки,
                                   ОбработатьШтрихкодКодаМаркировки(Штрихкод),
                                   ОбработатьПроизвольныйШтрихкод(Штрихкод));
  
    // 2.1. Проверка, что вызов серверной функции прошел без потери соединения с основным сервером
    Если ОписаниеОбработкиШтрихкода = Неопределено Тогда
        
        // Из-за недоступности основного сервера должно появиться предложение перейти в автономный режим
        Возврат;

    КонецЕсли;
    
    // 3.1. Оповещение об успешной обработке
    Если ЭтоКодВозвратаУспех(ОписаниеОбработкиШтрихкода.КодВозврата) Тогда

        ПоказатьВажноеОповещениеОбУспешномВыполнении("Штрихкод обработан", Штрихкод);

        ОбновитьФорму();

    // 3.2. Оповещение о том, что штрихкод уже был отсканирован
    ИначеЕсли ЭтоКодВозвратаШтрихкодУжеОтсканирован(ОписаниеОбработкиШтрихкода.КодВозврата) Тогда

        ПояснениеОповещения = СтрШаблон("%1", ОписаниеОбработкиШтрихкода.ДатаПредыдущегоСканирования);

        ПоказатьВажноеОповещениеОбОшибкеДляКодаВозврата(ОписаниеОбработкиШтрихкода.КодВозврата,
                                                        "Штрихкод уже отсканирован",
                                                        ПояснениеОповещения);
                                                        
    // 3.3. Оповещение о том, что штрихкод уже был отсканирован другим сотрудником
    ИначеЕсли ЭтоКодВозвратаШтрихкодУжеОтсканированДругим(ОписаниеОбработкиШтрихкода.КодВозврата) Тогда

        ПояснениеОповещения = СтрШаблон("%1 (%2)",
                                        ОписаниеОбработкиШтрихкода.ДатаПредыдущегоСканирования,
                                        ОписаниеОбработкиШтрихкода.СотрудникПредыдущегоСканирования);

        ПоказатьВажноеОповещениеОбОшибкеДляКодаВозврата(ОписаниеОбработкиШтрихкода.КодВозврата,
                                                        "Штрихкод уже отсканирован другим",
                                                        ПояснениеОповещения);

    КонецЕсли;

КонецПроцедуры

// Процедура обрезает первые 31 символ кода маркировки и обрабатывает его.
// 
// Параметры:
//  Штрихкод - Строка
// 
// Возвращаемое значение:
//  См. Производство.НовоеОписаниеОбработкиШтрихкода
&НаСервере
Функция ОбработатьШтрихкодКодаМаркировки(Знач Штрихкод)

    КМ31 = ШтрихкодыКлиентСервер.ЗаменитьСпециальныеСимволыКодаМаркировки(Лев(Штрихкод, 31), "#");

    Возврат Производство.ОбработатьШтрихкод(ФормаСотрудник, ФормаПроцесс, КМ31);

КонецФункции

// Процедура обрабатывает произвольный штрихкод.
// 
// Параметры:
//  Штрихкод - Строка
// 
// Возвращаемое значение:
//  См. Производство.НовоеОписаниеОбработкиШтрихкода
&НаСервере
Функция ОбработатьПроизвольныйШтрихкод(Знач Штрихкод)

    Возврат Производство.ОбработатьШтрихкод(ФормаСотрудник, ФормаПроцесс, Штрихкод);

КонецФункции

// См. Производство.УдалитьШтрихкод
//  
// Параметры:
//  Сотрудник - СправочникСсылка.СотрудникиНаПроизводстве
//  Процесс - ПеречислениеСсылка.ПроцессНаПроизводстве
//  Штрихкод - Строка
//  
// Возвращаемое значение:
//  Булево - Истина (или Неопределено, если оборвалось соединение с основным сервером)
&НаСервереБезКонтекста
Функция УдалитьШтрихкод(Знач Сотрудник, Знач Процесс, Знач Штрихкод)

    Производство.УдалитьШтрихкод(Сотрудник, Процесс, Штрихкод);

    Возврат Истина;

КонецФункции

// См. Производство.УдалитьШтрихкодыСотрудника
//  
// Параметры:
//  Сотрудник - СправочникСсылка.СотрудникиНаПроизводстве
//  Процесс - ПеречислениеСсылка.ПроцессНаПроизводстве
//  
// Возвращаемое значение:
//  Булево - Истина (или Неопределено, если оборвалось соединение с основным сервером)
&НаСервереБезКонтекста
Функция УдалитьШтрихкодыСотрудника(Знач Сотрудник, Знач Процесс)

    Производство.УдалитьШтрихкодыСотрудника(Сотрудник, Процесс);

    Возврат Истина;

КонецФункции

// См. Производство.КоличествоШтрихкодовСотрудника
//@skip-check method-param-value-type
&НаСервереБезКонтекста
Функция КоличествоШтрихкодов(Знач Комплектовщик, Знач Процесс)

    //@skip-check invocation-parameter-type-intersect
    Возврат Производство.КоличествоШтрихкодовСотрудника(Комплектовщик, Процесс);

КонецФункции

#КонецОбласти

#Область ОповещенияПользователя

// Функция возвращает ключ уникальности оповещений пользователя.
// 
// Возвращаемое значение:
//  Строка
&НаКлиенте
Функция КлючУникальностиОповещенийПользователя()

    Возврат ИмяФормы;

КонецФункции

// См. ОповещенияПользователяКлиент.ПоказатьОповещение
// 
// Параметры:
//  Заголовок - Строка
//  Пояснение - Строка
&НаКлиенте
Процедура ПоказатьОповещение(Знач Заголовок, Знач Пояснение = "")

    ОповещенияПользователяКлиент.ПоказатьОповещение(Заголовок, Пояснение, КлючУникальностиОповещенийПользователя());

КонецПроцедуры

// Процедура воспроизводит звуковой сигнал, соответствующий коду возврата и 
// показывает оповещение.
// 
// Параметры:
//  Заголовок - Строка
//  Пояснение - Строка
&НаКлиенте
Процедура ПоказатьВажноеОповещениеОбУспешномВыполнении(Знач Заголовок, Знач Пояснение)

#Если МобильноеПриложениеКлиент Или МобильныйКлиент Тогда

    СредстваМультимедиаКлиент.ВоспроизвестиЗвуковоеОповещениеОбУспешномВыполнении();

#КонецЕсли

    ОповещенияПользователяКлиент.ПоказатьОповещение(Заголовок, Пояснение, КлючУникальностиОповещенийПользователя());

КонецПроцедуры

// Процедура воспроизводит звуковой сигнал об ошибке и показывает важное оповещение об ошибке.
// 
// Параметры:
//  Заголовок - Строка
//  Пояснение - Строка
&НаКлиенте
Процедура ПоказатьВажноеОповещениеОбОшибке(Знач Заголовок, Знач Пояснение)

#Если МобильноеПриложениеКлиент Или МобильныйКлиент Тогда

    СредстваМультимедиаКлиент.ВоспроизвестиЗвуковоеОповещениеОшибки();

#КонецЕсли

    ОповещенияПользователяКлиент.ПоказатьВажноеОповещениеОшибка(Заголовок,
                                                                Пояснение,
                                                                КлючУникальностиОповещенийПользователя());

КонецПроцедуры

// Процедура воспроизводит звуковой сигнал, соответствующий коду возврата и 
// показывает важное оповещение об ошибке.
// 
// Параметры:
//  КодВозврата - Число - См. КодыВозвратаСерверГлобальный
//  Заголовок - Строка
//  Пояснение - Строка
&НаКлиенте
Процедура ПоказатьВажноеОповещениеОбОшибкеДляКодаВозврата(Знач КодВозврата, Знач Заголовок, Знач Пояснение)

#Если МобильноеПриложениеКлиент Или МобильныйКлиент Тогда

    СредстваМультимедиаКлиент.ВоспроизвестиЗвуковоеОповещениеДляКодаВозврата(КодВозврата);

#КонецЕсли

    ОповещенияПользователяКлиент.ПоказатьВажноеОповещениеОшибка(Заголовок,
                                                                Пояснение,
                                                                КлючУникальностиОповещенийПользователя());

КонецПроцедуры

#КонецОбласти

#Область Форма

// Процедура обновляет цвет надписи с именем процесса.
// Смотреть цвета кнопок на Обработка.ВыполнениеЗаданий.Форма.ФормаВыбораПроцессаНаПроизводстве.
&НаКлиенте
Процедура ОбновитьЦветПодсказкиПроцесса()

    Если ФормаПроцесс = ПредопределенноеЗначение("Перечисление.ПроцессНаПроизводстве.ПечатьЭтикеток") Тогда

        //@skip-check new-color
        Элементы.ПодсказкаПроцесс.ЦветТекста = Новый Цвет(0, 0, 0);

    ИначеЕсли ФормаПроцесс = ПредопределенноеЗначение("Перечисление.ПроцессНаПроизводстве.ПечатьЯрлыков") Тогда

        //@skip-check new-color
        Элементы.ПодсказкаПроцесс.ЦветТекста = Новый Цвет(128, 128, 128);

    ИначеЕсли ФормаПроцесс = ПредопределенноеЗначение("Перечисление.ПроцессНаПроизводстве.Контроль") Тогда

        //@skip-check new-color
        Элементы.ПодсказкаПроцесс.ЦветТекста = Новый Цвет(208, 0, 0);

    ИначеЕсли ФормаПроцесс = ПредопределенноеЗначение("Перечисление.ПроцессНаПроизводстве.ФормированиеТележки") Тогда

        //@skip-check new-color
        Элементы.ПодсказкаПроцесс.ЦветТекста = Новый Цвет(83, 106, 194);

    КонецЕсли;

КонецПроцедуры

// Процедура обновляет количество штрихкодов.
&НаКлиенте
Процедура ОбновитьКоличествоШтрихкодов()

    ФормаКоличествоШтрихкодов = КоличествоШтрихкодов(ФормаСотрудник, ФормаПроцесс);

КонецПроцедуры

// Процедура обновляет количество штрихкодов и список штрихкодов.
&НаКлиенте
Процедура ОбновитьФорму()

    ОбновитьКоличествоШтрихкодов();

    Элементы.СписокШтрихкодов.Обновить();

КонецПроцедуры

#КонецОбласти

#КонецОбласти