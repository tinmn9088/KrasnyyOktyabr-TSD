// @strict-types
#Область ПрограммныйИнтерфейс

// Функция проверяет, что задание выполнено.
// 
// Параметры:
//  Задание - ДокументСсылка.Задание
// 
// Возвращаемое значение:
//  Булево
Функция ЗаданиеВыполнено(Знач Задание) Экспорт

    Запрос = Новый Запрос("ВЫБРАТЬ
                          |    КОЛИЧЕСТВО(*) КАК Количество
                          |ИЗ
                          |    Документ.Задание.ЗаданияНаОтбор КАК ВсеЗаданияНаОтбор
                          |ГДЕ
                          |    ВсеЗаданияНаОтбор.Ссылка = &Документ
                          |    И ВсеЗаданияНаОтбор.Количество > 0");

    Запрос.УстановитьПараметр("Документ", Задание);

    РезультатЗапроса = Запрос.Выполнить();
    Выборка = РезультатЗапроса.Выбрать();
    Выборка.Следующий();
    
    //@skip-check property-return-type
    Возврат Выборка.Количество = 0;

КонецФункции

// Функция проверяет, что задание выполнено для комплектовщика.
// 
// Параметры:
//  Задание - ДокументСсылка.Задание
//  Комплектовщик - СправочникСсылка.Комплектовщики
// 
// Возвращаемое значение:
//  Булево
Функция ЗаданиеВыполненоДляКомплектовщика(Знач Задание, Знач Комплектовщик) Экспорт

    Запрос = Новый Запрос("ВЫБРАТЬ
                          |    КОЛИЧЕСТВО(*) КАК Количество
                          |ИЗ
                          |    Документ.Задание.ЗаданияНаОтбор КАК ВсеЗаданияНаОтбор
                          |ГДЕ
                          |    ВсеЗаданияНаОтбор.Ссылка = &Документ
                          |    И ВсеЗаданияНаОтбор.Комплектовщик = &Комплектовщик
                          |    И ВсеЗаданияНаОтбор.Количество > 0");

    Запрос.УстановитьПараметр("Документ", Задание);
    Запрос.УстановитьПараметр("Комплектовщик", Комплектовщик);

    РезультатЗапроса = Запрос.Выполнить();
    Выборка = РезультатЗапроса.Выбрать();
    Выборка.Следующий();
    
    //@skip-check property-return-type
    Возврат Выборка.Количество = 0;

КонецФункции

// Функция определяет, сколько комплектовщику осталось выполнить.
// 
// Параметры:
//  Задание - ДокументСсылка.Задание
//  Комплектовщик - СправочникСсылка.Комплектовщики
// 
// Возвращаемое значение:
//  См. НовоеОписаниеОстатков
Функция ОсталосьПоЗаданию(Знач Задание, Знач Комплектовщик) Экспорт

    Запрос = Новый Запрос("ВЫБРАТЬ
                          |    ВсеЗаданияНаОтбор.Модель КАК Модель,
                          |    ВсеЗаданияНаОтбор.Размер,
                          |    ВсеЗаданияНаОтбор.Количество,
                          |    ВсеЗаданияНаОтбор.Ссылка КАК ДокументЗадание
                          |ПОМЕСТИТЬ ИскомыеЗаданияНаОтбор
                          |ИЗ
                          |    Документ.Задание.ЗаданияНаОтбор КАК ВсеЗаданияНаОтбор
                          |ГДЕ
                          |    ВсеЗаданияНаОтбор.Ссылка = &Документ
                          |    И ВсеЗаданияНаОтбор.Комплектовщик = &Комплектовщик
                          |    И ВсеЗаданияНаОтбор.Количество > 0
                          |
                          |ИНДЕКСИРОВАТЬ ПО
                          |    Модель
                          |;
                          |
                          |////////////////////////////////////////////////////////////////////////////////
                          |ВЫБРАТЬ
                          |    ВЫБОР
                          |        КОГДА ИскомыеЗаданияНаОтбор.Размер <> ЗНАЧЕНИЕ(Справочник.моделиРазмер.ПустаяСсылка)
                          |            ТОГДА ИскомыеЗаданияНаОтбор.Количество
                          |        ИНАЧЕ 0
                          |    КОНЕЦ КАК Коробок,
                          |    ВЫБОР
                          |        КОГДА ИскомыеЗаданияНаОтбор.Размер = ЗНАЧЕНИЕ(Справочник.моделиРазмер.ПустаяСсылка)
                          |            ТОГДА ИскомыеЗаданияНаОтбор.Количество / (Модели.КолВКоробе * (1 + Модели.флДваКороба))
                          |        ИНАЧЕ 0
                          |    КОНЕЦ КАК Коробов,
                          |    ИскомыеЗаданияНаОтбор.ДокументЗадание
                          |ПОМЕСТИТЬ Количества
                          |ИЗ
                          |    ИскомыеЗаданияНаОтбор КАК ИскомыеЗаданияНаОтбор
                          |        ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Модели КАК Модели
                          |        ПО ИскомыеЗаданияНаОтбор.Модель = Модели.Ссылка
                          |;
                          |
                          |////////////////////////////////////////////////////////////////////////////////
                          |ВЫБРАТЬ
                          |    СУММА(Количества.Коробок) КАК Коробок,
                          |    СУММА(Количества.Коробов) КАК Коробов
                          |ИЗ
                          |    Количества КАК Количества
                          |СГРУППИРОВАТЬ ПО
                          |    Количества.ДокументЗадание");

    Запрос.УстановитьПараметр("Документ", Задание);
    Запрос.УстановитьПараметр("Комплектовщик", Комплектовщик);

    РезультатЗапроса = Запрос.Выполнить();
    Выборка = РезультатЗапроса.Выбрать();

    ОписаниеОстатков = НовоеОписаниеОстатков();

    Если Выборка.Следующий() Тогда
        
        //@skip-check property-return-type
        Коробов = Выборка.Коробов; // Число
        //@skip-check property-return-type
        Коробок = Выборка.Коробок; // Число

        ОписаниеОстатков.Коробов = Коробов;
        ОписаниеОстатков.Коробок = Коробок;

    КонецЕсли;

    Возврат ОписаниеОстатков;

КонецФункции

// Функция извлекает GTIN из штрихкода, определяет процент уценки,
// уменьшает значение реквизита "Количество" в табличной части "ЗаданияНаОтбор",
// записывает штрихкод в документ "ВнПеремОтпуск" и возвращает описание обработки.
// 
// Параметры:
//  Задание - ДокументСсылка.Задание
//  Комплектовщик - СправочникСсылка.Комплектовщики - Комплектовщик, выполняющий задание
//  Штрихкод - Строка
//
// Возвращаемое значение:
//  См. НовоеОписаниеОбработкиШтрихкода
Функция ОбработатьШтрихкодРоссыпи(Знач Задание, Знач Комплектовщик, Знач Штрихкод) Экспорт

    НачатьТранзакцию();

    Попытка

        ОписаниеОбработкиШтрихкода = НовоеОписаниеОбработкиШтрихкода();
        
        // 1. Назначение комплектовщику выполняемого задания
        Комплектовщик.ПолучитьОбъект().НазначитьВыполняемоеЗадание(Задание);
        ЗаданиеОбъект = Задание.ПолучитьОбъект();
        ЗаданиеОбъект.НачатьВыполнение();
        
        // 2. Извлечение кода маркировки из штрихкода
        КодМаркировки = Сред(Штрихкод, 1, 31);
        
        // 3. Получение GTIN
        GTIN = Сред(КодМаркировки, 4, 13);

        Если ЭтоУпрощенныйGTIN(GTIN) Тогда

            GTIN = РеальныйGTINПоКодуМаркировки(КодМаркировки);

        КонецЕсли;
    
        // 4. Получение процента уценки
        ПроцентУценки = ПроцентУценкиПоКодуМаркировки(КодМаркировки);

        // 5. Поиск задания на отбор
        Запрос = Новый Запрос("ВЫБРАТЬ
                              |    ВсеЗаданияНаОтбор.Модель КАК Модель,
                              |    ВсеЗаданияНаОтбор.Размер,
                              |    ВсеЗаданияНаОтбор.Модификатор,
                              |    ВсеЗаданияНаОтбор.Цвет,
                              |    ВсеЗаданияНаОтбор.НомерСтроки
                              |ПОМЕСТИТЬ ИскомыеЗаданияНаОтбор
                              |ИЗ
                              |    Документ.Задание.ЗаданияНаОтбор КАК ВсеЗаданияНаОтбор
                              |ГДЕ
                              |    ВсеЗаданияНаОтбор.Ссылка = &Документ
                              |    И ВсеЗаданияНаОтбор.Комплектовщик = &Комплектовщик
                              |    И ВсеЗаданияНаОтбор.Уценка = &ПроцентУценки
                              |    И ВсеЗаданияНаОтбор.Размер <> ЗНАЧЕНИЕ(Справочник.моделиРазмер.ПустаяСсылка)
                              |    И ВсеЗаданияНаОтбор.Количество > 0
                              |;
                              |
                              |////////////////////////////////////////////////////////////////////////////////
                              |ВЫБРАТЬ
                              |    ИскомыеЗаданияНаОтбор.НомерСтроки
                              |ИЗ
                              |    ИскомыеЗаданияНаОтбор КАК ИскомыеЗаданияНаОтбор
                              |        ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.моделиEAH13 КАК моделиEAH13
                              |        ПО ИскомыеЗаданияНаОтбор.Модель = моделиEAH13.Владелец
                              |        И ИскомыеЗаданияНаОтбор.Размер = моделиEAH13.Размер
                              |        И ИскомыеЗаданияНаОтбор.Модификатор = моделиEAH13.Кожтовар
                              |        И ИскомыеЗаданияНаОтбор.Цвет = моделиEAH13.Цвет
                              |ГДЕ
                              |    моделиEAH13.Код = &GTIN");

        Запрос.УстановитьПараметр("Документ", Задание);
        Запрос.УстановитьПараметр("Комплектовщик", Комплектовщик);
        Запрос.УстановитьПараметр("ПроцентУценки", ПроцентУценки);
        Запрос.УстановитьПараметр("GTIN", GTIN);

        РезультатЗапроса = Запрос.Выполнить();
        Выборка = РезультатЗапроса.Выбрать();
    
        // 6. Проверка, что удалось найти задание на отбор
        Если Не Выборка.Следующий() Тогда

            ОтменитьТранзакцию();

            ЗаписатьОшибкуОбработкиШтрихкодаРоссыпи(КодМаркировки,
                                                    Задание,
                                                    Комплектовщик,
                                                    Перечисления.ВидОшибкиКонтроляОтбора.НеНайденоЗаданиеНаОтборПоШтрихкоду);
            ОписаниеОбработкиШтрихкода.КодВозврата = КодВозвратаНеНайденоЗаданиеНаОтборПоШтрихкоду();

            Возврат ОписаниеОбработкиШтрихкода;

        КонецЕсли;
        
        // 6. Уменьшение количества в задании на отбор
        //@skip-check property-return-type
        НомерЗаданияНаОтбор = Выборка.НомерСтроки; // Число
        ОписаниеОбработкиШтрихкода.НомерЗаданияНаОтбор = НомерЗаданияНаОтбор;

        ПредыдущееКоличество = ЗаданиеОбъект.УменьшитьКоличество(НомерЗаданияНаОтбор);

        ОписаниеОбработкиШтрихкода.ПредыдущееКоличество = ПредыдущееКоличество;
        ОписаниеОбработкиШтрихкода.НовоеКоличество = ПредыдущееКоличество - 1;
        
        // 7. Проверка на отсутствие документа на перемещение и запись в него штрихкода
        //@skip-check reading-attribute-from-database
        ДокументНаПеремещение = ДокументНаПеремещение(Задание);

        Если Не ЗначениеЗаполнено(ДокументНаПеремещение) Тогда

            ОтменитьТранзакцию();

            ЗаписатьОшибкуОбработкиШтрихкодаРоссыпи(КодМаркировки,
                                                    Задание,
                                                    Комплектовщик,
                                                    Перечисления.ВидОшибкиКонтроляОтбора.ОтсутствуетДокументНаПеремещение);
            ОписаниеОбработкиШтрихкода.КодВозврата = КодВозвратаОтсутствуетДокументНаВнутреннееПеремещение();

            Возврат ОписаниеОбработкиШтрихкода;

        КонецЕсли;

        ДокументНаПеремещение.ПолучитьОбъект().ЗаписатьКодМаркировки(КодМаркировки);
        
        // 8. Попытка записать штрихкод в регистр проведенных штрихкодов
        Если Не ПровестиШтрихкод(Штрихкод, Задание, НомерЗаданияНаОтбор, Комплектовщик, ОписаниеОбработкиШтрихкода) Тогда

            ОтменитьТранзакцию();

            ЗаписатьОшибкуПроведенияШтрихкода(ОписаниеОбработкиШтрихкода.КодВозврата, Штрихкод, Задание, Комплектовщик);

            Возврат ОписаниеОбработкиШтрихкода;

        КонецЕсли;

        // 9. Фиксация транзакции
        ЗафиксироватьТранзакцию();
        
        // 10. Создание документа выполнения задания в случае, если задание выполнено
        Если ЗаданиеВыполнено(Задание) Тогда

            Задание.ПолучитьОбъект().Закрыть();
            Документы.ВыполнениеЗадания.СоздатьВыполненоеЗадание(ДокументНаПеремещение);

        КонецЕсли;

        // 11. Возврат результата
        Возврат ОписаниеОбработкиШтрихкода;

    Исключение

        ОтменитьТранзакцию();
        ВызватьИсключение;

    КонецПопытки;

КонецФункции

// Функция уменьшает значение реквизита "Количество" в табличной части "ЗаданияНаОтбор"
// на определнное число, которое зависит от модели, с которой связан штрихкод,
// записывает штрихкод в документ "ВнПеремОтпуск" и возвращает описание обработки.
// 
// Параметры:
//  Задание - ДокументСсылка.Задание
//  Комплектовщик - СправочникСсылка.Комплектовщики - Комплектовщик, выполняющий задание
//  Штрихкод - Строка
//
// Возвращаемое значение:
//  См. НовоеОписаниеОбработкиШтрихкода
Функция ОбработатьШтрихкодКороба(Знач Задание, Знач Комплектовщик, Знач Штрихкод) Экспорт

    НачатьТранзакцию();

    Попытка

        ОписаниеОбработкиШтрихкода = НовоеОписаниеОбработкиШтрихкода();
        
        // 1. Назначение комплектовщику выполняемого задания
        Комплектовщик.ПолучитьОбъект().НазначитьВыполняемоеЗадание(Задание);
        ЗаданиеОбъект = Задание.ПолучитьОбъект();
        ЗаданиеОбъект.НачатьВыполнение();
        
        // 2. Извлечение номера короба из штрихкода
        НомерКороба = Штрихкод;

        // 3. Поиск задания на отбор
        Запрос = Новый Запрос("ВЫБРАТЬ
                              |    ВсеЗаданияНаОтбор.Модель,
                              |    ВсеЗаданияНаОтбор.Модификатор,
                              |    ВсеЗаданияНаОтбор.Цвет,
                              |    ВсеЗаданияНаОтбор.НомерСтроки
                              |ПОМЕСТИТЬ ИскомыеЗаданияНаОтбор
                              |ИЗ
                              |    Документ.Задание.ЗаданияНаОтбор КАК ВсеЗаданияНаОтбор
                              |ГДЕ
                              |    ВсеЗаданияНаОтбор.Ссылка = &Документ
                              |    И ВсеЗаданияНаОтбор.Комплектовщик = &Комплектовщик
                              |    И ВсеЗаданияНаОтбор.Размер = ЗНАЧЕНИЕ(Справочник.моделиРазмер.ПустаяСсылка)
                              |    И ВсеЗаданияНаОтбор.Количество > 0
                              |;
                              |
                              |////////////////////////////////////////////////////////////////////////////////
                              |ВЫБРАТЬ
                              |    ИскомыеЗаданияНаОтбор.НомерСтроки,
                              |    ТШККороб.Модель.КолВКоробе * (1 + ТШККороб.Модель.флДваКороба) КАК ВычестьКоличество
                              |ИЗ
                              |    ИскомыеЗаданияНаОтбор КАК ИскомыеЗаданияНаОтбор
                              |        ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТШККороб КАК ТШККороб
                              |        ПО ИскомыеЗаданияНаОтбор.Модель = ТШККороб.Модель
                              |        И ИскомыеЗаданияНаОтбор.Модификатор = ТШККороб.Кожтовар
                              |        И ИскомыеЗаданияНаОтбор.Цвет = ТШККороб.Цвет
                              |ГДЕ
                              |    ТШККороб.Код = &НомерКороба");

        Запрос.УстановитьПараметр("Документ", Задание);
        Запрос.УстановитьПараметр("Комплектовщик", Комплектовщик);
        Запрос.УстановитьПараметр("НомерКороба", НомерКороба);

        РезультатЗапроса = Запрос.Выполнить();
        Выборка = РезультатЗапроса.Выбрать();

        // 4. Проверка, что удалось найти задание на отбор
        Если Не Выборка.Следующий() Тогда

            ОтменитьТранзакцию();

            ЗаписатьОшибкуОбработкиШтрихкодаКороба(НомерКороба,
                                                   Задание,
                                                   Комплектовщик,
                                                   Перечисления.ВидОшибкиКонтроляОтбора.НеНайденоЗаданиеНаОтборПоШтрихкоду);
            ОписаниеОбработкиШтрихкода.КодВозврата = КодВозвратаНеНайденоЗаданиеНаОтборПоШтрихкоду();

            Возврат ОписаниеОбработкиШтрихкода;

        КонецЕсли;
          
        // 5. Уменьшение количества у задания на отбор  
        //@skip-check property-return-type
        НомерЗаданияНаОтбор = Выборка.НомерСтроки; // Число
        ОписаниеОбработкиШтрихкода.НомерЗаданияНаОтбор = НомерЗаданияНаОтбор;
            
        //@skip-check property-return-type
        ВычестьКоличество = Выборка.ВычестьКоличество; // Число    

        ПредыдущееКоличество = ЗаданиеОбъект.КоличествоВЗаданииНаОтбор(НомерЗаданияНаОтбор);
        ОписаниеОбработкиШтрихкода.ПредыдущееКоличество = ПредыдущееКоличество;
            
        // 5.1. Проверка, что после уменьшения количества оно не станет отрицательным
        Если ВычестьКоличество > ПредыдущееКоличество Тогда

            ОтменитьТранзакцию();

            ЗаписатьОшибкуОбработкиШтрихкодаКороба(НомерКороба,
                                                   Задание,
                                                   Комплектовщик,
                                                   Перечисления.ВидОшибкиКонтроляОтбора.СлишкомМногоВКоробе);
            ОписаниеОбработкиШтрихкода.НовоеКоличество = ПредыдущееКоличество - ВычестьКоличество;
            ОписаниеОбработкиШтрихкода.КодВозврата = КодВозвратаСлишкомМногоВКоробе();

            Возврат ОписаниеОбработкиШтрихкода;

        КонецЕсли;

        НовоеКоличество = ПредыдущееКоличество - ВычестьКоличество;
        ЗаданиеОбъект.УстановитьКоличество(НомерЗаданияНаОтбор, НовоеКоличество);
        ОписаниеОбработкиШтрихкода.НовоеКоличество = НовоеКоличество;

        // 6. Проверка на наличие документа на перемещение и запись в него штрихкода
        //@skip-check reading-attribute-from-database
        ДокументНаПеремещение = ДокументНаПеремещение(Задание);

        Если Не ЗначениеЗаполнено(ДокументНаПеремещение) Тогда

            ОтменитьТранзакцию();

            ЗаписатьОшибкуОбработкиШтрихкодаКороба(НомерКороба,
                                                   Задание,
                                                   Комплектовщик,
                                                   Перечисления.ВидОшибкиКонтроляОтбора.ОтсутствуетДокументНаПеремещение);
            ОписаниеОбработкиШтрихкода.КодВозврата = КодВозвратаОтсутствуетДокументНаВнутреннееПеремещение();

            Возврат ОписаниеОбработкиШтрихкода;

        КонецЕсли;

        ДокументНаПеремещение.ПолучитьОбъект().ЗаписатьНомерКороба(НомерКороба);
        
        // 7. Попытка записать штрихкода в регистр проведенных штрихкодов
        Если Не ПровестиШтрихкод(Штрихкод, Задание, НомерЗаданияНаОтбор, Комплектовщик, ОписаниеОбработкиШтрихкода) Тогда

            ОтменитьТранзакцию();

            ЗаписатьОшибкуПроведенияШтрихкода(ОписаниеОбработкиШтрихкода.КодВозврата, Штрихкод, Задание, Комплектовщик);

            Возврат ОписаниеОбработкиШтрихкода;

        КонецЕсли;

        // 8. Фиксация транзакции
        ЗафиксироватьТранзакцию();
        
        // 9. Создание документа выполнения задания в случае, если задание выполнено
        Если ЗаданиеВыполнено(Задание) Тогда

            Задание.ПолучитьОбъект().Закрыть();
            Документы.ВыполнениеЗадания.СоздатьВыполненоеЗадание(ДокументНаПеремещение);

        КонецЕсли;

        // 10. Возврат результата
        Возврат ОписаниеОбработкиШтрихкода;

    Исключение

        ОтменитьТранзакцию();
        ВызватьИсключение;

    КонецПопытки;

КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Функция создает описание обработки штрихкода.
// 
// Возвращаемое значение:
//  Структура - Описание обработки штрихкода:
// * КодВозврата - Число - Код, указывающий на результат обработки штрихкода
// * НомерЗаданияНаОтбор - Неопределено, Число - Номер строки табличной части "ЗаданияНаОтбор" документа "Задание",
//                                               которой соответствовал обрабатываемый штрихкод
// * ПредыдущееКоличество - Неопределено, Число - Значение реквизита "Количество" до обработки штрихкода
// * НовоеКоличество - Неопределено, Число - Значение реквизита "Количество" после обработки штрихкода
// * ДатаПредыдущегоСканирования - Неопределено, Дата - Дата предыдущего сканирования, если штрихкод уже был отсканирован
// * КомплектовщикПредыдущегоСканирования - Неопределено, СправочникСсылка.Комплектовщики - Комплектовщие предыдущего 
//                                                                                          сканирования, если штрихкод уже был
//                                                                                          отсканирован другим комплектовщиком
Функция НовоеОписаниеОбработкиШтрихкода() Экспорт

    ОписаниеОбработкиШтрихкода = Новый Структура;

    ОписаниеОбработкиШтрихкода.Вставить("КодВозврата", КодВозвратаУспех());
    ОписаниеОбработкиШтрихкода.Вставить("НомерЗаданияНаОтбор", Неопределено);
    ОписаниеОбработкиШтрихкода.Вставить("ПредыдущееКоличество", Неопределено);
    ОписаниеОбработкиШтрихкода.Вставить("НовоеКоличество", Неопределено);
    ОписаниеОбработкиШтрихкода.Вставить("ДатаПредыдущегоСканирования", Неопределено);
    ОписаниеОбработкиШтрихкода.Вставить("КомплектовщикПредыдущегоСканирования", Неопределено);

    Возврат ОписаниеОбработкиШтрихкода;

КонецФункции

// Функция создает описание того, сколько осталось выполнить по заданию.
// 
// Возвращаемое значение:
//  Структура:
// * Коробов - Число 
// * Коробок - Число
Функция НовоеОписаниеОстатков() Экспорт

    Возврат Новый Структура("Коробов, Коробок", 0, 0);

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция проверяет, что GTIN является упрощенным.
// 
// Параметры:
//  GTIN - Строка
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоУпрощенныйGTIN(GTIN)

    Возврат GTIN = "4814130000030";

КонецФункции

// Функция возвращает реальный GTIN, соответствующий коду маркировки с упрощенным GTIN.
// 
// Параметры:
//  КодМаркировкиСУспрощеннымGTIN - Строка
// 
// Возвращаемое значение:
//  Строка - Реальный GTIN или пустая строка
Функция РеальныйGTINПоКодуМаркировки(КодМаркировкиСУспрощеннымGTIN)

    Запрос = Новый Запрос("ВЫБРАТЬ
                          |    КМ31.GTIN КАК GTIN
                          |ИЗ
                          |    Справочник.КМ31 КАК КМ31
                          |ГДЕ
                          |    КМ31.Код = &КМ31");

    Запрос.УстановитьПараметр("КМ31", КодМаркировкиСУспрощеннымGTIN);

    РезультатЗапроса = Запрос.Выполнить();
    Выборка = РезультатЗапроса.Выбрать();

    Если Выборка.Следующий() Тогда
        
        //@skip-check property-return-type
        Возврат Выборка.GTIN;

    Иначе

        // Возрат значения по умолчанию
        Возврат "";

    КонецЕсли;

КонецФункции

// Функция возвращает процент уценки, соответствующий коду маркировки.
// 
// Параметры:
//  КодМаркировки - Строка
// 
// Возвращаемое значение:
//  Число
Функция ПроцентУценкиПоКодуМаркировки(КодМаркировки)

    Запрос = Новый Запрос("ВЫБРАТЬ
                          |    КМ31.ПроцентУценки КАК ПроцентУценки
                          |ИЗ
                          |    Справочник.КМ31 КАК КМ31
                          |ГДЕ
                          |    КМ31.Код = &КМ31");

    Запрос.УстановитьПараметр("КМ31", КодМаркировки);

    РезультатЗапроса = Запрос.Выполнить();
    Выборка = РезультатЗапроса.Выбрать();

    Если Выборка.Следующий() Тогда
        
        //@skip-check property-return-type
        Возврат Выборка.ПроцентУценки;

    Иначе

        // Возрат значения по умолчанию
        Возврат 0;

    КонецЕсли;

КонецФункции

// Функция возвращает значение реквзита "ДокументНаПеремещение".
// 
// Параметры:
//  Задание - ДокументСсылка.Задание
// 
// Возвращаемое значение:
//  ДокументСсылка.ВнПеремОтпуск
Функция ДокументНаПеремещение(Знач Задание)

    Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
                          |    Задание.ДокументНаПеремещение
                          |ИЗ
                          |    Документ.Задание КАК Задание
                          |ГДЕ
                          |    Задание.Ссылка = &Документ");

    Запрос.УстановитьПараметр("Документ", Задание);

    РезультатЗапроса = Запрос.Выполнить();
    Выборка = РезультатЗапроса.Выбрать();

    Если Не Выборка.Следующий() Тогда

        Возврат Документы.ВнПеремОтпуск.ПустаяСсылка();

    КонецЕсли;
    
    //@skip-check property-return-type
    ДокументНаПеремещение = Выборка.ДокументНаПеремещение; // ДокументСсылка.ВнПеремОтпуск

    Возврат ДокументНаПеремещение;

КонецФункции

// Функция совершает попытку записать штрихкод в регистр проведенных штрихкодов и,
// если попытка не удается, заполняет описание обработки штрихкода информацией
// об ошибке и записывает информацию о ней в журнал ошибок.
// 
// Параметры:
//  Штрихкод - Строка
//  Задание - ДокументСсылка.Задание
//  НомерЗаданияНаОтбор - Число
//  Комплектовщик - СправочникСсылка.Комплектовщики
//  ОписаниеОбработкиШтрихкода - См. НовоеОписаниеОбработкиШтрихкода
// 
// Возвращаемое значение:
//  Булево
Функция ПровестиШтрихкод(Знач Штрихкод,
                         Знач Задание,
                         Знач НомерЗаданияНаОтбор,
                         Знач Комплектовщик,
                         ОписаниеОбработкиШтрихкода)

    // 1. Попытка записать штрихкод в регистр проведенных штрихкодов
    Если РегистрыСведений.ШтрихкодыКонтроляОтбора.ПровестиШтрихкод(Штрихкод,
                                                                              Задание,
                                                                              НомерЗаданияНаОтбор,
                                                                              Комплектовщик) Тогда

        Возврат Истина;

    Иначе

        // 2. Если попытка не удалась, попытка получить информацию об уже проведенном штрихкоде
        ОписаниеПроведенияШтрихкода = РегистрыСведений.ШтрихкодыКонтроляОтбора.НайтиПоШтрихкоду(Штрихкод);

        Если ОписаниеПроведенияШтрихкода <> Неопределено Тогда

            // 2.1. Проверка, кем уже был проведен штрихкод
            Если ОписаниеПроведенияШтрихкода.Комплектовщик = Комплектовщик Тогда

                ОписаниеОбработкиШтрихкода.КодВозврата = КодВозвратаШтрихкодУжеПроведен();
                ОписаниеОбработкиШтрихкода.ДатаПредыдущегоСканирования = ОписаниеПроведенияШтрихкода.Дата;

            Иначе

                ОписаниеОбработкиШтрихкода.КодВозврата = КодВозвратаШтрихкодУжеПроведенДругим();
                ОписаниеОбработкиШтрихкода.ДатаПредыдущегоСканирования = ОписаниеПроведенияШтрихкода.Дата;
                ОписаниеОбработкиШтрихкода.КомплектовщикПредыдущегоСканирования = ОписаниеПроведенияШтрихкода.Комплектовщик;

            КонецЕсли;

        Иначе

            ОписаниеОбработкиШтрихкода.КодВозврата = КодВозвратаОшибкаПроверкиПроведенияШтрихкода();

        КонецЕсли;

        Возврат Ложь;

    КонецЕсли;

КонецФункции

// Процедура записывает ошибку об обработке штрихкода россыпи.
// 
// Параметры:
//  КодМаркировки - Строка
//  Задание - ДокументСсылка.Задание
//  Комплектовщик - СправочникСсылка.Комплектовщики
//  ВидОшибки - ПеречислениеСсылка.ВидОшибкиКонтроляОтбора
Процедура ЗаписатьОшибкуОбработкиШтрихкодаРоссыпи(Знач КодМаркировки, Знач Задание, Знач Комплектовщик, Знач ВидОшибки)

    РегистрыСведений.ЖурналОшибокКонтроляОтбора.ЗаписатьОшибку(Задание,
                                                               Комплектовщик,
                                                               Перечисления.ВидОшибкиКонтроляОтбора.НеНайденоЗаданиеНаОтборПоШтрихкоду,
                                                               ,
                                                               ,
                                                               КодМаркировки);

КонецПроцедуры

// Процедура записывает ошибку об обработке штрихкода короба.
// 
// Параметры:
//  НомерКороба - Строка
//  Задание - ДокументСсылка.Задание
//  Комплектовщик - СправочникСсылка.Комплектовщики
//  ВидОшибки - ПеречислениеСсылка.ВидОшибкиКонтроляОтбора
Процедура ЗаписатьОшибкуОбработкиШтрихкодаКороба(Знач НомерКороба, Знач Задание, Знач Комплектовщик, Знач ВидОшибки)

    РегистрыСведений.ЖурналОшибокКонтроляОтбора.ЗаписатьОшибку(Задание,
                                                               Комплектовщик,
                                                               Перечисления.ВидОшибкиКонтроляОтбора.НеНайденоЗаданиеНаОтборПоШтрихкоду,
                                                               ,
                                                               НомерКороба);

КонецПроцедуры

// Процедура записывает ошибку о проведении штрихкода в зависимости от типа штрихкода в журнал ошибок.
// 
// Параметры:
//  КодВозврата - Число
//  Штрихкод - Строка
//  Задание - ДокументСсылка.Задание
//  Комплектовщик - СправочникСсылка.Комплектовщики
Процедура ЗаписатьОшибкуПроведенияШтрихкода(Знач КодВозврата, Знач Штрихкод, Знач Задание, Знач Комплектовщик)

    // Определение вида ошибки по коду возврата
    ВидОшибки = Перечисления.ВидОшибкиКонтроляОтбора.ПустаяСсылка();

    Если КодВозврата = КодВозвратаШтрихкодУжеПроведен() Тогда

        ВидОшибки = Перечисления.ВидОшибкиКонтроляОтбора.ШтрихкодУжеПроведен;

    ИначеЕсли КодВозврата = КодВозвратаШтрихкодУжеПроведенДругим() Тогда

        ВидОшибки = Перечисления.ВидОшибкиКонтроляОтбора.ШтрихкодУжеПроведенДругим;

    КонецЕсли;

    // Определение типа штрихкода
    Тип = ШтрихкодыОбувиКлиентСервер.ТипШтрихкода(Штрихкод);

    // Запись в журнал ошибок в зависимости от типа штрихкода
    Если Тип = Перечисления.ТипШтрихкода.ТШК Тогда

        РегистрыСведений.ЖурналОшибокКонтроляОтбора.ЗаписатьОшибку(Задание, Комплектовщик, ВидОшибки, , Штрихкод);

    ИначеЕсли Тип = Перечисления.ТипШтрихкода.КодМаркировки Тогда

        РегистрыСведений.ЖурналОшибокКонтроляОтбора.ЗаписатьОшибку(Задание, Комплектовщик, ВидОшибки, , , Штрихкод);

    КонецЕсли;

КонецПроцедуры

#КонецОбласти