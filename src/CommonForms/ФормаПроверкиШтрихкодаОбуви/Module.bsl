// @strict-types
#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)

    Элементы.ПодсказкаВведитеШтрихкодНадпись.Заголовок = ?(ВнешниеКомпонентыКлиент.НастроеноСканированиеШтрихкодов(),
                                                           "Введите или отсканируйте штрихкод",
                                                           "Введите штрихкод");

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

    Если ВводДоступен() И ИмяСобытия = ОповещенияФормыКлиент.ИмяСобытияСканированияШтрихкода() Тогда

        Штрихкод = Строка(Параметр);

        ОбработатьШтрихкод(Штрихкод);

    КонецЕсли

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Асинх Процедура ОбработатьШтрихкодСФормыАсинх(Команда)

    Значение = Ждать ВвестиСтрокуАсинх(ФормаШтрихкод, "Введите штрихкод");

    Если Не ЗначениеЗаполнено(Значение) Тогда

        Возврат;

    КонецЕсли;

    ФормаШтрихкод = Значение;

    ОбработатьШтрихкод(ФормаШтрихкод);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура обрабатывает штрихкод.
// 
// Параметры:
//  Штрихкод - Строка
&НаКлиенте
Процедура ОбработатьШтрихкод(Штрихкод)

    Перем ОписаниеОшибки; // Неопределено, Строка

    ПоказатьОповещение("Обработка штрихкода", Штрихкод);
    
    // 1. Определение типа штрихкода
    ФормаТипШтрихкода = ШтрихкодыОбувиКлиентСервер.ТипШтрихкода(Штрихкод);
    
    // 2. Получение свойств кода маркировки
    Если ФормаТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипШтрихкода.КодМаркировки") Тогда

        ЗагрузитьСвойстваШтрихкода(СвойстваКодаМаркировки(Штрихкод, ОписаниеОшибки));
    
    // 3. Получение свойств ТШК
    ИначеЕсли ФормаТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипШтрихкода.ТШК") Тогда

        ЗагрузитьСвойстваШтрихкода(СвойстваТШК(Штрихкод, ОписаниеОшибки));
    
    // 4. Получение свойств номера короба
    ИначеЕсли ФормаТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипШтрихкода.НомерКороба") Тогда

        ЗагрузитьСвойстваШтрихкода(СвойстваНомераКороба(Штрихкод, ОписаниеОшибки));
    
    // 5. Получение свойств номера ячейки
    ИначеЕсли ФормаТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипШтрихкода.НомерЯчейки") Тогда

        ЗагрузитьСвойстваШтрихкода(СвойстваНомераЯчейки(Штрихкод, ОписаниеОшибки));

    Иначе

        УстановитьВидимостьСвойствШтрихкода(Ложь);
        ПоказатьВажноеОповещениеОбОшибке("Неизвестный тип штрихкода");
        Возврат;

    КонецЕсли;
        
    // Обновление видимости реквизитов формы с описанием штрихкода
    УстановитьВидимостьСвойствШтрихкода(ЗначениеЗаполнено(ФормаСвойстваШтрихкода));

    Если Не ЗначениеЗаполнено(ОписаниеОшибки) Тогда

        ВоспроизвестиЗвуковоеОповещениеОбУспешномВыполнении();

    Иначе

        ПоказатьВажноеОповещениеОбОшибке("Не удалось проверить штрихкод", Строка(ОписаниеОшибки));

    КонецЕсли;

КонецПроцедуры

// Добавить свойство.
// 
// Параметры:
//  Свойства - СписокЗначений из Произвольный
//  Имя - Строка
//  Значение - Произвольный
&НаСервереБезКонтекста
Процедура ДобавитьСвойство(Свойства, Имя, Значение)
    
    //@skip-check typed-value-adding-to-untyped-collection
    Свойства.Добавить(Значение, Имя);

КонецПроцедуры

// Функция определяет свойства кода маркировки.
// 
// Параметры:
//  КодМаркировки - Строка
//  ОписаниеОшибки - Неопределено, Строка - Выходной
// 
// Возвращаемое значение:
//  СписокЗначений из Произвольный
//@skip-check method-param-value-type
&НаСервереБезКонтекста
Функция СвойстваКодаМаркировки(Знач КодМаркировки, ОписаниеОшибки = Неопределено)

    Свойства = Новый СписокЗначений;

    // 1. Длина штрихкода
    ДобавитьСвойство(Свойства, "Длина штрихкода", СтрДлина(КодМаркировки));
    КМ31 = Сред(КодМаркировки, 1, 31);
 
    // 2. GTIN
    GTIN = Сред(КМ31, 4, 13);
    ЭтоУпрощенныйGTIN = КонтрольОтбора.ЭтоУпрощенныйGTIN(GTIN);
    ДобавитьСвойство(Свойства, "Упрощенный GTIN", ЭтоУпрощенныйGTIN);

    Если ЭтоУпрощенныйGTIN Тогда

        GTIN = КонтрольОтбора.РеальныйGTINПоКодуМаркировки(КМ31);

    КонецЕсли;

    ДобавитьСвойство(Свойства, "GTIN", GTIN);

    // 3. Процента уценки
    ПроцентУценки = КонтрольОтбора.ПроцентУценкиПоКодуМаркировки(КМ31);
    ДобавитьСвойство(Свойства, "Процент уценки", ПроцентУценки);
    
    // 4. Свойства модели
    Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
                          |    моделиEAH13.Владелец,
                          |    моделиEAH13.Размер,
                          |    моделиEAH13.Кожтовар,
                          |    моделиEAH13.Цвет
                          |ИЗ
                          |    Справочник.моделиEAH13 КАК моделиEAH13
                          |ГДЕ
                          |    моделиEAH13.Код = &Код");

    Запрос.УстановитьПараметр("Код", GTIN);
    РезультатЗапроса = Запрос.Выполнить();
    Выборка = РезультатЗапроса.Выбрать();

    Если Выборка.Следующий() Тогда
        
        //@skip-check property-return-type
        Модель = Выборка.Владелец; // СправочникСсылка.Модели
        //@skip-check property-return-type
        Размер = Выборка.Размер; // СправочникСсылка.моделиРазмер
        //@skip-check property-return-type
        Кожтовар = Выборка.Кожтовар; // СправочникСсылка.моделиКожтовар
        //@skip-check property-return-type
        Цвет = Выборка.Цвет; // СправочникСсылка.моделиЦвет

        ДобавитьСвойство(Свойства, "Модель", Модель);
        ДобавитьСвойство(Свойства, "Размер", Размер);
        ДобавитьСвойство(Свойства, "Кожтовар", Кожтовар);
        ДобавитьСвойство(Свойства, "Цвет", Цвет);

    Иначе

        ОписаниеОшибки = СтрШаблон("Не удалось найти модель '%1'", GTIN);

    КонецЕсли;

    Возврат Свойства;

КонецФункции

// Функция определяет свойства ТШК.
// 
// Параметры:
//  ТШК - Строка
//  ОписаниеОшибки - Неопределено, Строка - Выходной
// 
// Возвращаемое значение:
//  СписокЗначений из Произвольный
//@skip-check method-param-value-type
&НаСервереБезКонтекста
Функция СвойстваТШК(Знач ТШК, ОписаниеОшибки = Неопределено)

    Свойства = Новый СписокЗначений;

    // 1. Длина штрихкода
    ДобавитьСвойство(Свойства, "Длина штрихкода", СтрДлина(ТШК));

    Возврат Свойства;

КонецФункции

// Функция определяет свойства номера короба.
// 
// Параметры:
//  НомерКороба - Строка
//  ОписаниеОшибки - Неопределено, Строка - Выходной
// 
// Возвращаемое значение:
//  СписокЗначений из Произвольный
//@skip-check method-param-value-type
&НаСервереБезКонтекста
Функция СвойстваНомераКороба(Знач НомерКороба, ОписаниеОшибки = Неопределено)

    Свойства = Новый СписокЗначений;

    // 1. Длина штрихкода
    ДобавитьСвойство(Свойства, "Длина штрихкода", СтрДлина(НомерКороба));
    
    // 2. Свойства модели
    Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
                          |    ТШККороб.Модель,
                          |    ТШККороб.Модель.КолВКоробе КАК КолВКоробе,
                          |    ТШККороб.Модель.ДваКороба КАК ДваКороба,
                          |    ТШККороб.Кожтовар,
                          |    ТШККороб.Цвет
                          |ИЗ
                          |    Справочник.ТШККороб КАК ТШККороб
                          |ГДЕ
                          |    ТШККороб.Код = &Код");

    Запрос.УстановитьПараметр("Код", НомерКороба);
    РезультатЗапроса = Запрос.Выполнить();
    Выборка = РезультатЗапроса.Выбрать();

    Если Выборка.Следующий() Тогда

        //@skip-check property-return-type
        Модель = Выборка.Модель; // СправочникСсылка.Модели
        //@skip-check property-return-type
        КоличествоВКоробе = Выборка.КолВКоробе; // Число
        //@skip-check property-return-type
        ДваКороба = Выборка.ДваКороба; // Булево
        //@skip-check property-return-type
        Кожтовар = Выборка.Кожтовар; // СправочникСсылка.моделиКожтовар
        //@skip-check property-return-type
        Цвет = Выборка.Цвет; // СправочникСсылка.моделиЦвет

        ДобавитьСвойство(Свойства, "Модель", Модель);
        ДобавитьСвойство(Свойства, "Количество в коробе", КоличествоВКоробе);
        ДобавитьСвойство(Свойства, "Два короба", ДваКороба);
        ДобавитьСвойство(Свойства, "Кожтовар", Кожтовар);
        ДобавитьСвойство(Свойства, "Цвет", Цвет);

    Иначе

        ОписаниеОшибки = СтрШаблон("Не удалось найти короб '%1'", НомерКороба);

    КонецЕсли;

    Возврат Свойства;

КонецФункции

// Функция определяет свойства номера ячейки.
// 
// Параметры:
//  НомерЯчейки - Строка
//  ОписаниеОшибки - Неопределено, Строка - Выходной
// 
// Возвращаемое значение:
//  СписокЗначений из Произвольный
//@skip-check method-param-value-type
&НаСервереБезКонтекста
Функция СвойстваНомераЯчейки(Знач НомерЯчейки, ОписаниеОшибки = Неопределено)

    Свойства = Новый СписокЗначений;

    // 1. Длина штрихкода
    ДобавитьСвойство(Свойства, "Длина штрихкода", СтрДлина(НомерЯчейки));

    Возврат Свойства;

КонецФункции

#Область ОповещенияПользователя

// Функция возвращает ключ уникальности оповещений пользователя.
// 
// Возвращаемое значение:
//  Строка
&НаКлиенте
Функция КлючУникальностиОповещенийПользователя()

    Возврат ИмяФормы;

КонецФункции

// См. ОповещенияПользователяКлиент.ПоказатьОповещение
// 
// Параметры:
//  Заголовок - Строка
//  Пояснение - Строка
&НаКлиенте
Процедура ПоказатьОповещение(Знач Заголовок, Знач Пояснение)

    ОповещенияПользователяКлиент.ПоказатьОповещение(Заголовок, Пояснение, КлючУникальностиОповещенийПользователя());

КонецПроцедуры

// Процедура воспроизводит звуковой сигнал об ошибке и показывает важное оповещение об ошибке.
// 
// Параметры:
//  Заголовок - Строка
//  Пояснение - Строка
&НаКлиенте
Процедура ПоказатьВажноеОповещениеОбОшибке(Знач Заголовок, Знач Пояснение = "")

#Если МобильноеПриложениеКлиент Или МобильныйКлиент Тогда

    СредстваМультимедиаКлиент.ВоспроизвестиЗвуковоеОповещениеОшибки();

#КонецЕсли

    ОповещенияПользователяКлиент.ПоказатьВажноеОповещениеОшибка(Заголовок,
                                                                Пояснение,
                                                                КлючУникальностиОповещенийПользователя());

КонецПроцедуры

&НаКлиенте
Процедура ВоспроизвестиЗвуковоеОповещениеОбУспешномВыполнении()

#Если МобильноеПриложениеКлиент Или МобильныйКлиент Тогда

    СредстваМультимедиаКлиент.ВоспроизвестиЗвуковоеОповещениеОбУспешномВыполнении();

#КонецЕсли

КонецПроцедуры

#КонецОбласти

#Область Форма

// Процедуры изменяет видимость реквизитов формы с описанием штрихкода.
// 
// Параметры:
//  Видимость - Булево
&НаКлиенте
Процедура УстановитьВидимостьСвойствШтрихкода(Видимость)

    Элементы.ПодсказкаВведитеШтрихкод.Видимость = Не Видимость;

    Элементы.ТипШтрихкода.Видимость = Видимость;
    Элементы.СвойстваШтрихкода.Видимость = Видимость;

КонецПроцедуры

// Процедура заполняет свойства штрихкода на форме значениями из списка.
// 
// Параметры:
//  СписокСвойствШтрихкода - СписокЗначений из Произвольный
&НаКлиенте
Процедура ЗагрузитьСвойстваШтрихкода(СписокСвойствШтрихкода)

    ФормаСвойстваШтрихкода.Очистить();

    Для Каждого ЭлементСпискаСвойствШтрихкода Из СписокСвойствШтрихкода Цикл

        СвойствоШтрихкода = ФормаСвойстваШтрихкода.Добавить();
        СвойствоШтрихкода.Имя = ЭлементСпискаСвойствШтрихкода.Представление;
        СвойствоШтрихкода.Значение = Строка(ЭлементСпискаСвойствШтрихкода.Значение);

    КонецЦикла;

КонецПроцедуры

#КонецОбласти

#КонецОбласти