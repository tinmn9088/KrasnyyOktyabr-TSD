// @strict-types
#Область ПрограммныйИнтерфейс

// Функция проверяет, что запись со штрихкодом отсутсвует в регистре сведений.
// 
// Параметры:
//  Штрихкод - Строка
// 
// Возвращаемое значение:
//  Булево - Истина, если запись со штрихкодом найдена
Функция ШтриходУжеПроведен(Знач Штрихкод) Экспорт
    
    // Удаление специальных символов кода маркировки, которые могут поломать регистр сведений
    ШтрихкодыКлиентСервер.Сериализовать(Штрихкод);

    Запрос = Новый Запрос("ВЫБРАТЬ
                          |    КОЛИЧЕСТВО(*) КАК Количество
                          |ИЗ
                          |    РегистрСведений.ШтрихкодыКонтроляОтбора КАК ПроведенныеШтрихкодыКонтроляОтбора
                          |ГДЕ
                          |    ПроведенныеШтрихкодыКонтроляОтбора.Штрихкод = &Штрихкод");

    Запрос.УстановитьПараметр("Штрихкод", Штрихкод);

    РезультатЗапроса = Запрос.Выполнить();
    Выборка = РезультатЗапроса.Выбрать();
    Выборка.Следующий();
    
    //@skip-check property-return-type
    Количество = Выборка.Количество; // Число

    Возврат Количество <> 0;

КонецФункции

// Функция производит поиск по штрихкоду.
// 
// Параметры:
//  Штрихкод - Строка
// 
// Возвращаемое значение:
// Неопределено, Структура - Результат поиска:
// * Дата - Дата
// * Задание - ДокументСсылка.Задание
// * НомерЗаданияНаОтбор - Число
// * Комплектовщик - СправочникСсылка.Комплектовщики
Функция НайтиПоШтрихкоду(Знач Штрихкод) Экспорт
    
    // Удаление специальных символов кода маркировки, которые могут поломать регистр сведений
    ШтрихкодыКлиентСервер.Сериализовать(Штрихкод);

    Запрос = Новый Запрос("ВЫБРАТЬ
                          |    ПроведенныеШтрихкодыКонтроляОтбора.Штрихкод,
                          |    ПроведенныеШтрихкодыКонтроляОтбора.Дата,
                          |    ПроведенныеШтрихкодыКонтроляОтбора.Задание,
                          |    ПроведенныеШтрихкодыКонтроляОтбора.НомерЗаданияНаОтбор,
                          |    ПроведенныеШтрихкодыКонтроляОтбора.Комплектовщик
                          |ИЗ
                          |    РегистрСведений.ШтрихкодыКонтроляОтбора КАК ПроведенныеШтрихкодыКонтроляОтбора
                          |ГДЕ
                          |    ПроведенныеШтрихкодыКонтроляОтбора.Штрихкод = &Штрихкод");

    Запрос.УстановитьПараметр("Штрихкод", Штрихкод);

    РезультатЗапроса = Запрос.Выполнить();

    Выборка = РезультатЗапроса.Выбрать();

    Если Выборка.Следующий() Тогда

        //@skip-check property-return-type
        Дата = Выборка.Дата; // Дата
        //@skip-check property-return-type
        Задание = Выборка.Задание; // ДокументСсылка.Задание
        //@skip-check property-return-type
        НомерЗаданияНаОтбор = Выборка.НомерЗаданияНаОтбор; // Число
        //@skip-check property-return-type
        Комплектовщик = Выборка.Комплектовщик; // СправочникСсылка.Комплектовщики

        Результат = Новый Структура;

        Результат.Вставить("Дата", Дата);
        Результат.Вставить("Задание", Задание);
        Результат.Вставить("НомерЗаданияНаОтбор", НомерЗаданияНаОтбор);
        Результат.Вставить("Комплектовщик", Комплектовщик);

        Возврат Результат;

    Иначе

        Возврат Неопределено;

    КонецЕсли;

КонецФункции

// Процедура проверяет, что в регистре нет записи с переданным штрихкодом
// и добавляет новую запись.
// 
// Параметры:
//  Штрихкод - Строка
//  Задание - ДокументСсылка.Задание
//  НомерЗаданияНаОтбор - Число
//  Комплектовщик - СправочникСсылка.Комплектовщики
//
// Возвращаемое значение:
//  Булево - Истина, если запись со штрихкодом добавлена
Функция ПровестиШтрихкод(Знач Штрихкод, Знач Задание, Знач НомерЗаданияНаОтбор, Знач Комплектовщик) Экспорт

    // Удаление специальных символов кода маркировки, которые могут поломать регистр сведений
    ШтрихкодыКлиентСервер.Сериализовать(Штрихкод);

    Если ШтриходУжеПроведен(Штрихкод) Тогда

        Возврат Ложь;

    КонецЕсли;

    Запись = СоздатьМенеджерЗаписи();

    Запись.Штрихкод = Штрихкод;
    Запись.Дата = ТекущаяДатаСеанса();
    Запись.Задание = Задание;
    Запись.НомерЗаданияНаОтбор = НомерЗаданияНаОтбор;
    Запись.Комплектовщик = Комплектовщик;

    Запись.Записать();

    Возврат Истина;

КонецФункции

#КонецОбласти