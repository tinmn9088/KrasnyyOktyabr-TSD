// @strict-types
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

    ФормаСотрудник = Параметры.Сотрудник;

    ФормаСписокТоваров.Параметры.УстановитьЗначениеПараметра("Документ", Объект.Ссылка);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

    Если Объект.ЗаполнениеЗавершено Тогда

        ПоказатьЗаполнениеЗавершено();

    КонецЕсли;

#Если МобильноеПриложениеКлиент Или МобильныйКлиент Тогда

    Элементы.ПоставщикНадпись.Видимость = Истина;
    Элементы.Контрагент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;

    Элементы.ПолучательНадпись.Видимость = Истина;
    Элементы.Магазин.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
    Элементы.Склад.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;

    Элементы.СписокТоваров.Шапка = Ложь;

#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

    Если ВводДоступен() И ИмяСобытия = ОповещенияФормыКлиент.ИмяСобытияСканированияШтрихкода() Тогда

        Штрихкод = Строка(Параметр);

        ОбработатьШтрихкод(Штрихкод);

    КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ШтрихкодИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)

    Элементы.КнопкаОбработатьШтрихкод.Доступность = ЗначениеЗаполнено(Текст);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокТоваров

// Процедура обрабатывает выбор строки в списке товаров.
// 
// Параметры:
//  Элемент - ТаблицаФормы
//  ВыбраннаяСтрока - Число - Номер строки табличной части "Товары"
//  Поле - ПолеФормы
//  СтандартнаяОбработка - Булево
&НаКлиенте
Асинх Процедура СписокТоваровВыборАсинх(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

    Товар = Объект.Товары.Получить(ВыбраннаяСтрока - 1);
    ПредыдущееКоличество = Товар.Количество;

    КодНоменклатуры = КодНоменклатурыЧерезНомерТовара(Объект.Ссылка, ВыбраннаяСтрока);

    НовоеКоличество = Ждать ВвестиЧислоАсинх(ПредыдущееКоличество, КодНоменклатуры, , 3);

    Если НовоеКоличество <> Неопределено И НовоеКоличество <> ПредыдущееКоличество Тогда

        Если НовоеКоличество > 0 Тогда

            ОбновитьКоличествоТовара(Объект.Ссылка, ВыбраннаяСтрока, НовоеКоличество);

        Иначе

            УдалитьТовар(Объект.Ссылка, ВыбраннаяСтрока);

            ОповещенияПользователяКлиент.ПоказатьОповещение(СтрШаблон("Товар %1", ВыбраннаяСтрока),
                                                            "Удален",
                                                            КлючУникальностиОповещенийПользователя());

        КонецЕсли;

        ОбновитьФорму();

    КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбработатьШтрихкодСФормы(Команда)

    ОбработатьШтрихкод(ФормаШтрихкод);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеПоступленияТоваров

// Процедура обрабатывает штрихкод.
// 
// Параметры:
//  Штрихкод - Строка
&НаКлиенте
Процедура ОбработатьШтрихкод(Штрихкод)
    
    // 1. Оповещение пользователю о начале обработки штрихкода
    ПоказатьОповещениеОбУспешномСканировании("Обработка штрихкода", Штрихкод);

КонецПроцедуры

// Функция достает код по номеру строки табличной части "Товары".
// Она используется для того, чтобы достать из базы данных только код,
// а не все реквизиты номенклатуры (синтаксис через точку).
// 
// Параметры:
//  ПоступлениеТоваров - ДокументСсылка.ПоступлениеТоваров
//  НомерТовара - Число - Номер строки табличной части "Товары"
// 
// Возвращаемое значение:
//  Строка 
&НаСервереБезКонтекста
Функция КодНоменклатурыЧерезНомерТовара(Знач ПоступлениеТоваров, Знач НомерТовара)

    Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
                          |    ВсеТовары.Номенклатура.Код КАК КодНоменклатуры
                          |ИЗ
                          |    Документ.ПоступлениеТоваров.Товары КАК ВсеТовары
                          |ГДЕ
                          |    ВсеТовары.Ссылка = &Документ
                          |    И ВсеТовары.НомерСтроки = &НомерСтроки");

    Запрос.УстановитьПараметр("Документ", ПоступлениеТоваров);
    Запрос.УстановитьПараметр("НомерСтроки", НомерТовара);

    РезультатЗапроса = Запрос.Выполнить();
    Выборка = РезультатЗапроса.Выбрать();

    Если Не Выборка.Следующий() Тогда

        Возврат Неопределено;

    КонецЕсли;
    
    //@skip-check property-return-type
    КодНоменклатуры = Выборка.КодНоменклатуры; // Строка

    Возврат КодНоменклатуры;

КонецФункции

// Процедура обновляет количество товара по номеру строки в табличной части.
// 
// Параметры:
//  ПоступлениеТоваров - ДокументСсылка.ПоступлениеТоваров
//  НомерТовара - Число
//  НовоеКоличествоТовара - Число
&НаСервереБезКонтекста
Процедура ОбновитьКоличествоТовара(Знач ПоступлениеТоваров, Знач НомерТовара, Знач НовоеКоличествоТовара)

    ПоступлениеТоваров.ПолучитьОбъект().ОбновитьКоличествоТовара(НомерТовара, НовоеКоличествоТовара);

КонецПроцедуры

// Процедура удаляет товар из табличной части по номеру.
// 
// Параметры:
//  ПоступлениеТоваров - ДокументСсылка.ПоступлениеТоваров
//  НомерТовара - Число
&НаСервереБезКонтекста
Процедура УдалитьТовар(Знач ПоступлениеТоваров, Знач НомерТовара)

    ПоступлениеТоваров.ПолучитьОбъект().УдалитьТовар(НомерТовара);

КонецПроцедуры

#КонецОбласти

#Область ОповещенияПользователя

// Функция возвращает ключ уникальности оповещений пользователя.
// 
// Возвращаемое значение:
//  Строка
&НаКлиенте
Функция КлючУникальностиОповещенийПользователя()

    Возврат ИмяФормы;

КонецФункции

// Процедура воспроизводит звуковой сигнал и показывает оповещение.
// 
// Параметры:
//  Заголовок - Строка
//  Пояснение - Строка
&НаКлиенте
Процедура ПоказатьОповещениеОбУспешномСканировании(Знач Заголовок, Знач Пояснение)

#Если МобильноеПриложениеКлиент Или МобильныйКлиент Тогда

    СредстваМультимедиаКлиент.ВоспроизвестиЗвуковоеОповещениеОбУспешномСканированииШтрихкода();

#КонецЕсли

    ОповещенияПользователяКлиент.ПоказатьОповещение(Заголовок, Пояснение, КлючУникальностиОповещенийПользователя());

КонецПроцедуры

#КонецОбласти

#Область Форма

&НаКлиенте
Процедура ПоказатьЗаполнениеЗавершено()

    Элементы.СписокТоваров.Видимость = Ложь;
    Элементы.ВводШтрихкода.Видимость = Ложь;

    Элементы.ПодсказкаЗаполнениеЗавершено.Видимость = Истина;

    Элементы.Сотрудник.Заголовок = "Заполнил";

КонецПроцедуры

// Процедура перечитывает документ из базы данных и обновляет список товаров.
&НаКлиенте
Процедура ОбновитьФорму()
    
    // Чтение объекта из базы данных
    Прочитать();

    Элементы.СписокТоваров.Обновить();

КонецПроцедуры

#КонецОбласти

#КонецОбласти