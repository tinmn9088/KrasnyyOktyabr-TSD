// @strict-types
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

    ФормаДокумент = Параметры.Документ;
    ФормаКомплектовщик = Параметры.Комплектовщик;

    ФормаСписокЗаданийНаОтбор.Параметры.УстановитьЗначениеПараметра("Документ", ФормаДокумент);
    ФормаСписокЗаданийНаОтбор.Параметры.УстановитьЗначениеПараметра("Комплектовщик", ФормаКомплектовщик);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

    ОбновитьОстаткиПоЗаданию();

#Если МобильныйКлиент Или МобильноеПриложениеКлиент Тогда

    // Отключение видимости шапки динамического списка, чтобы сэкономить место на экране 
    Элементы.СписокЗаданийНаОтбор.Шапка = Ложь;

#КонецЕсли

    // Заполнение заголовка формы
    Заголовок = СтрШаблон("Выполнение: %1", ФормаДокумент);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

    Если ВводДоступен() И ИмяСобытия = ОповещенияФормыКлиент.ИмяСобытияСканированияШтрихкода() Тогда

        Штрихкод = Строка(Параметр);

        ОбработатьШтрихкод(Штрихкод);

    КонецЕсли;

КонецПроцедуры

#КонецОбласти
#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокЗаданийНаОтбор

// Процедура обрабатывает выбор строки в списке номенклатур.
// 
// Параметры:
//  Элемент - ТаблицаФормы
//  ВыбраннаяСтрока - Число - Номер строки табличной части "ЗаданияНаОтбор"
//  Поле - ПолеФормы
//  СтандартнаяОбработка - Булево
&НаКлиенте
Асинх Процедура СписокЗаданийНаОтборВыборАсинх(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

    ПодробнаяИнформация = ПодробнаяИнформацияОЗаданииНаОтбор(ФормаДокумент, ВыбраннаяСтрока);
    
    // Проверка, что вызов серверной функции прошел без потери соединения с основным сервером
    Если ПодробнаяИнформация = Неопределено Тогда
        
        // Из-за недоступности основного сервера должно появиться предложение перейти в автономный режим
        Возврат;

    КонецЕсли;

    ЗаголовокВопроса = "Короб / Россыпь";
    ТекстВопроса = "Подробно: -";
    
    // Описание различается для коробов и россыпи
    Если ЗначениеЗаполнено(ПодробнаяИнформация.Размер) Тогда

        ЗаголовокВопроса = "Россыпь";
        ТекстВопроса = СтрШаблон("• Модель - %1
                                 |• Размер - %2
                                 |• Материал - %3
                                 |• Цвет - %4",
                                 ПодробнаяИнформация.Модель,
                                 ПодробнаяИнформация.Размер,
                                 ПодробнаяИнформация.Материал,
                                 ПодробнаяИнформация.Цвет);

    Иначе

        ЗаголовокВопроса = "Короба";
        ТекстВопроса = СтрШаблон("• Модель - %1
                                 |• Материал - %2
                                 |• Цвет - %3",
                                 ПодробнаяИнформация.Модель,
                                 ПодробнаяИнформация.Материал,
                                 ПодробнаяИнформация.Цвет);

    КонецЕсли;

    Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ОК, , , ЗаголовокВопроса);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Асинх Процедура ОбработатьШтрихкодСФормыАсинх(Команда)

    Значение = Ждать ВвестиСтрокуАсинх(ФормаШтрихкод, "Введите штрихкод");

    Если Не ЗначениеЗаполнено(Значение) Тогда

        Возврат;

    КонецЕсли;

    ФормаШтрихкод = Значение;
    ОбработатьШтрихкод(ФормаШтрихкод);

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьШтрихкод(Команда)

    ОткрытьФорму("ОбщаяФорма.ФормаПроверкиШтрихкодаОбуви");

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция возвращает ключ уникальности оповещений пользователя.
// 
// Возвращаемое значение:
//  Строка
&НаКлиенте
Функция КлючУникальностиОповещенийПользователя()

    Возврат ИмяФормы;

КонецФункции

// Процедура определяет тип штрихокда и выполняет
// его обработку в зависимости от типа.
// 
// Параметры:
//  Штрихкод - Строка
&НаКлиенте
Процедура ОбработатьШтрихкод(Штрихкод)

    Перем ОписаниеОбработкиШтрихкода; // См. КонтрольОтбора.НовоеОписаниеОбработкиШтрихкода

    // 1. Определение типа штрихкода
    Тип = ШтрихкодыОбувиКлиентСервер.ТипШтрихкода(Штрихкод);

    // 2.1. Остановить обработку, если не удалось определить тип штрихкода
    Если Тип = Неопределено Тогда

        ПоказатьВажноеОповещениеОбОшибке("Неизвестный тип штрихкода", Штрихкод);
        Возврат;

    // 2.2. Обработка штрихкода короба
    ИначеЕсли Тип = ПредопределенноеЗначение("Перечисление.ТипШтрихкода.НомерКороба") Тогда

        ПоказатьОповещение("Обработка номера короба", Штрихкод);

        ОписаниеОбработкиШтрихкода = ОбработатьШтрихкодКороба(Штрихкод);

    // 2.3. Обработка штрихкода россыпи
    ИначеЕсли Тип = ПредопределенноеЗначение("Перечисление.ТипШтрихкода.КодМаркировки") Тогда

        ПоказатьОповещение("Обработка кода маркировки", Штрихкод);

        ОписаниеОбработкиШтрихкода = ОбработатьШтрихкодРоссыпи(Штрихкод);

    КонецЕсли;
    
    // 2.4. Проверка, что вызов серверной функции прошел без потери соединения с основным сервером
    Если ОписаниеОбработкиШтрихкода = Неопределено Тогда
        
        // Из-за недоступности основного сервера должно появиться предложение перейти в автономный режим
        Возврат;

    КонецЕсли;
    
    // 3.1. Оповещение об успешной обработке
    Если ЭтоКодВозвратаУспех(ОписаниеОбработкиШтрихкода.КодВозврата) Тогда

        ЗаголовокОповещения = СтрШаблон("Задание на отбор %1 обработано",
                                        ОписаниеОбработкиШтрихкода.НомерЗаданияНаОтбор);
        ПояснениеОповещения = СтрШаблон("Количество %1 → %2",
                                        ОписаниеОбработкиШтрихкода.ПредыдущееКоличество,
                                        ОписаниеОбработкиШтрихкода.НовоеКоличество);

        ПоказатьОповещениеПоКодуВозврата(ОписаниеОбработкиШтрихкода.КодВозврата,
                                         ЗаголовокОповещения,
                                         ПояснениеОповещения);

        ОбновитьФорму();

    // 3.2. Оповещение о том, что задание на отбор не найдено
    ИначеЕсли ЭтоКодВозвратаНеНайденоЗаданиеНаОтборПоШтрихкоду(ОписаниеОбработкиШтрихкода.КодВозврата) Тогда

        ПоказатьВажноеОповещениеОбОшибкеДляКодаВозврата(ОписаниеОбработкиШтрихкода.КодВозврата,
                                                        "Задание на отбор не найдено",
                                                        Штрихкод);
                                                        
    // 3.3. Оповещение о том, что задание на отбор не найдено
    ИначеЕсли ЭтоКодВозвратаСлишкомМногоВКоробе(ОписаниеОбработкиШтрихкода.КодВозврата) Тогда

        ВКоробе = ОписаниеОбработкиШтрихкода.ПредыдущееКоличество - ОписаниеОбработкиШтрихкода.НовоеКоличество;
        ПояснениеОповещения = СтрШаблон("%1 ↘ %2", ВКоробе, ОписаниеОбработкиШтрихкода.ПредыдущееКоличество);

        ПоказатьВажноеОповещениеОбОшибкеДляКодаВозврата(ОписаниеОбработкиШтрихкода.КодВозврата,
                                                        "В коробе больше чем в задании",
                                                        ПояснениеОповещения);
                                                                    
    // 3.4. Оповещение о том, что у задания отсутствует документ на перемещение
    ИначеЕсли ЭтоКодВозвратаОтсутствуетДокументНаВнутреннееПеремещение(ОписаниеОбработкиШтрихкода.КодВозврата) Тогда

        ПоказатьВажноеОповещениеОбОшибкеДляКодаВозврата(ОписаниеОбработкиШтрихкода.КодВозврата,
                                                        "Нет документа на перемещение",
                                                        "Возможно, в задании ошибка");
                                                                    
    // 3.5. Оповещение о том, что у штрихкод уже был проведен
    ИначеЕсли ЭтоКодВозвратаШтрихкодУжеПроведен(ОписаниеОбработкиШтрихкода.КодВозврата) Тогда

        ПоказатьВажноеОповещениеОбОшибкеДляКодаВозврата(ОписаниеОбработкиШтрихкода.КодВозврата,
                                                        "Штрихкод уже был проведен",
                                                        Строка(ОписаниеОбработкиШтрихкода.ДатаПредыдущегоСканирования));
                                                                    
    // 3.6. Оповещение о том, что у штрихкод уже был проведен другим комплектовщиком
    ИначеЕсли ЭтоКодВозвратаШтрихкодУжеПроведенДругим(ОписаниеОбработкиШтрихкода.КодВозврата) Тогда

        ПояснениеОповещения = СтрШаблон("%1 (%2)",
                                        ОписаниеОбработкиШтрихкода.ДатаПредыдущегоСканирования,
                                        ОписаниеОбработкиШтрихкода.КомплектовщикПредыдущегоСканирования);

        ПоказатьВажноеОповещениеОбОшибкеДляКодаВозврата(ОписаниеОбработкиШтрихкода.КодВозврата,
                                                        "Штрихкод уже был проведен другим",
                                                        ПояснениеОповещения);

    КонецЕсли;

КонецПроцедуры

// Процедура обрабатывает штрихкод короба.
// 
// Параметры:
//  ШтрихкодКороба - Строка
// 
// Возвращаемое значение:
//  См. КонтрольОтбора.НовоеОписаниеОбработкиШтрихкода
&НаСервере
Функция ОбработатьШтрихкодКороба(Знач ШтрихкодКороба)

    Возврат КонтрольОтбора.ОбработатьШтрихкодКороба(ФормаДокумент, ФормаКомплектовщик, ШтрихкодКороба);

КонецФункции

// Процедура обрабатывает штрихкод россыпи.
// 
// Параметры:
//  ШтрихкодРоссыпи - Строка
// 
// Возвращаемое значение:
//  См. КонтрольОтбора.НовоеОписаниеОбработкиШтрихкода
&НаСервере
Функция ОбработатьШтрихкодРоссыпи(Знач ШтрихкодРоссыпи)

    Возврат КонтрольОтбора.ОбработатьШтрихкодРоссыпи(ФормаДокумент, ФормаКомплектовщик, ШтрихкодРоссыпи);

КонецФункции

// Процедура обновляет список заданий на отбор и, если он пуст, отображает
// задание как выполненное.
&НаКлиенте
Процедура ОбновитьФорму()

    Если ЗаданиеВыполнено() Тогда

        Элементы.Комплектовщик.Заголовок = "Выполнил";

        Элементы.ПодсказкаОсталось.Видимость = Ложь;
        Элементы.ПодсказкаОсталосьРоссыпи.Видимость = Ложь;
        Элементы.СписокЗаданийНаОтбор.Видимость = Ложь;
        Элементы.КнопкаВвестиШтрихкод.Видимость = Ложь;

        Элементы.ПодсказкаЗаданиеВыполнено.Видимость = Истина;

        ОповещенияПользователяКлиент.ПоказатьВажноеОповещениеУспех("Задание выполнено",
                                                                   Строка(ФормаДокумент),
                                                                   КлючУникальностиОповещенийПользователя());

    Иначе

        ОбновитьОстаткиПоЗаданию();
        Элементы.СписокЗаданийНаОтбор.Обновить();

    КонецЕсли;

КонецПроцедуры

// Процедура обновляет показатели остатков по заданию на форме.
&НаКлиенте
Процедура ОбновитьОстаткиПоЗаданию()

    ОсталосьПоЗаданию = ОсталосьПоЗаданию(ФормаДокумент, ФормаКомплектовщик);
    ФормаОсталосьПоЗаданиюВКоробах = ОсталосьПоЗаданию.ВКоробах;
    ФормаОсталосьПоЗаданиюРоссыпи = ОсталосьПоЗаданию.Россыпи;

КонецПроцедуры

// См. КонтрольОтбора.ЗаданиеВыполненоДляКомплектовщика
&НаСервере
Функция ЗаданиеВыполнено()

    Возврат КонтрольОтбора.ЗаданиеВыполненоДляКомплектовщика(ФормаДокумент, ФормаКомплектовщик);

КонецФункции

// См. КонтрольОтбора.ОсталосьПоЗаданию
&НаСервереБезКонтекста
Функция ОсталосьПоЗаданию(Знач Задание, Знач Комплектовщик)

    Возврат КонтрольОтбора.ОсталосьПоЗаданию(Задание, Комплектовщик);

КонецФункции

// Подробная информация о задании на отбор.
// 
// Параметры:
//  Документ - ДокументСсылка.Задание
//  НомерСтроки - Число - Номер строки табличной части 
// 
// Возвращаемое значение:
//  Структура:
//  * Модель - Строка
//  * Размер - Строка
//  * Материал - Строка
//  * Цвет - Строка
&НаСервереБезКонтекста
Функция ПодробнаяИнформацияОЗаданииНаОтбор(Знач Документ, Знач НомерСтроки)

    ПодробнаяИнформация = Новый Структура;

    ПодробнаяИнформация.Вставить("Модель", "");
    ПодробнаяИнформация.Вставить("Размер", "");
    ПодробнаяИнформация.Вставить("Материал", "");
    ПодробнаяИнформация.Вставить("Цвет", "");

    Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
                          |    ПРЕДСТАВЛЕНИЕССЫЛКИ(ВсеЗаданияНаОтбор.Модель) КАК Модель,
                          |    ПРЕДСТАВЛЕНИЕССЫЛКИ(ВсеЗаданияНаОтбор.Размер) КАК Размер,
                          |    ПРЕДСТАВЛЕНИЕССЫЛКИ(ВсеЗаданияНаОтбор.Модификатор) КАК Модификатор,
                          |    ПРЕДСТАВЛЕНИЕССЫЛКИ(ВсеЗаданияНаОтбор.Цвет) КАК Цвет
                          |ИЗ
                          |    Документ.Задание.ЗаданияНаОтбор КАК ВсеЗаданияНаОтбор
                          |ГДЕ
                          |    ВсеЗаданияНаОтбор.Ссылка = &Документ
                          |    И ВсеЗаданияНаОтбор.НомерСтроки = &НомерСтроки");

    Запрос.УстановитьПараметр("Документ", Документ);
    Запрос.УстановитьПараметр("НомерСтроки", НомерСтроки);
    РезультатЗапроса = Запрос.Выполнить();
    Выборка = РезультатЗапроса.Выбрать();

    Если Выборка.Следующий() Тогда
         
        //@skip-check property-return-type
        Модель = Выборка.Модель; // Строка 
        //@skip-check property-return-type
        Размер = Выборка.Размер; // Строка 
        //@skip-check property-return-type
        Материал = Выборка.Модификатор; // Строка 
        //@skip-check property-return-type
        Цвет = Выборка.Цвет; // Строка

        ПодробнаяИнформация.Модель = Модель;
        ПодробнаяИнформация.Размер = Размер;
        ПодробнаяИнформация.Материал = Материал;
        ПодробнаяИнформация.Цвет = Цвет;

    КонецЕсли;

    Возврат ПодробнаяИнформация;

КонецФункции

// См. ОповещенияПользователяКлиент.ПоказатьОповещение
// 
// Параметры:
//  Заголовок - Строка
//  Пояснение - Строка
&НаКлиенте
Процедура ПоказатьОповещение(Знач Заголовок, Знач Пояснение)

    ОповещенияПользователяКлиент.ПоказатьОповещение(Заголовок, Пояснение, КлючУникальностиОповещенийПользователя());

КонецПроцедуры

// Процедура воспроизводит звуковой сигнал, соответствующий коду возврата и 
// показывает оповещение.
// 
// Параметры:
//  КодВозврата - Число - См. КодыВозвратаСерверГлобальный
//  Заголовок - Строка
//  Пояснение - Строка
&НаКлиенте
Процедура ПоказатьОповещениеПоКодуВозврата(Знач КодВозврата, Знач Заголовок, Знач Пояснение)

#Если МобильноеПриложениеКлиент Или МобильныйКлиент Тогда

    СредстваМультимедиаКлиент.ВоспроизвестиЗвуковоеОповещениеДляКодаВозврата(КодВозврата);

#КонецЕсли

    ОповещенияПользователяКлиент.ПоказатьОповещение(Заголовок, Пояснение, КлючУникальностиОповещенийПользователя());

КонецПроцедуры

// Процедура воспроизводит звуковой сигнал об ошибке и показывает важное оповещение об ошибке.
// 
// Параметры:
//  Заголовок - Строка
//  Пояснение - Строка
&НаКлиенте
Процедура ПоказатьВажноеОповещениеОбОшибке(Знач Заголовок, Знач Пояснение)

#Если МобильноеПриложениеКлиент Или МобильныйКлиент Тогда

    СредстваМультимедиаКлиент.ВоспроизвестиЗвуковоеОповещениеОшибки();

#КонецЕсли

    ОповещенияПользователяКлиент.ПоказатьВажноеОповещениеОшибка(Заголовок,
                                                                Пояснение,
                                                                КлючУникальностиОповещенийПользователя());

КонецПроцедуры

// Процедура воспроизводит звуковой сигнал, соответствующий коду возврата и 
// показывает важное оповещение об ошибке.
// 
// Параметры:
//  КодВозврата - Число - См. КодыВозвратаСерверГлобальный
//  Заголовок - Строка
//  Пояснение - Строка
&НаКлиенте
Процедура ПоказатьВажноеОповещениеОбОшибкеДляКодаВозврата(Знач КодВозврата, Знач Заголовок, Знач Пояснение)

#Если МобильноеПриложениеКлиент Или МобильныйКлиент Тогда

    СредстваМультимедиаКлиент.ВоспроизвестиЗвуковоеОповещениеДляКодаВозврата(КодВозврата);

#КонецЕсли

    ОповещенияПользователяКлиент.ПоказатьВажноеОповещениеОшибка(Заголовок,
                                                                Пояснение,
                                                                КлючУникальностиОповещенийПользователя());

КонецПроцедуры

#КонецОбласти