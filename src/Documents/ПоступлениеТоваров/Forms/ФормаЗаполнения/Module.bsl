// @strict-types
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

    ФормаДокумент = Параметры.Документ;
    ФормаЗаполнениеЗавершено = ЗаполнениеПоступленияЗавершено(ФормаДокумент);
    ФормаСотрудник = Параметры.Сотрудник;

    ФормаСписокТоваров.Параметры.УстановитьЗначениеПараметра("Документ", ФормаДокумент);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

    Если ФормаЗаполнениеЗавершено Тогда

        ПоказатьЗаполнениеЗавершено();

    КонецЕсли;

    ОбновитьКнопкуУдаленияШтрихкодовБезНоменклатуры();

#Если МобильноеПриложениеКлиент Или МобильныйКлиент Тогда

    Элементы.ПоставщикНадпись.Видимость = Истина;
    Элементы.ПоставщикКонтрагент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;

    Элементы.ПолучательНадпись.Видимость = Истина;
    Элементы.ПолучательМагазин.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
    Элементы.ПолучательСклад.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;

    Элементы.СписокТоваров.Шапка = Ложь;

#КонецЕсли

    // Заполнение заголовка формы
    Заголовок = СтрШаблон("Заполнение: %1", ФормаДокумент);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

    Если ВводДоступен() И ИмяСобытия = ОповещенияФормыКлиент.ИмяСобытияСканированияШтрихкода() Тогда

        Штрихкод = Строка(Параметр);

        ОбработатьШтрихкод(Штрихкод);

    КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокТоваров

// Процедура обрабатывает выбор строки в списке товаров.
// 
// Параметры:
//  Элемент - ТаблицаФормы
//  ВыбраннаяСтрока - Строка - Штрихкод
//  Поле - ПолеФормы
//  СтандартнаяОбработка - Булево
&НаКлиенте
Асинх Процедура СписокТоваровВыборАсинх(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

    ПредыдущееКоличество = КоличествоТовараВПоступлении(ФормаДокумент, ВыбраннаяСтрока);

    // Проверка, что вызов серверной функции прошел без потери соединения с основным сервером
    Если ПредыдущееКоличество = Неопределено Тогда
        
        // Из-за недоступности основного сервера должно появиться предложение перейти в автономный режим
        Возврат;

    КонецЕсли;

    НовоеКоличество = Ждать ВвестиЧислоАсинх(ПредыдущееКоличество, "Новое количество", , 3);

    Если НовоеКоличество <> Неопределено И НовоеКоличество <> ПредыдущееКоличество Тогда

        Если НовоеКоличество > 0 Тогда

            ОбновитьКоличествоТовара(ФормаДокумент, ВыбраннаяСтрока, НовоеКоличество);

        Иначе

            УдалитьТовар(ФормаДокумент, ВыбраннаяСтрока);

            ОповещенияПользователяКлиент.ПоказатьОповещение("Товар удален",
                                                            "",
                                                            КлючУникальностиОповещенийПользователя());

        КонецЕсли;

        ОбновитьФорму();

    КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Асинх Процедура ОбработатьШтрихкодСФормыАсинх(Команда)

    Значение = Ждать ВвестиСтрокуАсинх(ФормаШтрихкод, "Введите штрихкод");

    Если Не ЗначениеЗаполнено(Значение) Тогда

        Возврат;

    КонецЕсли;

    ФормаШтрихкод = Значение;

    ОбработатьШтрихкод(ФормаШтрихкод);

КонецПроцедуры

&НаКлиенте
Асинх Процедура УдалитьШтрихкодБезНоменклатурыАсинх(Команда)
    
    // 1. Подготовка списка штрихкодов без номенклатуры
    СписокШтрихкодовБезНоменклатуры = ШтрихкодыБезНоменклатуры(ФормаДокумент);
    
    // Проверка, что вызов серверной функции прошел без потери соединения с основным сервером
    Если СписокШтрихкодовБезНоменклатуры = Неопределено Тогда
        
        // Из-за недоступности основного сервера должно появиться предложение перейти в автономный режим
        Возврат;

    КонецЕсли;
    
    // 2. Выбор штрихкода для удаления
    ВыбранныйЭлемент = Ждать СписокШтрихкодовБезНоменклатуры.ВыбратьЭлементАсинх("Удалить штрихкод");

    Если ВыбранныйЭлемент = Неопределено Тогда

        Возврат;

    КонецЕсли;

    ВыбранныйШтрихкод = Строка(ВыбранныйЭлемент.Значение);

    // 3. Подтверждение удаления штрихкода
    ОтветНаВопрос = Ждать ВопросАсинх(ВыбранныйШтрихкод, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, "Удалить штрихкод?"); // КодВозвратаДиалога

    Если ОтветНаВопрос <> КодВозвратаДиалога.Да Тогда

        Возврат;

    КонецЕсли;

    // 4. Удаление штрихкода
    УдалитьШтрихкодБезНоменклатуры(ФормаДокумент, ВыбранныйШтрихкод);

    // Нельзя обновлять список товаров, т.к. это вызывает ошибку на мобильном клиенте
    ОбновитьФорму(Ложь);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеПоступленияТоваров

// Функция проверяет значение реквизита ЗаполнениеЗавершено.
// 
// Параметры:
//  ПоступлениеТоваров - ДокументСсылка.ПоступлениеТоваров
// 
// Возвращаемое значение:
//  Булево
&НаСервереБезКонтекста
Функция ЗаполнениеПоступленияЗавершено(Знач ПоступлениеТоваров)

    Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
                          |    ПоступлениеТоваров.ЗаполнениеЗавершено
                          |ИЗ
                          |    Документ.ПоступлениеТоваров КАК ПоступлениеТоваров
                          |ГДЕ
                          |    ПоступлениеТоваров.Ссылка = &Документ");

    Запрос.УстановитьПараметр("Документ", ПоступлениеТоваров);
    РезультатЗапроса = Запрос.Выполнить();
    Выборка = РезультатЗапроса.Выбрать();

    Если Не Выборка.Следующий() Тогда

        ВызватьИсключение ("Не удалось определить завершено ли заполнение");

    КонецЕсли;

    //@skip-check property-return-type
    ЗаполнениеЗавершено = Выборка.ЗаполнениеЗавершено; // Булево

    Возврат ЗаполнениеЗавершено;

КонецФункции

// Процедура обрабатывает штрихкод.
// 
// Параметры:
//  Штрихкод - Строка
&НаКлиенте
Процедура ОбработатьШтрихкод(Штрихкод)

    Перем ОписаниеОбработкиШтрихкода; // См. Перемещения.ОбработатьШтрихкодТовара

    // 1. Оповещение пользователю о начале обработки штрихкода
    ПоказатьОповещениеОбУспешномСканировании("Обработка штрихкода", Штрихкод);
                                                    
    // 2.1. Обработка штрихкода
    
    // Попытка извлечь GTIN из штрихкода
    GTIN = GTINИзШтрихкода(Штрихкод);

    ОписаниеОбработкиШтрихкода =  ОбработатьШтрихкодТовара(ФормаДокумент, ?(ЗначениеЗаполнено(GTIN), GTIN, Штрихкод));       
                                   
    // 2.2. Проверка, что вызов серверной функции прошел без потери соединения с основным сервером
    Если ОписаниеОбработкиШтрихкода = Неопределено Тогда
        
        // Из-за недоступности основного сервера должно появиться предложение перейти в автономный режим
        Возврат;

    КонецЕсли;
                                              
    // 3.1. Оповещение об успешной обработке
    Если ЭтоКодВозвратаУспех(ОписаниеОбработкиШтрихкода.КодВозврата) Тогда

        ПояснениеОповещения = СтрШаблон("Количество %1 → %2",
                                        ОписаниеОбработкиШтрихкода.ПредыдущееКоличество,
                                        ОписаниеОбработкиШтрихкода.НовоеКоличество);

        ПоказатьОповещениеПоКодуВозврата(ОписаниеОбработкиШтрихкода.КодВозврата, "Товар", ПояснениеОповещения);

        ОбновитьФорму();
                                                        
    // 3.2. Если не найдена номенклатура, предложить сохранить штрихкод без номенклатуры
    ИначеЕсли ЭтоКодВозвратаНеНайденаНоменклатура(ОписаниеОбработкиШтрихкода.КодВозврата) Тогда

        ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьОтветНаВопросОСохраненииШтрихкодаБезНоменклатуры",
                                                ЭтотОбъект,
                                                Штрихкод),
                       "Номенклатура со штрихкодом не найдена, но можно будет создать новую карточку позднее.",
                       РежимДиалогаВопрос.ДаНет,
                       ,
                       КодВозвратаДиалога.Да,
                       "Сохранить штрихкод?");

    КонецЕсли;

КонецПроцедуры

// Процедура сохраняет штрихкод без номенклатуры.
// 
// Параметры:
//  РезультатВопроса - КодВозвратаДиалога
//  ДополнительныеПараметры - Строка
&НаКлиенте
Процедура ОбработатьОтветНаВопросОСохраненииШтрихкодаБезНоменклатуры(РезультатВопроса, ДополнительныеПараметры) Экспорт

    // 1. Проверка, что пользователь не нажал кнопку "Отмена"
    Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда

        Возврат;

    КонецЕсли;

    // 2. Обработка штрихкода
    Штрихкод = ДополнительныеПараметры;
    ОписаниеОбработкиШтрихкода = ОбработатьШтрихкодБезНоменклатуры(ФормаДокумент, Штрихкод);
    
    // 3.1. Оповещение об успешной обработке
    Если ЭтоКодВозвратаУспех(ОписаниеОбработкиШтрихкода.КодВозврата) Тогда

        ПоказатьОповещениеПоКодуВозврата(ОписаниеОбработкиШтрихкода.КодВозврата,
                                         "Штрихкод без номенклатуры",
                                         ДополнительныеПараметры);

        ОбновитьФорму();
                                                        
    // 3.2. Оповещение об ошибке
    Иначе

        ПоказатьВажноеОповещениеОбОшибкеДляКодаВозврата(ОписаниеОбработкиШтрихкода.КодВозврата,
                                                        "Не удалось сохранить штрихкод без номенклатуры",
                                                        Штрихкод);

    КонецЕсли;

    ОбновитьФорму();

КонецПроцедуры

// См. ШтрихкодыКлиентСервер.GTINИзШтрихкода
&НаКлиенте
Функция GTINИзШтрихкода(Штрихкод)

    Возврат ШтрихкодыКлиентСервер.GTINИзШтрихкода(Штрихкод);

КонецФункции 

// См. ПриходыБСО.ОбработатьШтрихкодТовара
&НаСервереБезКонтекста
Функция ОбработатьШтрихкодТовара(ПоступлениеТоваров, ШтрихкодТовара)

    Возврат ПриходыБСО.ОбработатьШтрихкодТовара(ПоступлениеТоваров, ШтрихкодТовара);

КонецФункции

// См. ПриходыБСО.ОбработатьШтрихкодБезНоменклатуры
&НаСервереБезКонтекста
Функция ОбработатьШтрихкодБезНоменклатуры(ПоступлениеТоваров, ШтрихкодБезНоменклатуры)

    Возврат ПриходыБСО.ОбработатьШтрихкодБезНоменклатуры(ПоступлениеТоваров, ШтрихкодБезНоменклатуры);

КонецФункции

// См. РегистрыСведений.ШтрихкодыТоваров.
// 
// Параметры:
//  ПоступлениеТоваров - ДокументСсылка.ПоступлениеТоваров
//  Штрихкод - Строка
&НаСервереБезКонтекста
Функция КоличествоТовараВПоступлении(Знач ПоступлениеТоваров, Знач Штрихкод)

    Возврат РегистрыСведений.ШтрихкодыТоваров.КоличествоПоШтрихкоду(ПоступлениеТоваров, Штрихкод);

КонецФункции

// См. РегистрыСведений.ШтрихкодыТоваров.УстановитьКоличество
// 
// Параметры:
//  ПоступлениеТоваров - ДокументСсылка.ПоступлениеТоваров
//  Штрихкод - Строка
//  НовоеКоличествоТовара - Число
&НаСервереБезКонтекста
Процедура ОбновитьКоличествоТовара(Знач ПоступлениеТоваров, Знач Штрихкод, Знач НовоеКоличествоТовара)

    РегистрыСведений.ШтрихкодыТоваров.УстановитьКоличество(ПоступлениеТоваров, Штрихкод, НовоеКоличествоТовара);

КонецПроцедуры

// См. РегистрыСведений.ШтрихкодыТоваров.УдалитьШтрихкод
// 
// Параметры:
//  ПоступлениеТоваров - ДокументСсылка.ПоступлениеТоваров
//  Штрихкод - Строка
&НаСервереБезКонтекста
Процедура УдалитьТовар(Знач ПоступлениеТоваров, Знач Штрихкод)

    РегистрыСведений.ШтрихкодыТоваров.УдалитьШтрихкод(ПоступлениеТоваров, Штрихкод);

КонецПроцедуры

// См. РегистрыСведений.ШтрихкодыТоваров.УдалитьШтрихкодБезНоменклатуры
// 
// Параметры:
//  ПоступлениеТоваров - ДокументСсылка.ПоступлениеТоваров
//  ШтрихкодБезНоменклатуры - Строка
&НаСервереБезКонтекста
Процедура УдалитьШтрихкодБезНоменклатуры(Знач ПоступлениеТоваров, Знач ШтрихкодБезНоменклатуры)

    РегистрыСведений.ШтрихкодыТоваров.УдалитьШтрихкодБезНоменклатуры(ПоступлениеТоваров, ШтрихкодБезНоменклатуры);

КонецПроцедуры

// См. РегистрСведенийМенеджер.ШтрихкодыТоваров.КоличествоШтрихкодовБезНоменклатуры
// 
// Параметры:
//  ПоступлениеТоваров - ДокументСсылка.ПоступлениеТоваров
//  
// Возвращаемое значение:
//  Число
&НаСервереБезКонтекста
Функция КоличествоШтрихкодовБезНоменклатуры(ПоступлениеТоваров)

    Возврат РегистрыСведений.ШтрихкодыТоваров.КоличествоШтрихкодовБезНоменклатуры(ПоступлениеТоваров);

КонецФункции

// Функция возвращает список штрихкодов без номенклатуры.
// 
// Параметры:
//  ПоступлениеТоваров - ДокументСсылка.ПоступлениеТоваров
// 
// Возвращаемое значение:
// СписокЗначений из Строка
&НаСервереБезКонтекста
Функция ШтрихкодыБезНоменклатуры(ПоступлениеТоваров)

    Штрихкоды = Новый СписокЗначений; // СписокЗначений из Строка

    Запрос = Новый Запрос("ВЫБРАТЬ
                          |    ВсеШтрихкоды.Штрихкод
                          |ИЗ
                          |    РегистрСведений.ШтрихкодыТоваров КАК ВсеШтрихкоды
                          |ГДЕ
                          |    ВсеШтрихкоды.Документ = &Документ
                          |    И ВсеШтрихкоды.Номенклатура = ЗНАЧЕНИЕ(Справочник.НоменклатураРозница.ПустаяСсылка)");

    Запрос.УстановитьПараметр("Документ", ПоступлениеТоваров);
    РезультатЗапроса = Запрос.Выполнить();
    Выборка = РезультатЗапроса.Выбрать();

    Пока Выборка.Следующий() Цикл
        
        //@skip-check property-return-type
        Штрихкод = Выборка.Штрихкод; // Строка

        Штрихкоды.Добавить(Штрихкод);

    КонецЦикла;

    Возврат Штрихкоды;

КонецФункции

#КонецОбласти

#Область ОповещенияПользователя

// Функция возвращает ключ уникальности оповещений пользователя.
// 
// Возвращаемое значение:
//  Строка
&НаКлиенте
Функция КлючУникальностиОповещенийПользователя()

    Возврат ИмяФормы;

КонецФункции

// Процедура воспроизводит звуковой сигнал и показывает оповещение.
// 
// Параметры:
//  Заголовок - Строка
//  Пояснение - Строка
&НаКлиенте
Процедура ПоказатьОповещениеОбУспешномСканировании(Знач Заголовок, Знач Пояснение)

#Если МобильноеПриложениеКлиент Или МобильныйКлиент Тогда

    СредстваМультимедиаКлиент.ВоспроизвестиЗвуковоеОповещениеОбУспешномСканированииШтрихкода();

#КонецЕсли

    ОповещенияПользователяКлиент.ПоказатьОповещение(Заголовок, Пояснение, КлючУникальностиОповещенийПользователя());

КонецПроцедуры

// Процедура воспроизводит звуковой сигнал, соответствующий коду возврата и 
// показывает оповещение.
// 
// Параметры:
//  КодВозврата - Число - См. КодыВозвратаСерверГлобальный
//  Заголовок - Строка
//  Пояснение - Строка
&НаКлиенте
Процедура ПоказатьОповещениеПоКодуВозврата(Знач КодВозврата, Знач Заголовок, Знач Пояснение)

#Если МобильноеПриложениеКлиент Или МобильныйКлиент Тогда

    СредстваМультимедиаКлиент.ВоспроизвестиЗвуковоеОповещениеДляКодаВозврата(КодВозврата);

#КонецЕсли

    ОповещенияПользователяКлиент.ПоказатьОповещение(Заголовок, Пояснение, КлючУникальностиОповещенийПользователя());

КонецПроцедуры

// Процедура воспроизводит звуковой сигнал, соответствующий коду возврата и 
// показывает важное оповещение об ошибке.
// 
// Параметры:
//  КодВозврата - Число - См. КодыВозвратаСерверГлобальный
//  Заголовок - Строка
//  Пояснение - Строка
&НаКлиенте
Процедура ПоказатьВажноеОповещениеОбОшибкеДляКодаВозврата(Знач КодВозврата, Знач Заголовок, Знач Пояснение)

#Если МобильноеПриложениеКлиент Или МобильныйКлиент Тогда

    СредстваМультимедиаКлиент.ВоспроизвестиЗвуковоеОповещениеДляКодаВозврата(КодВозврата);

#КонецЕсли

    ОповещенияПользователяКлиент.ПоказатьВажноеОповещениеОшибка(Заголовок,
                                                                Пояснение,
                                                                КлючУникальностиОповещенийПользователя());

КонецПроцедуры

#КонецОбласти

#Область Форма

&НаКлиенте
Процедура ПоказатьЗаполнениеЗавершено()

    Элементы.СписокТоваров.Видимость = Ложь;
    Элементы.КнопкаВвестиШтрихкод.Видимость = Ложь;

    Элементы.ПодсказкаЗаполнениеЗавершено.Видимость = Истина;

    Элементы.Сотрудник.Заголовок = "Заполнил";

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКнопкуУдаленияШтрихкодовБезНоменклатуры()

    КоличествоШтрихкодовБезНоменклатуры = КоличествоШтрихкодовБезНоменклатуры(ФормаДокумент);
    
    // Проверка, что вызов серверной функции прошел без потери соединения с основным сервером
    Если КоличествоШтрихкодовБезНоменклатуры = Неопределено Тогда
        
        // Из-за недоступности основного сервера должно появиться предложение перейти в автономный режим
        Возврат;

    КонецЕсли;

    ПоказатьКнопку = КоличествоШтрихкодовБезНоменклатуры > 0;

    // Приходится скрывать поле формы с названием документа, чтобы в автономном режиме
    // не появилась полоса прокрутки
    Элементы.Документ.Видимость = Не ПоказатьКнопку;

    Элементы.КнопкаУдалитьШтрихкодБезНоменклатуры.Видимость = ПоказатьКнопку;
    Элементы.КнопкаУдалитьШтрихкодБезНоменклатуры.Заголовок = СтрШаблон("Штрихкоды без номенклатуры (%1)",
                                                                        КоличествоШтрихкодовБезНоменклатуры);

КонецПроцедуры

// Процедура перечитывает документ из базы данных и обновляет список товаров.
&НаКлиенте
Процедура ОбновитьФорму(ОбновитьСписокТоваров = Истина)

    ОбновитьКнопкуУдаленияШтрихкодовБезНоменклатуры();

    Если ОбновитьСписокТоваров Тогда

        Элементы.СписокТоваров.Обновить();

    КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти