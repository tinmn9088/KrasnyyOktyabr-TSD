// @strict-types
#Область ПрограммныйИнтерфейс

// Функция определяет итоги пересчета.
// 
// Параметры:
//  ПересчетТоваров - ДокументСсылка.ПересчетТоваров
// 
// Возвращаемое значение:
//  См. НовоеОписаниеИтоговПересчета
Функция ИтогиПересчета(Знач ПересчетТоваров) Экспорт

    Запрос = Новый Запрос("ВЫБРАТЬ
                          |    ВсеТовары.Номенклатура КАК Номенклатура,
                          |    СУММА(ВсеТовары.КоличествоУпаковок) КАК КоличествоУчет,
                          |    0 КАК КоличествоФакт
                          |ПОМЕСТИТЬ ПроверяемыеТовары
                          |ИЗ
                          |    Документ.ПересчетТоваров.Товары КАК ВсеТовары
                          |ГДЕ
                          |    ВсеТовары.Ссылка = &Документ
                          |СГРУППИРОВАТЬ ПО
                          |    ВсеТовары.Номенклатура
                          |
                          |ИНДЕКСИРОВАТЬ ПО
                          |    Номенклатура
                          |;
                          |
                          |////////////////////////////////////////////////////////////////////////////////
                          |ВЫБРАТЬ
                          |    ВсеШтрихкоды.Номенклатура КАК Номенклатура,
                          |    0 КАК КоличествоУчет,
                          |    СУММА(ВсеШтрихкоды.Количество) КАК КоличествоФакт
                          |ПОМЕСТИТЬ НеоприходованныеТовары
                          |ИЗ
                          |    РегистрСведений.ШтрихкодыТоваров КАК ВсеШтрихкоды
                          |ГДЕ
                          |    ВсеШтрихкоды.Документ = &Документ
                          |СГРУППИРОВАТЬ ПО
                          |    ВсеШтрихкоды.Номенклатура
                          |
                          |ИНДЕКСИРОВАТЬ ПО
                          |    Номенклатура
                          |;
                          |
                          |////////////////////////////////////////////////////////////////////////////////
                          |ВЫБРАТЬ
                          |    ТоварыВПересчете.Номенклатура КАК Номенклатура,
                          |    ТоварыВПересчете.КоличествоУчет КАК КоличествоУчет,
                          |    ТоварыВПересчете.КоличествоФакт КАК КоличествоФакт
                          |ПОМЕСТИТЬ ВсеТоварыВПересчете
                          |ИЗ
                          |    ПроверяемыеТовары КАК ТоварыВПересчете
                          |
                          |ОБЪЕДИНИТЬ ВСЕ
                          |
                          |ВЫБРАТЬ
                          |    НеоприходованныеТовары.Номенклатура,
                          |    НеоприходованныеТовары.КоличествоУчет,
                          |    НеоприходованныеТовары.КоличествоФакт
                          |ИЗ
                          |    НеоприходованныеТовары КАК НеоприходованныеТовары
                          |
                          |ИНДЕКСИРОВАТЬ ПО
                          |    Номенклатура
                          |;
                          |
                          |////////////////////////////////////////////////////////////////////////////////
                          |УНИЧТОЖИТЬ ПроверяемыеТовары
                          |;
                          |
                          |////////////////////////////////////////////////////////////////////////////////
                          |УНИЧТОЖИТЬ НеоприходованныеТовары
                          |;
                          |
                          |////////////////////////////////////////////////////////////////////////////////
                          |ВЫБРАТЬ
                          |    ВсеТоварыВПересчете.Номенклатура КАК Номенклатура,
                          |    СУММА(ВсеТоварыВПересчете.КоличествоФакт) - СУММА(ВсеТоварыВПересчете.КоличествоУчет) КАК Отклонение
                          |ИЗ
                          |    ВсеТоварыВПересчете КАК ВсеТоварыВПересчете
                          |ГДЕ
                          |    ВсеТоварыВПересчете.Номенклатура <> ЗНАЧЕНИЕ(Справочник.НоменклатураРозница.ПустаяСсылка)
                          |СГРУППИРОВАТЬ ПО
                          |    ВсеТоварыВПересчете.Номенклатура");

    Запрос.УстановитьПараметр("Документ", ПересчетТоваров);
    РезультатЗапроса = Запрос.Выполнить();
    Выборка = РезультатЗапроса.Выбрать();

    ОписаниеИтоговПересчета = НовоеОписаниеИтоговПересчета();

    Пока Выборка.Следующий() Цикл
        
        //@skip-check property-return-type
        Отклонение = Выборка.Отклонение; // Число

        Если Отклонение > 0 Тогда

            ОписаниеИтоговПересчета.Излишки = ОписаниеИтоговПересчета.Излишки + Отклонение;

        ИначеЕсли Отклонение < 0 Тогда

            ОписаниеИтоговПересчета.Недостатки = ОписаниеИтоговПересчета.Недостатки - Отклонение;

        КонецЕсли;

    КонецЦикла;

    Возврат ОписаниеИтоговПересчета;

КонецФункции

// Функция определяет существует ли номенклатура с данным штрихкодом и увеличивает счетчик количества.
// 
// Параметры:
//  ПересчетТоваров - ДокументСсылка.ПересчетТоваров
//  ШтрихкодТовара - Строка
// 
// Возвращаемое значение:
//  См. НовоеОписаниеОбработкиШтрихкода
Функция ОбработатьШтрихкодТовара(Знач ПересчетТоваров, Знач ШтрихкодТовара) Экспорт

    НачатьТранзакцию();

    Попытка

        ОписаниеОбработкиШтрихкода = НовоеОписаниеОбработкиШтрихкода();
        
        // 1. Поиск номенклатуры по штрихкоду 
        Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
                              |    ВсеШтрихкодыНоменклатуры.Ссылка КАК Номенклатура
                              |ИЗ
                              |    Справочник.НоменклатураРозница.Штрихкоды КАК ВсеШтрихкодыНоменклатуры
                              |ГДЕ
                              |    ВсеШтрихкодыНоменклатуры.Штрихкод = &Штрихкод");

        Запрос.УстановитьПараметр("Штрихкод", ШтрихкодТовара);
        РезультатЗапроса = Запрос.Выполнить();
        Выборка = РезультатЗапроса.Выбрать();

        Если Не Выборка.Следующий() Тогда

            ОтменитьТранзакцию();

            ОписаниеОбработкиШтрихкода.КодВозврата = КодВозвратаНовыйШтрихкод();

            Возврат ОписаниеОбработкиШтрихкода;

        КонецЕсли;

        //@skip-check property-return-type
        НоменклатураТовара = Выборка.Номенклатура; // СправочникСсылка.НоменклатураРозница
        
        // 2. Увеличение количества товара или добавление нового товара
        НовоеКоличество = ?(ШтрихкодЕстьВПересчете(ПересчетТоваров, ШтрихкодТовара),
                            УвеличитьКоличествоТовара(ПересчетТоваров, ШтрихкодТовара, НоменклатураТовара),
                            ДобавитьТоварВПересчет(ПересчетТоваров, ШтрихкодТовара, НоменклатураТовара));

        ОписаниеОбработкиШтрихкода.НовоеКоличество = НовоеКоличество;
        ОписаниеОбработкиШтрихкода.ПредыдущееКоличество = НовоеКоличество - 1;

        ОписаниеОбработкиШтрихкода.КодВозврата = КодВозвратаТоварНайден();

        ЗафиксироватьТранзакцию();

        Возврат ОписаниеОбработкиШтрихкода;

    Исключение

        ОтменитьТранзакцию();
        ВызватьИсключение;

    КонецПопытки;

КонецФункции

// Функция добавляет штрихкод без номенклатуры в пересчет товаров.
// 
// Параметры:
//  ПересчетТоваров - ДокументСсылка.ПересчетТоваров
//  ШтрихкодБезНоменклатуры - Строка
// 
// Возвращаемое значение:
//  См. НовоеОписаниеОбработкиШтрихкода
Функция ОбработатьШтрихкодБезНоменклатуры(Знач ПересчетТоваров, Знач ШтрихкодБезНоменклатуры) Экспорт

    ОписаниеОбработкиШтрихкода = НовоеОписаниеОбработкиШтрихкода();

    РегистрыСведений.ШтрихкодыТоваров.ДобавитьШтрихкод(ПересчетТоваров, ШтрихкодБезНоменклатуры);

    ОписаниеОбработкиШтрихкода.КодВозврата = КодВозвратаУспех();

    Возврат ОписаниеОбработкиШтрихкода;

КонецФункции

// Функция удаляет все штрихкоды, которые были обработаны для документа.
// 
// Параметры:
//  ПересчетТоваров - ДокументСсылка.ПересчетТоваров
// 
// Возвращаемое значение:
//  Число - Количество штрихкодов, которое было удалено
Функция ОчиститьШтрихкоды(Знач ПересчетТоваров) Экспорт

    Возврат РегистрыСведений.ШтрихкодыТоваров.УдалитьШтрихкодыДокумента(ПересчетТоваров);

КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Функция создает описание обработки штрихкода.
// 
// Возвращаемое значение:
//  Структура - Описание обработки штрихкода:
// * КодВозврата - Число - Код, указывающий на результат обработки штрихкода
// * ПредыдущееКоличество - Неопределено, Число - Значение реквизита "Количество" до обработки штрихкода
// * НовоеКоличество - Неопределено, Число - Значение реквизита "Количество" после обработки штрихкода
Функция НовоеОписаниеОбработкиШтрихкода() Экспорт

    ОписаниеОбработкиШтрихкода = Новый Структура;

    ОписаниеОбработкиШтрихкода.Вставить("КодВозврата", КодВозвратаУспех());
    ОписаниеОбработкиШтрихкода.Вставить("ПредыдущееКоличество", Неопределено);
    ОписаниеОбработкиШтрихкода.Вставить("НовоеКоличество", Неопределено);

    Возврат ОписаниеОбработкиШтрихкода;

КонецФункции

// Функция создает описание итогов пересчета.
// 
// Возвращаемое значение:
//  Структура - Описание обработки штрихкода:
// * Излишки - Число
// * Недостатки - Число
Функция НовоеОписаниеИтоговПересчета() Экспорт

    Возврат Новый Структура("Излишки, Недостатки", 0, 0);

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// См. РегистрСведенийМенеджер.ШтрихкодыТоваров.ЕстьШтрихкод
Функция ШтрихкодЕстьВПересчете(Знач Документ, Знач Штрихкод)

    Возврат РегистрыСведений.ШтрихкодыТоваров.ЕстьШтрихкод(Документ, Штрихкод);

КонецФункции

// Функция определяет суммарное количество товара в документе.
// 
// Параметры:
//  Документ - ДокументСсылка.ПересчетТоваров
//  Номенклатура - СправочникСсылка.НоменклатураРозница
// 
// Возвращаемое значение:
//  Число - Суммарное количество для всех штрихкодов номенклатуры
Функция КоличествоТовара(Знач Документ, Знач Номенклатура)

    Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
                          |    СУММА(ВсеШтрихкоды.Количество) КАК Количество
                          |ИЗ
                          |    РегистрСведений.ШтрихкодыТоваров КАК ВсеШтрихкоды
                          |ГДЕ
                          |    ВсеШтрихкоды.Документ = &Документ
                          |    И ВсеШтрихкоды.Номенклатура = &Номенклатура");

    Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
    Запрос.УстановитьПараметр("Документ", Документ);
    РезультатЗапроса = Запрос.Выполнить();
    Выборка = РезультатЗапроса.Выбрать();

    Если Не Выборка.Следующий() Тогда

        ВызватьИсключение ("Не удалось получить обновленное количество товара");

    КонецЕсли;
    
    //@skip-check property-return-type
    Количество = Выборка.Количество; // Число

    Возврат Количество;

КонецФункции

// См. РегистрСведенийМенеджер.ШтрихкодыТоваров.ДобавитьШтрихкод
// 
// Возвращаемое значение:
//  Число - Суммарное количество для всех штрихкодов номенклатуры
Функция ДобавитьТоварВПересчет(Знач Документ, Знач Штрихкод, Знач Номенклатура)

    РегистрыСведений.ШтрихкодыТоваров.ДобавитьШтрихкод(Документ, Штрихкод, Номенклатура);

    Возврат КоличествоТовара(Документ, Номенклатура);

КонецФункции

// См. РегистрСведенийМенеджер.ШтрихкодыТоваров.УвеличитьКоличество
// 
// Возвращаемое значение:
//  Число - Суммарное количество для всех штрихкодов номенклатуры
Функция УвеличитьКоличествоТовара(Знач Документ, Знач Штрихкод, Знач Номенклатура)

    РегистрыСведений.ШтрихкодыТоваров.УвеличитьКоличество(Документ, Штрихкод, Номенклатура);

    Возврат КоличествоТовара(Документ, Номенклатура);

КонецФункции

#КонецОбласти